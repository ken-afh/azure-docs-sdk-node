### YamlMime:TSType
name: LroEngine
uid: '@azure/arm-storage.LroEngine'
package: '@azure/arm-storage'
summary: 'The LRO Engine, a class that performs polling.'
fullName: 'LroEngine<TResult, TState>'
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'LroEngine(LongRunningOperation<TResult>, LroEngineOptions)'
    uid: '@azure/arm-storage.LroEngine.constructor'
    package: '@azure/arm-storage'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new LroEngine(lro: LongRunningOperation<TResult>, options?:
        LroEngineOptions)
      parameters:
        - id: lro
          type: >-
            <xref uid="@azure/arm-storage.LongRunningOperation"
            />&lt;TResult&gt;
          description: ''
        - id: options
          type: <xref uid="@azure/arm-storage.LroEngineOptions" />
          description: ''
inheritedMethods:
  - name: 'cancelOperation(undefined | { abortSignal?: AbortSignalLike })'
    uid: '@azure/arm-storage.LroEngine.cancelOperation'
    package: '@azure/arm-storage'
    summary: >
      Attempts to cancel the underlying operation.

      It only optionally receives an object with an abortSignal property, from
      \@azure/abort-controller's AbortSignalLike.


      If it's called again before it finishes, it will throw an error.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelOperation(options?: undefined | { abortSignal?:
        AbortSignalLike }): Promise<void>
      parameters:
        - id: options
          type: 'undefined | { abortSignal?: AbortSignalLike }'
          description: |
            Optional properties passed to the operation's update method.
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> Poller.cancelOperation
  - name: getOperationState()
    uid: '@azure/arm-storage.LroEngine.getOperationState'
    package: '@azure/arm-storage'
    summary: >
      Returns the state of the operation.

      Even though TState will be the same type inside any of the methods of any
      extension of the Poller class,

      implementations of the pollers can customize what's shared with the public
      by writing their own

      version of the `getOperationState` method, and by defining two types, one
      representing the internal state of the poller

      and a public type representing a safe to share subset of the properties of
      the internal state.

      Their definition of getOperationState can then return their public type.


      Example:


      ```ts

      // Let's say we have our poller's operation state defined as:

      interface MyOperationState extends PollOperationState<ResultType> {
        privateProperty?: string;
        publicProperty?: string;
      }


      // To allow us to have a true separation of public and private state, we
      have to define another interface:

      interface PublicState extends PollOperationState<ResultType> {
        publicProperty?: string;
      }


      // Then, we define our Poller as follows:

      export class MyPoller extends Poller<MyOperationState, ResultType> {
        // ... More content is needed here ...

        public getOperationState(): PublicState {
          const state: PublicState = this.operation.state;
          return {
            // Properties from PollOperationState<TResult>
            isStarted: state.isStarted,
            isCompleted: state.isCompleted,
            isCancelled: state.isCancelled,
            error: state.error,
            result: state.result,

            // The only other property needed by PublicState.
            publicProperty: state.publicProperty
          }
        }
      }

      ```


      You can see this in the tests of this repository, go to the file:

      `../test/utils/testPoller.ts`

      and look for the getOperationState implementation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getOperationState(): TState'
      return:
        description: ''
        type: TState
    inheritanceDescription: <b>Inherited From</b> Poller.getOperationState
  - name: getResult()
    uid: '@azure/arm-storage.LroEngine.getResult'
    package: '@azure/arm-storage'
    summary: |-
      Returns the result value of the operation,
      regardless of the state of the poller.
      It can return undefined or an incomplete form of the final TResult value
      depending on the implementation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getResult(): TResult | undefined'
      return:
        description: ''
        type: TResult | undefined
    inheritanceDescription: <b>Inherited From</b> Poller.getResult
  - name: isDone()
    uid: '@azure/arm-storage.LroEngine.isDone'
    package: '@azure/arm-storage'
    summary: Returns true if the poller has finished polling.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isDone(): boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Poller.isDone
  - name: isStopped()
    uid: '@azure/arm-storage.LroEngine.isStopped'
    package: '@azure/arm-storage'
    summary: Returns true if the poller is stopped.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isStopped(): boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Poller.isStopped
  - name: 'onProgress((state: TState) => void)'
    uid: '@azure/arm-storage.LroEngine.onProgress'
    package: '@azure/arm-storage'
    summary: >
      Invokes the provided callback after each polling is completed,

      sending the current state of the poller's operation.

      It returns a method that can be used to stop receiving updates on the
      given callback function.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onProgress(callback: (state: TState) => void): CancelOnProgress'
      parameters:
        - id: callback
          type: '(state: TState) =&gt; void'
          description: ''
      return:
        description: ''
        type: CancelOnProgress
    inheritanceDescription: <b>Inherited From</b> Poller.onProgress
  - name: 'poll(undefined | { abortSignal?: AbortSignalLike })'
    uid: '@azure/arm-storage.LroEngine.poll'
    package: '@azure/arm-storage'
    summary: >
      Returns a promise that will resolve once a single polling request
      finishes.

      It does this by calling the update method of the Poller's operation.

      It only optionally receives an object with an abortSignal property, from
      \@azure/abort-controller's AbortSignalLike.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function poll(options?: undefined | { abortSignal?: AbortSignalLike }):
        Promise<void>
      parameters:
        - id: options
          type: 'undefined | { abortSignal?: AbortSignalLike }'
          description: |
            Optional properties passed to the operation's update method.
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> Poller.poll
  - name: pollUntilDone()
    uid: '@azure/arm-storage.LroEngine.pollUntilDone'
    package: '@azure/arm-storage'
    summary: >-
      Returns a promise that will resolve once the underlying operation is
      completed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function pollUntilDone(): Promise<TResult>'
      return:
        description: ''
        type: Promise&lt;TResult&gt;
    inheritanceDescription: <b>Inherited From</b> Poller.pollUntilDone
  - name: stopPolling()
    uid: '@azure/arm-storage.LroEngine.stopPolling'
    package: '@azure/arm-storage'
    summary: Stops the poller from continuing to poll.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function stopPolling()
    inheritanceDescription: <b>Inherited From</b> Poller.stopPolling
  - name: toString()
    uid: '@azure/arm-storage.LroEngine.toString'
    package: '@azure/arm-storage'
    summary: |-
      Returns a serialized version of the poller's operation
      by invoking the operation's toString method.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toString(): string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Poller.toString
methods:
  - name: delay()
    uid: '@azure/arm-storage.LroEngine.delay'
    package: '@azure/arm-storage'
    summary: >-
      The method used by the poller to wait before attempting to update its
      operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delay(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
extends: 'Poller&lt;TState, TResult&gt;'
