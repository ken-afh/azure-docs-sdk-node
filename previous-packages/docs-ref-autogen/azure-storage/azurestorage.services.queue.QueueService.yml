### YamlMime:TSType
name: QueueService
uid: azure-storage.azurestorage.services.queue.QueueService
package: azure-storage
summary: ''
fullName: QueueService
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'QueueService(string, string, string | StorageHost, string, string)'
    uid: azure-storage.azurestorage.services.queue.QueueService.constructor
    package: azure-storage
    summary: >-
      Creates a new QueueService object.

      The QueueService class is used to perform operations on the Microsoft
      Azure Queue Service.


      For more information on using the Queue Service, as well as task focused
      information on using it from a Node.js application, see

      [How to Use the Queue Service from
      Node.js](http://azure.microsoft.com/en-us/documentation/articles/storage-nodejs-how-to-use-queues/).

      The following defaults can be set on the Queue service.

      messageEncoder                                      The message encoder to
      specify how QueueService encodes and decodes the queue message. Default is
      `[TextXmlQueueMessageEncoder](xref:TextXmlQueueMessageEncoder)`.

      defaultTimeoutIntervalInMs                          The default timeout
      interval, in milliseconds, to use for request made via the Queue service.

      defaultClientRequestTimeoutInMs                     The default timeout of
      client requests, in milliseconds, to use for the request made via the
      Queue service.

      defaultMaximumExecutionTimeInMs                     The default maximum
      execution time across all potential retries, for requests made via the
      Queue service.

      defaultLocationMode                                 The default location
      mode for requests made via the Queue service.

      useNagleAlgorithm                                   Determines whether the
      Nagle algorithm is used for requests made via the Queue service; true to
      use the
                                                          Nagle algorithm; otherwise, false. The default value is false.
      enableGlobalHttpAgent                               Determines whether
      global HTTP(s) agent is enabled; true to use Global HTTP(s) agent;
      otherwise, false to use
                                                          http(s).Agent({keepAlive:true}).
      If no connection string or storageaccount and storageaccesskey are
      provided,

      the AZURE_STORAGE_CONNECTION_STRING or AZURE_STORAGE_ACCOUNT and
      AZURE_STORAGE_ACCESS_KEY environment variables will be used.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new QueueService(storageAccountOrConnectionString?: string,
        storageAccessKey?: string, host?: string | StorageHost, sasToken?:
        string, endpointSuffix?: string)
      parameters:
        - id: storageAccountOrConnectionString
          type: string
          description: ''
        - id: storageAccessKey
          type: string
          description: ''
        - id: host
          type: string | <xref uid="azure-storage.azurestorage.StorageHost" />
          description: ''
        - id: sasToken
          type: string
          description: ''
        - id: endpointSuffix
          type: string
          description: ''
properties:
  - name: messageEncoder
    uid: azure-storage.azurestorage.services.queue.QueueService.messageEncoder
    package: azure-storage
    summary: '{boolean} QueueService#queueMessagEncoder'
    fullName: messageEncoder
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'messageEncoder: QueueMessageEncoder'
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.services.queue.QueueMessageEncoder" />
inheritedProperties:
  - name: defaultClientRequestTimeoutInMs
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.defaultClientRequestTimeoutInMs
    package: azure-storage
    summary: >-
      The default timeout of client requests, in milliseconds, to use for the
      request.
    fullName: defaultClientRequestTimeoutInMs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultClientRequestTimeoutInMs: number'
      return:
        description: ''
        type: number
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.defaultClientRequestTimeoutInMs](xref:StorageServiceClient.defaultClientRequestTimeoutInMs)
  - name: defaultLocationMode
    uid: azure-storage.azurestorage.services.queue.QueueService.defaultLocationMode
    package: azure-storage
    summary: The default location mode for requests made via the service.
    fullName: defaultLocationMode
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultLocationMode: LocationMode'
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.util.storageutilities.LocationMode"
          />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.defaultLocationMode](xref:StorageServiceClient.defaultLocationMode)
  - name: defaultMaximumExecutionTimeInMs
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.defaultMaximumExecutionTimeInMs
    package: azure-storage
    summary: >-
      The default maximum execution time across all potential retries, for
      requests made via the service.
    fullName: defaultMaximumExecutionTimeInMs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultMaximumExecutionTimeInMs: number'
      return:
        description: ''
        type: number
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.defaultMaximumExecutionTimeInMs](xref:StorageServiceClient.defaultMaximumExecutionTimeInMs)
  - name: defaultTimeoutIntervalInMs
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.defaultTimeoutIntervalInMs
    package: azure-storage
    summary: >-
      The default timeout interval, in milliseconds, to use for request made via
      the service.
    fullName: defaultTimeoutIntervalInMs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultTimeoutIntervalInMs: number'
      return:
        description: ''
        type: number
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.defaultTimeoutIntervalInMs](xref:StorageServiceClient.defaultTimeoutIntervalInMs)
  - name: enableGlobalHttpAgent
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.enableGlobalHttpAgent
    package: azure-storage
    summary: >-
      Determines whether global HTTP(s) agent is enabled; true to use Global
      HTTP(s) agent; otherwise, false to use

      http(s).Agent({keepAlive:true}).
    fullName: enableGlobalHttpAgent
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enableGlobalHttpAgent: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.enableGlobalHttpAgent](xref:StorageServiceClient.enableGlobalHttpAgent)
  - name: host
    uid: azure-storage.azurestorage.services.queue.QueueService.host
    package: azure-storage
    summary: The host information for the service.
    fullName: host
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'host: StorageHost'
      return:
        description: ''
        type: <xref uid="azure-storage.azurestorage.StorageHost" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.host](xref:StorageServiceClient.host)
  - name: logger
    uid: azure-storage.azurestorage.services.queue.QueueService.logger
    package: azure-storage
    summary: The logging settings object.
    fullName: logger
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'logger: Logger'
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.diagnostics.logger.Logger" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.logger](xref:StorageServiceClient.logger)
  - name: proxy
    uid: azure-storage.azurestorage.services.queue.QueueService.proxy
    package: azure-storage
    summary: The proxy object specified by caller.
    fullName: proxy
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'proxy: Proxy'
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.services.storageserviceclient.Proxy"
          />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.proxy](xref:StorageServiceClient.proxy)
  - name: useNagleAlgorithm
    uid: azure-storage.azurestorage.services.queue.QueueService.useNagleAlgorithm
    package: azure-storage
    summary: >-
      Determines whether the Nagle algorithm is used for requests made via the
      Queue service; true to use the

      Nagle algorithm; otherwise, false. The default value is false.
    fullName: useNagleAlgorithm
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'useNagleAlgorithm: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.useNagleAlgorithm](xref:StorageServiceClient.useNagleAlgorithm)
inheritedMethods:
  - name: 'addListener(string | symbol, (args: any[]) => void)'
    uid: azure-storage.azurestorage.services.queue.QueueService.addListener
    package: azure-storage
    summary: 'Alias for `emitter.on(eventName, listener)`.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addListener(eventName: string | symbol, listener: (args: any[])
        => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.addListener
  - name: 'emit(string | symbol, any[])'
    uid: azure-storage.azurestorage.services.queue.QueueService.emit
    package: azure-storage
    summary: >-
      Synchronously calls each of the listeners registered for the event
      named`eventName`, in the order they were registered, passing the supplied
      arguments

      to each.

      Returns `true` if the event had listeners, `false` otherwise.


      ```js

      const EventEmitter = require('events');

      const myEmitter = new EventEmitter();


      // First listener

      myEmitter.on('event', function firstListener() {
        console.log('Helloooo! first listener');
      });

      // Second listener

      myEmitter.on('event', function secondListener(arg1, arg2) {
        console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
      });

      // Third listener

      myEmitter.on('event', function thirdListener(...args) {
        const parameters = args.join(', ');
        console.log(`event with parameters ${parameters} in third listener`);
      });


      console.log(myEmitter.listeners('event'));


      myEmitter.emit('event', 1, 2, 3, 4, 5);


      // Prints:

      // [

      //   [Function: firstListener],

      //   [Function: secondListener],

      //   [Function: thirdListener]

      // ]

      // Helloooo! first listener

      // event with parameters 1, 2 in second listener

      // event with parameters 1, 2, 3, 4, 5 in third listener

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(eventName: string | symbol, args: any[]): boolean'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: args
          type: 'any[]'
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> EventEmitter.emit
  - name: eventNames()
    uid: azure-storage.azurestorage.services.queue.QueueService.eventNames
    package: azure-storage
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.
      ```js
      const EventEmitter = require('events');
      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function eventNames(): Array<string | symbol>'
      return:
        description: ''
        type: Array&lt;string | symbol&gt;
    inheritanceDescription: <b>Inherited From</b> EventEmitter.eventNames
  - name: getMaxListeners()
    uid: azure-storage.azurestorage.services.queue.QueueService.getMaxListeners
    package: azure-storage
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      <xref:defaultMaxListeners>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getMaxListeners(): number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.getMaxListeners
  - name: listenerCount(string | symbol)
    uid: azure-storage.azurestorage.services.queue.QueueService.listenerCount
    package: azure-storage
    summary: Returns the number of listeners listening to the event named `eventName`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listenerCount(eventName: string | symbol): number'
      parameters:
        - id: eventName
          type: string | symbol
          description: |
            The name of the event being listened for
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listenerCount
  - name: listeners(string | symbol)
    uid: azure-storage.azurestorage.services.queue.QueueService.listeners
    package: azure-storage
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.
      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listeners(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: 'Function[]'
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listeners
  - name: 'off(string | symbol, (args: any[]) => void)'
    uid: azure-storage.azurestorage.services.queue.QueueService.off
    package: azure-storage
    summary: Alias for `emitter.removeListener()`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(eventName: string | symbol, listener: (args: any[]) =>
        void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.off
  - name: 'on(string | symbol, (args: any[]) => void)'
    uid: azure-storage.azurestorage.services.queue.QueueService.on
    package: azure-storage
    summary: >-
      Adds the `listener` function to the end of the listeners array for the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.

      ```js

      server.on('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependListener()` method can be used as an alternative to add
      the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.on('foo', () => console.log('a'));

      myEE.prependListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function on(eventName: string | symbol, listener: (args: any[]) =>
        void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.on
  - name: 'once(string | symbol, (args: any[]) => void)'
    uid: azure-storage.azurestorage.services.queue.QueueService.once
    package: azure-storage
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName`.
      The

      next time `eventName` is triggered, this listener is removed and then
      invoked.

      ```js

      server.once('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependOnceListener()` method can be used as an alternative to
      add the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.once('foo', () => console.log('a'));

      myEE.prependOnceListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function once(eventName: string | symbol, listener: (args: any[]) =>
        void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.once
  - name: 'prependListener(string | symbol, (args: any[]) => void)'
    uid: azure-storage.azurestorage.services.queue.QueueService.prependListener
    package: azure-storage
    summary: >-
      Adds the `listener` function to the _beginning_ of the listeners array for
      the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.

      ```js

      server.prependListener('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependListener(eventName: string | symbol, listener: (args:
        any[]) => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.prependListener
  - name: 'prependOnceListener(string | symbol, (args: any[]) => void)'
    uid: azure-storage.azurestorage.services.queue.QueueService.prependOnceListener
    package: azure-storage
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName` to
      the _beginning_ of the listeners array. The next time `eventName` is
      triggered, this

      listener is removed, and then invoked.

      ```js

      server.prependOnceListener('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener(eventName: string | symbol, listener:
        (args: any[]) => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.prependOnceListener
  - name: rawListeners(string | symbol)
    uid: azure-storage.azurestorage.services.queue.QueueService.rawListeners
    package: azure-storage
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).
      ```js
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function rawListeners(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: 'Function[]'
    inheritanceDescription: <b>Inherited From</b> EventEmitter.rawListeners
  - name: removeAllListeners(string | symbol)
    uid: azure-storage.azurestorage.services.queue.QueueService.removeAllListeners
    package: azure-storage
    summary: |-
      Removes all listeners, or those of the specified `eventName`.
      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(event?: string | symbol): this'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.removeAllListeners
  - name: 'removeListener(string | symbol, (args: any[]) => void)'
    uid: azure-storage.azurestorage.services.queue.QueueService.removeListener
    package: azure-storage
    summary: >-
      Removes the specified `listener` from the listener array for the event
      named`eventName`.

      ```js

      const callback = (stream) => {
        console.log('someone connected!');
      };

      server.on('connection', callback);

      // ...

      server.removeListener('connection', callback);

      ```


      `removeListener()` will remove, at most, one instance of a listener from
      the

      listener array. If any single listener has been added multiple times to
      the

      listener array for the specified `eventName`, then `removeListener()` must
      be

      called multiple times to remove each instance.


      Once an event is emitted, all listeners attached to it at the

      time of emitting are called in order. This implies that
      any`removeListener()` or `removeAllListeners()` calls _after_ emitting and
      _before_ the last listener finishes execution

      will not remove them from`emit()` in progress. Subsequent events behave as
      expected.


      ```js

      const myEmitter = new MyEmitter();


      const callbackA = () => {
        console.log('A');
        myEmitter.removeListener('event', callbackB);
      };


      const callbackB = () => {
        console.log('B');
      };


      myEmitter.on('event', callbackA);


      myEmitter.on('event', callbackB);


      // callbackA removes listener callbackB but it will still be called.

      // Internal listener array at time of emit [callbackA, callbackB]

      myEmitter.emit('event');

      // Prints:

      //   A

      //   B


      // callbackB is now removed.

      // Internal listener array [callbackA]

      myEmitter.emit('event');

      // Prints:

      //   A

      ```


      Because listeners are managed using an internal array, calling this will

      change the position indices of any listener registered _after_ the
      listener

      being removed. This will not impact the order in which listeners are
      called,

      but it means that any copies of the listener array as returned by

      the `emitter.listeners()` method will need to be recreated.


      When a single function has been added as a handler multiple times for a
      single

      event (as in the example below), `removeListener()` will remove the most

      recently added instance. In the example the `once('ping')`listener is
      removed:


      ```js

      const ee = new EventEmitter();


      function pong() {
        console.log('pong');
      }


      ee.on('ping', pong);

      ee.once('ping', pong);

      ee.removeListener('ping', pong);


      ee.emit('ping');

      ee.emit('ping');

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function removeListener(eventName: string | symbol, listener: (args:
        any[]) => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.removeListener
  - name: setMaxListeners(number)
    uid: azure-storage.azurestorage.services.queue.QueueService.setMaxListeners
    package: azure-storage
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to`Infinity` (or `0`) to indicate an unlimited number of listeners.

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number): this'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.setMaxListeners
  - name: setProxy(Proxy)
    uid: azure-storage.azurestorage.services.queue.QueueService.setProxy
    package: azure-storage
    summary: Sets proxy object specified by caller.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setProxy(proxy: Proxy)'
      parameters:
        - id: proxy
          type: >-
            <xref
            uid="azure-storage.azurestorage.common.services.storageserviceclient.Proxy"
            />
          description: |
            proxy to use for tunneling
                                                   {
                                                    host: hostname
                                                    port: port number
                                                    proxyAuth: 'user:password' for basic auth
                                                    headers: {...} headers for proxy server
                                                    key: key for proxy server
                                                    ca: ca for proxy server
                                                    cert: cert for proxy server
                                                   }
                                                   if null or undefined, clears proxy
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageServiceClient.setProxy](xref:StorageServiceClient.setProxy)
methods:
  - name: 'clearMessages(string, ErrorOrResponse)'
    uid: azure-storage.azurestorage.services.queue.QueueService.clearMessages_1
    package: azure-storage
    summary: Clears all messages from the queue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function clearMessages(queue: string, callback: ErrorOrResponse)'
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise
                                                                                    `response` will contain information related to this operation.
  - name: 'clearMessages(string, RequestOptions, ErrorOrResponse)'
    uid: azure-storage.azurestorage.services.queue.QueueService.clearMessages
    package: azure-storage
    summary: Clears all messages from the queue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function clearMessages(queue: string, options: RequestOptions, callback:
        ErrorOrResponse)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise
                                                                                    `response` will contain information related to this operation.
  - name: >-
      createMessage(string, string | Buffer, CreateMessageRequestOptions,
      ErrorOrResult<QueueMessageResult>)
    uid: azure-storage.azurestorage.services.queue.QueueService.createMessage
    package: azure-storage
    summary: >+
      Adds a new message to the back of the message queue.

      The encoded message can be up to 64KB in size for versions 2011-08-18 and
      newer, or 8KB in size for previous versions.

      Unencoded messages must be in a format that can be included in an XML
      request with UTF-8 encoding.

      Queue messages are encoded by default. See queueService.messageEncoder to
      set encoding defaults.


      **Example**


      var azure = require('azure-storage');

      var queueService = azure.createQueueService();

      queueService.createMessage('taskqueue', 'Hello world!', function(error) {
        if(!error) {
          // Message inserted
        }
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createMessage(queue: string, messageText: string | Buffer,
        options: CreateMessageRequestOptions, callback?:
        ErrorOrResult<QueueMessageResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: messageText
          type: string | Buffer
          description: The message text.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.queue.QueueService.CreateMessageRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `[result](xref:QueueMessageResult)` will contain
                                                                                    the message.
                                                                                    `response` will contain information related to this operation.
  - name: 'createMessage(string, string | Buffer, ErrorOrResult<QueueMessageResult>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.createMessage_1
    package: azure-storage
    summary: >+
      Adds a new message to the back of the message queue.

      The encoded message can be up to 64KB in size for versions 2011-08-18 and
      newer, or 8KB in size for previous versions.

      Unencoded messages must be in a format that can be included in an XML
      request with UTF-8 encoding.

      Queue messages are encoded by default. See queueService.messageEncoder to
      set encoding defaults.


      **Example**


      var azure = require('azure-storage');

      var queueService = azure.createQueueService();

      queueService.createMessage('taskqueue', 'Hello world!', function(error) {
        if(!error) {
          // Message inserted
        }
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createMessage(queue: string, messageText: string | Buffer,
        callback?: ErrorOrResult<QueueMessageResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: messageText
          type: string | Buffer
          description: The message text.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `response` will contain information related to this operation.
  - name: 'createQueue(string, CreateQueueRequestOptions, ErrorOrResult<QueueResult>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.createQueue
    package: azure-storage
    summary: Creates a new queue under the given account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createQueue(queue: string, optionsOrCallback:
        CreateQueueRequestOptions, callback?: ErrorOrResult<QueueResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: optionsOrCallback
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.queue.QueueService.CreateQueueRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the queue information.
                                                                                    `response` will contain information related to this operation.
  - name: 'createQueue(string, ErrorOrResult<QueueResult>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.createQueue_1
    package: azure-storage
    summary: Creates a new queue under the given account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createQueue(queue: string, callback?:
        ErrorOrResult<QueueResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the queue information.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      createQueueIfNotExists(string, CreateQueueRequestOptions,
      ErrorOrResult<QueueResult>)
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.createQueueIfNotExists
    package: azure-storage
    summary: |+
      Creates a new queue under the given account if it doesn't exist.

      **Example**

      var azure = require('azure-storage');
      var queueService = azure.createQueueService();
      queueService.createQueueIfNotExists('taskqueue', function(error) {
        if(!error) {
          // Queue created or exists
        }
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createQueueIfNotExists(queue: string, optionsOrCallback:
        CreateQueueRequestOptions, callback?: ErrorOrResult<QueueResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: optionsOrCallback
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.queue.QueueService.CreateQueueRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will be true if the
                                                                                    queue was created by this operation and false if not, and
                                                                                    `response` will contain information related to this operation.
  - name: 'createQueueIfNotExists(string, ErrorOrResult<QueueResult>)'
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.createQueueIfNotExists_1
    package: azure-storage
    summary: |+
      Creates a new queue under the given account if it doesn't exist.

      **Example**

      var azure = require('azure-storage');
      var queueService = azure.createQueueService();
      queueService.createQueueIfNotExists('taskqueue', function(error) {
        if(!error) {
          // Queue created or exists
        }
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createQueueIfNotExists(queue: string, callback?:
        ErrorOrResult<QueueResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will be true if the
                                                                                    queue was created by this operation and false if not, and
                                                                                    `response` will contain information related to this operation.
  - name: 'deleteMessage(string, string, string, ErrorOrResponse)'
    uid: azure-storage.azurestorage.services.queue.QueueService.deleteMessage_1
    package: azure-storage
    summary: Deletes a specified message from the queue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMessage(queue: string, messageId: string, popReceipt:
        string, callback: ErrorOrResponse)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: messageId
          type: string
          description: The message identifier of the message to delete.
        - id: popReceipt
          type: string
          description: >-
            A valid pop receipt value returned from an earlier call to the Get
            Messages or Update Message operation
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information if an error occurs;
                                                                                    `response` will contain information related to this operation.
  - name: 'deleteMessage(string, string, string, RequestOptions, ErrorOrResponse)'
    uid: azure-storage.azurestorage.services.queue.QueueService.deleteMessage
    package: azure-storage
    summary: Deletes a specified message from the queue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMessage(queue: string, messageId: string, popReceipt:
        string, options: RequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: messageId
          type: string
          description: The message identifier of the message to delete.
        - id: popReceipt
          type: string
          description: >-
            A valid pop receipt value returned from an earlier call to the Get
            Messages or Update Message operation
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information if an error occurs;
                                                                                    `response` will contain information related to this operation.
  - name: 'deleteQueue(string, ErrorOrResponse)'
    uid: azure-storage.azurestorage.services.queue.QueueService.deleteQueue_1
    package: azure-storage
    summary: Permanently deletes the specified queue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteQueue(queue: string, callback: ErrorOrResponse)'
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information if an error occurs;
                                                                                    `response` will contain information related to this operation.
  - name: 'deleteQueue(string, RequestOptions, ErrorOrResponse)'
    uid: azure-storage.azurestorage.services.queue.QueueService.deleteQueue
    package: azure-storage
    summary: Permanently deletes the specified queue.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteQueue(queue: string, options: RequestOptions, callback:
        ErrorOrResponse)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information if an error occurs;
                                                                                    `response` will contain information related to this operation.
  - name: 'deleteQueueIfExists(string, ErrorOrResult<boolean>)'
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.deleteQueueIfExists_1
    package: azure-storage
    summary: Permanently deletes the specified queue if it exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteQueueIfExists(queue: string, callback:
        ErrorOrResult<boolean>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult"
            />&lt;boolean&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    'true' if the queue was deleted and 'false' if the queue did not exist.
                                                                                    `response` will contain information related to this operation.
  - name: 'deleteQueueIfExists(string, RequestOptions, ErrorOrResult<boolean>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.deleteQueueIfExists
    package: azure-storage
    summary: Permanently deletes the specified queue if it exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteQueueIfExists(queue: string, options: RequestOptions,
        callback: ErrorOrResult<boolean>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult"
            />&lt;boolean&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    'true' if the queue was deleted and 'false' if the queue did not exist.
                                                                                    `response` will contain information related to this operation.
  - name: 'doesQueueExist(string, ErrorOrResult<QueueResult>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.doesQueueExist_1
    package: azure-storage
    summary: Checks to see if a queue exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function doesQueueExist(queue: string, callback?:
        ErrorOrResult<QueueResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise, `result`
                                                                                    will be true if the queue exists and false if not,
                                                                                    and `response` will contain information related to this operation.
  - name: 'doesQueueExist(string, RequestOptions, ErrorOrResult<QueueResult>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.doesQueueExist
    package: azure-storage
    summary: Checks to see if a queue exists.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function doesQueueExist(queue: string, options: RequestOptions,
        callback?: ErrorOrResult<QueueResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise, `result`
                                                                                    will be true if the queue exists and false if not,
                                                                                    and `response` will contain information related to this operation.
  - name: 'generateSharedAccessSignature(string, SharedAccessPolicy)'
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.generateSharedAccessSignature
    package: azure-storage
    summary: Retrieves a shared access signature token.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function generateSharedAccessSignature(queue: string,
        sharedAccessPolicy: SharedAccessPolicy): string
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: sharedAccessPolicy
          type: <xref uid="azure-storage.azurestorage.common.SharedAccessPolicy" />
          description: The shared access policy.
      return:
        description: >-
          The shared access signature query string. Note this string does not
          contain the leading "?".
        type: string
  - name: >-
      generateSharedAccessSignatureWithVersion(string, SharedAccessPolicy,
      string)
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.generateSharedAccessSignatureWithVersion
    package: azure-storage
    summary: Retrieves a shared access signature token.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function generateSharedAccessSignatureWithVersion(queue: string,
        sharedAccessPolicy: SharedAccessPolicy, sasVersion: string): string
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: sharedAccessPolicy
          type: <xref uid="azure-storage.azurestorage.common.SharedAccessPolicy" />
          description: The shared access policy.
        - id: sasVersion
          type: string
          description: ''
      return:
        description: >-
          The shared access signature query string. Note this string does not
          contain the leading "?".
        type: string
  - name: 'getMessage(string, ErrorOrResult<QueueMessageResult>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.getMessage_1
    package: azure-storage
    summary: >+
      Retrieves a message from the queue and makes it invisible to other
      consumers.


      **Example**


      var azure = require('azure-storage');

      var queueService = azure.createQueueService();

      var queueName = 'taskqueue';

      queueService.getMessage(queueName, function(error, serverMessages) {
        if(!error) {
          // Process the message in less than 30 seconds, the message
          // text is available in serverMessages.messagetext
          queueService.deleteMessage(queueName, serverMessages.messageId, serverMessages.popReceipt, function(error) {
            if(!error){
                // Message deleted
            }
          });
        }
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getMessage(queue: string, callback?:
        ErrorOrResult<QueueMessageResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the message.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      getMessage(string, GetMessageRequestOptions,
      ErrorOrResult<QueueMessageResult>)
    uid: azure-storage.azurestorage.services.queue.QueueService.getMessage
    package: azure-storage
    summary: >+
      Retrieves a message from the queue and makes it invisible to other
      consumers.


      **Example**


      var azure = require('azure-storage');

      var queueService = azure.createQueueService();

      var queueName = 'taskqueue';

      queueService.getMessage(queueName, function(error, serverMessage) {
        if(!error) {
          // Process the message in less than 30 seconds, the message
          // text is available in serverMessage.messagetext
          queueService.deleteMessage(queueName, serverMessage.messageId, serverMessage.popReceipt, function(error) {
            if(!error){
                // Message deleted
            }
          });
        }
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getMessage(queue: string, options: GetMessageRequestOptions,
        callback?: ErrorOrResult<QueueMessageResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.queue.QueueService.GetMessageRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the message.
                                                                                    `response` will contain information related to this operation.
  - name: 'getMessages(string, ErrorOrResult<QueueMessageResult[]>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.getMessages_1
    package: azure-storage
    summary: >+
      Retrieves messages from the queue and makes them invisible to other
      consumers.


      **Example**


      var azure = require('azure-storage');

      var queueService = azure.createQueueService();

      var queueName = 'taskqueue';

      queueService.getMessages(queueName, function(error, serverMessages) {
        if(!error) {
          // Process the message in less than 30 seconds, the message
          // text is available in serverMessages[0].messagetext
          queueService.deleteMessage(queueName, serverMessages[0].messageId, serverMessages[0].popReceipt, function(error) {
            if(!error){
                // Message deleted
            }
          });
        }
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getMessages(queue: string, callback?:
        ErrorOrResult<QueueMessageResult[]>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult"
            />[]&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the messages.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      getMessages(string, GetMessagesRequestOptions,
      ErrorOrResult<QueueMessageResult[]>)
    uid: azure-storage.azurestorage.services.queue.QueueService.getMessages
    package: azure-storage
    summary: >+
      Retrieves messages from the queue and makes them invisible to other
      consumers.


      **Example**


      var azure = require('azure-storage');

      var queueService = azure.createQueueService();

      var queueName = 'taskqueue';

      queueService.getMessages(queueName, function(error, serverMessages) {
        if(!error) {
          // Process the message in less than 30 seconds, the message
          // text is available in serverMessages[0].messagetext
          queueService.deleteMessage(queueName, serverMessages[0].messageId, serverMessages[0].popReceipt, function(error) {
            if(!error){
                // Message deleted
            }
          });
        }
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getMessages(queue: string, options: GetMessagesRequestOptions,
        callback?: ErrorOrResult<QueueMessageResult[]>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.queue.QueueService.GetMessagesRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult"
            />[]&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the messages.
                                                                                    `response` will contain information related to this operation.
  - name: 'getQueueAcl(string, ErrorOrResult<QueueResult>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.getQueueAcl_1
    package: azure-storage
    summary: Gets the queue's ACL.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getQueueAcl(queue: string, callback:
        ErrorOrResult<QueueResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information for the queue.
                                                                                    `response` will contain information related to this operation.
  - name: 'getQueueAcl(string, RequestOptions, ErrorOrResult<QueueResult>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.getQueueAcl
    package: azure-storage
    summary: Gets the queue's ACL.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getQueueAcl(queue: string, options: RequestOptions, callback:
        ErrorOrResult<QueueResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information for the queue.
                                                                                    `response` will contain information related to this operation.
  - name: 'getQueueMetadata(string, ErrorOrResult<QueueResult>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.getQueueMetadata_1
    package: azure-storage
    summary: 'Returns queue properties, including user-defined metadata.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getQueueMetadata(queue: string, callback:
        ErrorOrResult<QueueResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the queue information.
                                                                                    `response` will contain information related to this operation.
  - name: 'getQueueMetadata(string, RequestOptions, ErrorOrResult<QueueResult>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.getQueueMetadata
    package: azure-storage
    summary: 'Returns queue properties, including user-defined metadata.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getQueueMetadata(queue: string, options: RequestOptions,
        callback: ErrorOrResult<QueueResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the queue information.
                                                                                    `response` will contain information related to this operation.
  - name: getServiceProperties(ErrorOrResult<ServiceProperties>)
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.getServiceProperties_1
    package: azure-storage
    summary: >-
      Gets the properties of a storage account’s Queue service, including
      Microsoft Azure Storage Analytics.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getServiceProperties(callback?:
        ErrorOrResult<ServiceProperties>)
      parameters:
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.common.models.ServicePropertiesResult.ServiceProperties"
            />&gt;
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise, `errorOrResult`
                                                                                  will contain the properties and `response`
                                                                                  will contain information related to this operation.
  - name: 'getServiceProperties(RequestOptions, ErrorOrResult<ServiceProperties>)'
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.getServiceProperties
    package: azure-storage
    summary: >-
      Gets the properties of a storage account’s Queue service, including
      Microsoft Azure Storage Analytics.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getServiceProperties(options: RequestOptions, callback?:
        ErrorOrResult<ServiceProperties>)
      parameters:
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.common.models.ServicePropertiesResult.ServiceProperties"
            />&gt;
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise, `errorOrResult`
                                                                                  will contain the properties and `response`
                                                                                  will contain information related to this operation.
  - name: getServiceStats(ErrorOrResult<ServiceStats>)
    uid: azure-storage.azurestorage.services.queue.QueueService.getServiceStats_1
    package: azure-storage
    summary: Gets the service stats for a storage account’s Queue service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getServiceStats(callback: ErrorOrResult<ServiceStats>)'
      parameters:
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.common.models.ServiceStats" />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise, `result`
                                                                                    will contain the stats and `response`
                                                                                    will contain information related to this operation.
  - name: 'getServiceStats(RequestOptions, ErrorOrResult<ServiceStats>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.getServiceStats
    package: azure-storage
    summary: Gets the service stats for a storage account’s Queue service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getServiceStats(options: RequestOptions, callback:
        ErrorOrResult<ServiceStats>)
      parameters:
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.common.models.ServiceStats" />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise, `result`
                                                                                    will contain the stats and `response`
                                                                                    will contain information related to this operation.
  - name: 'getUrl(string, string, boolean)'
    uid: azure-storage.azurestorage.services.queue.QueueService.getUrl
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getUrl(queue: string, sasToken?: string, primary?: boolean):
        string
      parameters:
        - id: queue
          type: string
          description: ''
        - id: sasToken
          type: string
          description: ''
        - id: primary
          type: boolean
          description: ''
      return:
        description: ''
        type: string
  - name: 'listQueuesSegmented(ContinuationToken, ErrorOrResult<ListQueueResult>)'
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.listQueuesSegmented_1
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of queue items whose names begin
      with the specified prefix under the given account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listQueuesSegmented(currentToken: ContinuationToken, callback:
        ErrorOrResult<ListQueueResult>)
      parameters:
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.ListQueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                                    `entries`  gives a list of queues and the `continuationToken` is used for the next listing operation.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      listQueuesSegmented(ContinuationToken, ListQueuesRequestOptions,
      ErrorOrResult<ListQueueResult>)
    uid: azure-storage.azurestorage.services.queue.QueueService.listQueuesSegmented
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of queue items whose names begin
      with the specified prefix under the given account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listQueuesSegmented(currentToken: ContinuationToken, options:
        ListQueuesRequestOptions, callback: ErrorOrResult<ListQueueResult>)
      parameters:
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.queue.QueueService.ListQueuesRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.ListQueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                                    `entries`  gives a list of queues and the `continuationToken` is used for the next listing operation.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      listQueuesSegmentedWithPrefix(string, ContinuationToken,
      ErrorOrResult<ListQueueResult>)
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.listQueuesSegmentedWithPrefix_1
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of queue items under the given
      account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listQueuesSegmentedWithPrefix(prefix: string, currentToken:
        ContinuationToken, callback: ErrorOrResult<ListQueueResult>)
      parameters:
        - id: prefix
          type: string
          description: The prefix of the queue name.
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.*
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.ListQueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                                    `entries`  gives a list of queues and the `continuationToken` is used for the next listing operation.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      listQueuesSegmentedWithPrefix(string, ContinuationToken,
      ListQueuesRequestOptions, ErrorOrResult<ListQueueResult>)
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.listQueuesSegmentedWithPrefix
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of queue items under the given
      account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listQueuesSegmentedWithPrefix(prefix: string, currentToken:
        ContinuationToken, options: ListQueuesRequestOptions, callback:
        ErrorOrResult<ListQueueResult>)
      parameters:
        - id: prefix
          type: string
          description: The prefix of the queue name.
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.*
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.queue.QueueService.ListQueuesRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.ListQueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                                    `entries`  gives a list of queues and the `continuationToken` is used for the next listing operation.
                                                                                    `response` will contain information related to this operation.
  - name: 'peekMessage(string, ErrorOrResult<QueueMessageResult>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.peekMessage_1
    package: azure-storage
    summary: >-
      Retrieves a message from the front of the queue, without changing the
      message visibility.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function peekMessage(queue: string, callback?:
        ErrorOrResult<QueueMessageResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the message.
                                                                                    `response` will contain information related to this operation.
  - name: 'peekMessage(string, RequestOptions, ErrorOrResult<QueueMessageResult>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.peekMessage
    package: azure-storage
    summary: >-
      Retrieves a message from the front of the queue, without changing the
      message visibility.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function peekMessage(queue: string, options: RequestOptions, callback?:
        ErrorOrResult<QueueMessageResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the message.
                                                                                    `response` will contain information related to this operation.
  - name: 'peekMessages(string, ErrorOrResult<QueueMessageResult[]>)'
    uid: azure-storage.azurestorage.services.queue.QueueService.peekMessages_1
    package: azure-storage
    summary: >-
      Retrieves messages from the front of the queue, without changing the
      messages visibility.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function peekMessages(queue: string, callback?:
        ErrorOrResult<QueueMessageResult[]>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult"
            />[]&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the messages.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      peekMessages(string, PeekMessagesRequestOptions,
      ErrorOrResult<QueueMessageResult[]>)
    uid: azure-storage.azurestorage.services.queue.QueueService.peekMessages
    package: azure-storage
    summary: >-
      Retrieves messages from the front of the queue, without changing the
      messages visibility.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function peekMessages(queue: string, options:
        PeekMessagesRequestOptions, callback?:
        ErrorOrResult<QueueMessageResult[]>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.queue.QueueService.PeekMessagesRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult"
            />[]&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the messages.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      setQueueAcl(string, [key: string]: AccessPolicy,
      ErrorOrResult<QueueResult>)
    uid: azure-storage.azurestorage.services.queue.QueueService.setQueueAcl_1
    package: azure-storage
    summary: >+
      Updates the queue's ACL.


      **Example**


      var azure = require('azure-storage');

      var SharedAccessPermissions =
      azure.QueueUtilities.SharedAccessPermissions;

      var queueService = azure.createQueueService();

      var sharedAccessPolicy = [

      {AccessPolicy: {
          Permissions: PROCESS,
          Start: startDate,
          Expiry: expiryDate
        },
        Id: processOnly,
      },

      {AccessPolicy: {
          Permissions: SharedAccessPermissions.PROCESS + SharedAccessPermissions.DELETE,
          Start: startDate,
          Expiry: expiryDate
        },
        Id: processAndDelete,
      }];


      queueService.setQueueAcl(queueName, sharedAccessPolicy, function(error,
      queueResult, response) {
          // do whatever
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setQueueAcl(queue: string, signedIdentifiers: [key: string]:
        AccessPolicy, callback?: ErrorOrResult<QueueResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: signedIdentifiers
          type: >-
            [key: string]\: <xref
            uid="azure-storage.azurestorage.common.AccessPolicy" />
          description: The signed identifiers. Signed identifiers must be in an array.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueResult"
            />&gt;
          description: |-
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information for the queue.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      setQueueAcl(string, [key: string]: AccessPolicy, RequestOptions,
      ErrorOrResult<QueueResult>)
    uid: azure-storage.azurestorage.services.queue.QueueService.setQueueAcl
    package: azure-storage
    summary: >+
      Updates the queue's ACL.


      **Example**


      var azure = require('azure-storage');

      var SharedAccessPermissions =
      azure.QueueUtilities.SharedAccessPermissions;

      var queueService = azure.createQueueService();

      var sharedAccessPolicy = [

      {AccessPolicy: {
          Permissions: PROCESS,
          Start: startDate,
          Expiry: expiryDate
        },
        Id: processOnly,
      },

      {AccessPolicy: {
          Permissions: SharedAccessPermissions.PROCESS + SharedAccessPermissions.DELETE,
          Start: startDate,
          Expiry: expiryDate
        },
        Id: processAndDelete,
      }];


      queueService.setQueueAcl(queueName, sharedAccessPolicy, function(error,
      queueResult, response) {
          // do whatever
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setQueueAcl(queue: string, signedIdentifiers: [key: string]:
        AccessPolicy, options: RequestOptions, callback?:
        ErrorOrResult<QueueResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: signedIdentifiers
          type: >-
            [key: string]\: <xref
            uid="azure-storage.azurestorage.common.AccessPolicy" />
          description: The signed identifiers. Signed identifiers must be in an array.
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueResult"
            />&gt;
          description: |-
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information for the queue.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      setQueueMetadata(string, [key: string]: string,
      ErrorOrResult<QueueResult>)
    uid: azure-storage.azurestorage.services.queue.QueueService.setQueueMetadata_1
    package: azure-storage
    summary: >-
      Sets user-defined metadata on the specified queue. Metadata is associated
      with the queue as name-value pairs.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setQueueMetadata(queue: string, metadata: [key: string]:
        string, callback: ErrorOrResult<QueueResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: metadata
          type: '[key: string]\: string'
          description: The metadata key/value pairs.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the queue information.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      setQueueMetadata(string, [key: string]: string, RequestOptions,
      ErrorOrResult<QueueResult>)
    uid: azure-storage.azurestorage.services.queue.QueueService.setQueueMetadata
    package: azure-storage
    summary: >-
      Sets user-defined metadata on the specified queue. Metadata is associated
      with the queue as name-value pairs.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setQueueMetadata(queue: string, metadata: [key: string]:
        string, options: RequestOptions, callback: ErrorOrResult<QueueResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: metadata
          type: '[key: string]\: string'
          description: The metadata key/value pairs.
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the queue information.
                                                                                    `response` will contain information related to this operation.
  - name: 'setServiceProperties(ServiceProperties, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.setServiceProperties_1
    package: azure-storage
    summary: >-
      Sets the properties of a storage account’s Queue service, including
      Microsoft Azure Storage Analytics.

      You can also use this operation to set the default request version for all
      incoming requests that do not have a version specified.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setServiceProperties(serviceProperties: ServiceProperties,
        callback?: ErrorOrResponse)
      parameters:
        - id: serviceProperties
          type: >-
            <xref
            uid="azure-storage.azurestorage.common.models.ServicePropertiesResult.ServiceProperties"
            />
          description: The service properties.
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                                 if an error occurs; otherwise, `response`
                                                                                 will contain information related to this operation.
  - name: 'setServiceProperties(ServiceProperties, RequestOptions, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.queue.QueueService.setServiceProperties
    package: azure-storage
    summary: >-
      Sets the properties of a storage account’s Queue service, including
      Microsoft Azure Storage Analytics.

      You can also use this operation to set the default request version for all
      incoming requests that do not have a version specified.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setServiceProperties(serviceProperties: ServiceProperties,
        options: RequestOptions, callback?: ErrorOrResponse)
      parameters:
        - id: serviceProperties
          type: >-
            <xref
            uid="azure-storage.azurestorage.common.models.ServicePropertiesResult.ServiceProperties"
            />
          description: The service properties.
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                                 if an error occurs; otherwise, `response`
                                                                                 will contain information related to this operation.
  - name: >-
      updateMessage(string, string, string, number,
      ErrorOrResult<QueueMessageResult>)
    uid: azure-storage.azurestorage.services.queue.QueueService.updateMessage_1
    package: azure-storage
    summary: >-
      Updates the visibility timeout of a message. You can also use this
      operation to update the contents of a message.

      A message must be in a format that can be included in an XML request with
      UTF-8 encoding, and the encoded message can be up to 64KB in size.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateMessage(queue: string, messageId: string, popReceipt:
        string, visibilityTimeout: number, callback?:
        ErrorOrResult<QueueMessageResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: messageId
          type: string
          description: The message identifier of the message to update.
        - id: popReceipt
          type: string
          description: >-
            A valid pop receipt value returned from an earlier call to the Get
            Messages or Update Message operation
        - id: visibilityTimeout
          type: number
          description: >-
            Specifies the new visibility timeout value, in seconds, relative to
            server time. The new value must be larger than or equal to 0, and
            cannot be larger than 7 days. The visibility timeout of a message
            can be set to a value later than the expiry time.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the message result information.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      updateMessage(string, string, string, number, UpdateMessageRequestOptions,
      ErrorOrResult<QueueMessageResult>)
    uid: azure-storage.azurestorage.services.queue.QueueService.updateMessage
    package: azure-storage
    summary: >-
      Updates the visibility timeout of a message. You can also use this
      operation to update the contents of a message.

      A message must be in a format that can be included in an XML request with
      UTF-8 encoding, and the encoded message can be up to 64KB in size.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateMessage(queue: string, messageId: string, popReceipt:
        string, visibilityTimeout: number, options: UpdateMessageRequestOptions,
        callback: ErrorOrResult<QueueMessageResult>)
      parameters:
        - id: queue
          type: string
          description: The queue name.
        - id: messageId
          type: string
          description: The message identifier of the message to update.
        - id: popReceipt
          type: string
          description: >-
            A valid pop receipt value returned from an earlier call to the Get
            Messages or Update Message operation
        - id: visibilityTimeout
          type: number
          description: >-
            Specifies the new visibility timeout value, in seconds, relative to
            server time. The new value must be larger than or equal to 0, and
            cannot be larger than 7 days. The visibility timeout of a message
            can be set to a value later than the expiry time.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.queue.QueueService.UpdateMessageRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.queue.QueueService.QueueMessageResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the message result information.
                                                                                    `response` will contain information related to this operation.
  - name: withFilter(IFilter)
    uid: azure-storage.azurestorage.services.queue.QueueService.withFilter
    package: azure-storage
    summary: >
      Associate a filtering operation with this QueueService. Filtering
      operations

      can include logging, automatically retrying, etc. Filter operations are
      objects

      that implement a method with the signature:
          "function handle (requestOptions, next)".

      After doing its preprocessing on the request options, the method needs to
      call

      "next" passing a callback with the following signature:

      signature:

          "function (returnObject, finalCallback, next)"

      In this callback, and after processing the returnObject (the response from
      the

      request to the server), the callback needs to either invoke next if it
      exists to

      continue processing other filters or simply invoke finalCallback otherwise
      to end

      up the service invocation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function withFilter(newFilter: IFilter): QueueService'
      parameters:
        - id: newFilter
          type: <xref uid="azure-storage.azurestorage.common.filters.IFilter" />
          description: ''
      return:
        description: A new service client with the filter applied.
        type: <xref uid="azure-storage.azurestorage.services.queue.QueueService" />
extends: >-
  <xref
  uid="azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient"
  />
