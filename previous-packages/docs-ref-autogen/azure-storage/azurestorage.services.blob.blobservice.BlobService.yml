### YamlMime:TSType
name: BlobService
uid: azure-storage.azurestorage.services.blob.blobservice.BlobService
package: azure-storage
summary: ''
fullName: BlobService
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'BlobService(string, string, string | StorageHost, string, string)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.constructor
    package: azure-storage
    summary: >-
      Creates a new BlobService object.

      If no connection string or storageaccount and storageaccesskey are
      provided,

      the AZURE_STORAGE_CONNECTION_STRING or AZURE_STORAGE_ACCOUNT and
      AZURE_STORAGE_ACCESS_KEY environment variables will be used.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new BlobService(storageAccountOrConnectionString: string,
        storageAccessKey?: string, host?: string | StorageHost, sasToken?:
        string, endpointSuffix?: string)
      parameters:
        - id: storageAccountOrConnectionString
          type: string
          description: ''
        - id: storageAccessKey
          type: string
          description: ''
        - id: host
          type: string | <xref uid="azure-storage.azurestorage.StorageHost" />
          description: ''
        - id: sasToken
          type: string
          description: ''
        - id: endpointSuffix
          type: string
          description: ''
properties:
  - name: defaultEnableReuseSocket
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.defaultEnableReuseSocket
    package: azure-storage
    summary: ''
    fullName: defaultEnableReuseSocket
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultEnableReuseSocket: boolean'
      return:
        description: ''
        type: boolean
  - name: parallelOperationThreadCount
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.parallelOperationThreadCount
    package: azure-storage
    summary: ''
    fullName: parallelOperationThreadCount
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parallelOperationThreadCount: number'
      return:
        description: ''
        type: number
  - name: singleBlobPutThresholdInBytes
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.singleBlobPutThresholdInBytes
    package: azure-storage
    summary: ''
    fullName: singleBlobPutThresholdInBytes
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'singleBlobPutThresholdInBytes: number'
      return:
        description: ''
        type: number
  - name: SpeedSummary
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.SpeedSummary
    package: azure-storage
    summary: 'The callback for {BlobService~getBlobToText}.'
    fullName: SpeedSummary
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static SpeedSummary: SpeedSummary'
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
inheritedProperties:
  - name: defaultClientRequestTimeoutInMs
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.defaultClientRequestTimeoutInMs
    package: azure-storage
    summary: >-
      The default timeout of client requests, in milliseconds, to use for the
      request.
    fullName: defaultClientRequestTimeoutInMs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultClientRequestTimeoutInMs: number'
      return:
        description: ''
        type: number
  - name: defaultLocationMode
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.defaultLocationMode
    package: azure-storage
    summary: The default location mode for requests made via the service.
    fullName: defaultLocationMode
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultLocationMode: LocationMode'
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.util.storageutilities.LocationMode"
          />
  - name: defaultMaximumExecutionTimeInMs
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.defaultMaximumExecutionTimeInMs
    package: azure-storage
    summary: >-
      The default maximum execution time across all potential retries, for
      requests made via the service.
    fullName: defaultMaximumExecutionTimeInMs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultMaximumExecutionTimeInMs: number'
      return:
        description: ''
        type: number
  - name: defaultTimeoutIntervalInMs
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.defaultTimeoutIntervalInMs
    package: azure-storage
    summary: >-
      The default timeout interval, in milliseconds, to use for request made via
      the service.
    fullName: defaultTimeoutIntervalInMs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultTimeoutIntervalInMs: number'
      return:
        description: ''
        type: number
  - name: enableGlobalHttpAgent
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.enableGlobalHttpAgent
    package: azure-storage
    summary: >-
      Determines whether global HTTP(s) agent is enabled; true to use Global
      HTTP(s) agent; otherwise, false to use

      http(s).Agent({keepAlive:true}).
    fullName: enableGlobalHttpAgent
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enableGlobalHttpAgent: boolean'
      return:
        description: ''
        type: boolean
  - name: host
    uid: azure-storage.azurestorage.services.blob.blobservice.BlobService.host
    package: azure-storage
    summary: The host information for the service.
    fullName: host
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'host: StorageHost'
      return:
        description: ''
        type: <xref uid="azure-storage.azurestorage.StorageHost" />
  - name: logger
    uid: azure-storage.azurestorage.services.blob.blobservice.BlobService.logger
    package: azure-storage
    summary: The logging settings object.
    fullName: logger
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'logger: Logger'
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.diagnostics.logger.Logger" />
  - name: proxy
    uid: azure-storage.azurestorage.services.blob.blobservice.BlobService.proxy
    package: azure-storage
    summary: The proxy object specified by caller.
    fullName: proxy
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'proxy: Proxy'
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.services.storageserviceclient.Proxy"
          />
  - name: useNagleAlgorithm
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.useNagleAlgorithm
    package: azure-storage
    summary: >-
      Determines whether the Nagle algorithm is used for requests made via the
      Queue service; true to use the

      Nagle algorithm; otherwise, false. The default value is false.
    fullName: useNagleAlgorithm
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'useNagleAlgorithm: boolean'
      return:
        description: ''
        type: boolean
inheritedMethods:
  - name: 'addListener(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.addListener
    package: azure-storage
    summary: 'Alias for `emitter.on(eventName, listener)`.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addListener(eventName: string | symbol, listener: (args: any[])
        => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: this
  - name: 'emit(string | symbol, any[])'
    uid: azure-storage.azurestorage.services.blob.blobservice.BlobService.emit
    package: azure-storage
    summary: >-
      Synchronously calls each of the listeners registered for the event
      named`eventName`, in the order they were registered, passing the supplied
      arguments

      to each.

      Returns `true` if the event had listeners, `false` otherwise.


      ```js

      const EventEmitter = require('events');

      const myEmitter = new EventEmitter();


      // First listener

      myEmitter.on('event', function firstListener() {
        console.log('Helloooo! first listener');
      });

      // Second listener

      myEmitter.on('event', function secondListener(arg1, arg2) {
        console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
      });

      // Third listener

      myEmitter.on('event', function thirdListener(...args) {
        const parameters = args.join(', ');
        console.log(`event with parameters ${parameters} in third listener`);
      });


      console.log(myEmitter.listeners('event'));


      myEmitter.emit('event', 1, 2, 3, 4, 5);


      // Prints:

      // [

      //   [Function: firstListener],

      //   [Function: secondListener],

      //   [Function: thirdListener]

      // ]

      // Helloooo! first listener

      // event with parameters 1, 2 in second listener

      // event with parameters 1, 2, 3, 4, 5 in third listener

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(eventName: string | symbol, args: any[]): boolean'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: args
          type: 'any[]'
          description: ''
      return:
        description: ''
        type: boolean
  - name: eventNames()
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.eventNames
    package: azure-storage
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.
      ```js
      const EventEmitter = require('events');
      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function eventNames(): Array<string | symbol>'
      return:
        description: ''
        type: Array&lt;string | symbol&gt;
  - name: getMaxListeners()
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getMaxListeners
    package: azure-storage
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      <xref:defaultMaxListeners>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getMaxListeners(): number'
      return:
        description: ''
        type: number
  - name: listenerCount(string | symbol)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listenerCount
    package: azure-storage
    summary: Returns the number of listeners listening to the event named `eventName`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listenerCount(eventName: string | symbol): number'
      parameters:
        - id: eventName
          type: string | symbol
          description: |
            The name of the event being listened for
      return:
        description: ''
        type: number
  - name: listeners(string | symbol)
    uid: azure-storage.azurestorage.services.blob.blobservice.BlobService.listeners
    package: azure-storage
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.
      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listeners(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: 'Function[]'
  - name: 'off(string | symbol, (args: any[]) => void)'
    uid: azure-storage.azurestorage.services.blob.blobservice.BlobService.off
    package: azure-storage
    summary: Alias for `emitter.removeListener()`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(eventName: string | symbol, listener: (args: any[]) =>
        void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: this
  - name: 'on(string | symbol, (args: any[]) => void)'
    uid: azure-storage.azurestorage.services.blob.blobservice.BlobService.on
    package: azure-storage
    summary: >-
      Adds the `listener` function to the end of the listeners array for the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.

      ```js

      server.on('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependListener()` method can be used as an alternative to add
      the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.on('foo', () => console.log('a'));

      myEE.prependListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function on(eventName: string | symbol, listener: (args: any[]) =>
        void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
  - name: 'once(string | symbol, (args: any[]) => void)'
    uid: azure-storage.azurestorage.services.blob.blobservice.BlobService.once
    package: azure-storage
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName`.
      The

      next time `eventName` is triggered, this listener is removed and then
      invoked.

      ```js

      server.once('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependOnceListener()` method can be used as an alternative to
      add the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.once('foo', () => console.log('a'));

      myEE.prependOnceListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function once(eventName: string | symbol, listener: (args: any[]) =>
        void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
  - name: 'prependListener(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.prependListener
    package: azure-storage
    summary: >-
      Adds the `listener` function to the _beginning_ of the listeners array for
      the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.

      ```js

      server.prependListener('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependListener(eventName: string | symbol, listener: (args:
        any[]) => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
  - name: 'prependOnceListener(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.prependOnceListener
    package: azure-storage
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName` to
      the _beginning_ of the listeners array. The next time `eventName` is
      triggered, this

      listener is removed, and then invoked.

      ```js

      server.prependOnceListener('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener(eventName: string | symbol, listener:
        (args: any[]) => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
  - name: rawListeners(string | symbol)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.rawListeners
    package: azure-storage
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).
      ```js
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function rawListeners(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: 'Function[]'
  - name: removeAllListeners(string | symbol)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.removeAllListeners
    package: azure-storage
    summary: |-
      Removes all listeners, or those of the specified `eventName`.
      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(event?: string | symbol): this'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        description: ''
        type: this
  - name: 'removeListener(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.removeListener
    package: azure-storage
    summary: >-
      Removes the specified `listener` from the listener array for the event
      named`eventName`.

      ```js

      const callback = (stream) => {
        console.log('someone connected!');
      };

      server.on('connection', callback);

      // ...

      server.removeListener('connection', callback);

      ```


      `removeListener()` will remove, at most, one instance of a listener from
      the

      listener array. If any single listener has been added multiple times to
      the

      listener array for the specified `eventName`, then `removeListener()` must
      be

      called multiple times to remove each instance.


      Once an event is emitted, all listeners attached to it at the

      time of emitting are called in order. This implies that
      any`removeListener()` or `removeAllListeners()` calls _after_ emitting and
      _before_ the last listener finishes execution

      will not remove them from`emit()` in progress. Subsequent events behave as
      expected.


      ```js

      const myEmitter = new MyEmitter();


      const callbackA = () => {
        console.log('A');
        myEmitter.removeListener('event', callbackB);
      };


      const callbackB = () => {
        console.log('B');
      };


      myEmitter.on('event', callbackA);


      myEmitter.on('event', callbackB);


      // callbackA removes listener callbackB but it will still be called.

      // Internal listener array at time of emit [callbackA, callbackB]

      myEmitter.emit('event');

      // Prints:

      //   A

      //   B


      // callbackB is now removed.

      // Internal listener array [callbackA]

      myEmitter.emit('event');

      // Prints:

      //   A

      ```


      Because listeners are managed using an internal array, calling this will

      change the position indices of any listener registered _after_ the
      listener

      being removed. This will not impact the order in which listeners are
      called,

      but it means that any copies of the listener array as returned by

      the `emitter.listeners()` method will need to be recreated.


      When a single function has been added as a handler multiple times for a
      single

      event (as in the example below), `removeListener()` will remove the most

      recently added instance. In the example the `once('ping')`listener is
      removed:


      ```js

      const ee = new EventEmitter();


      function pong() {
        console.log('pong');
      }


      ee.on('ping', pong);

      ee.once('ping', pong);

      ee.removeListener('ping', pong);


      ee.emit('ping');

      ee.emit('ping');

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function removeListener(eventName: string | symbol, listener: (args:
        any[]) => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: this
  - name: setMaxListeners(number)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setMaxListeners
    package: azure-storage
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to`Infinity` (or `0`) to indicate an unlimited number of listeners.

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number): this'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        description: ''
        type: this
  - name: setProxy(Proxy)
    uid: azure-storage.azurestorage.services.blob.blobservice.BlobService.setProxy
    package: azure-storage
    summary: Sets proxy object specified by caller.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setProxy(proxy: Proxy)'
      parameters:
        - id: proxy
          type: >-
            <xref
            uid="azure-storage.azurestorage.common.services.storageserviceclient.Proxy"
            />
          description: |
            proxy to use for tunneling
                                                   {
                                                    host: hostname
                                                    port: port number
                                                    proxyAuth: 'user:password' for basic auth
                                                    headers: {...} headers for proxy server
                                                    key: key for proxy server
                                                    ca: ca for proxy server
                                                    cert: cert for proxy server
                                                   }
                                                   if null or undefined, clears proxy
methods:
  - name: 'abortCopyBlob(string, string, string, BlobRequestOptions, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.abortCopyBlob
    package: azure-storage
    summary: Abort a blob copy operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function abortCopyBlob(container: string, blob: string, copyId: string,
        options: BlobRequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: container
          type: string
          description: The destination container name.
        - id: blob
          type: string
          description: The destination blob name.
        - id: copyId
          type: string
          description: The copy operation identifier.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions"
            />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information.
                                                                                  `response` will contain information related to this operation.
  - name: 'abortCopyBlob(string, string, string, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.abortCopyBlob_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function abortCopyBlob(container: string, blob: string, copyId: string,
        callback: ErrorOrResponse)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: copyId
          type: string
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: ''
  - name: >-
      acquireLease(string, string, AcquireLeaseRequestOptions,
      ErrorOrResult<LeaseResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.acquireLease_1
    package: azure-storage
    summary: >-
      Acquires a new lease. If container and blob are specified, acquires a blob
      lease. Otherwise, if only container is specified and blob is null,
      acquires a container lease.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function acquireLease(container: string, blob: string, options:
        AcquireLeaseRequestOptions, callback: ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.AcquireLeaseRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
  - name: 'acquireLease(string, string, ErrorOrResult<LeaseResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.acquireLease
    package: azure-storage
    summary: >-
      Acquires a new lease. If container and blob are specified, acquires a blob
      lease. Otherwise, if only container is specified and blob is null,
      acquires a container lease.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function acquireLease(container: string, blob: string, callback:
        ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      appendBlockFromStream(string, string, stream.Readable, number,
      AppendBlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendBlockFromStream
    package: azure-storage
    summary: >-
      Creates a new block from a read stream to be appended to an append blob.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function appendBlockFromStream(container: string, blob: string,
        readStream: stream.Readable, streamLength: number, options:
        AppendBlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: readStream
          type: <xref uid="stream.Readable" />
          description: The Node.js Readable stream.
        - id: streamLength
          type: number
          description: The stream length.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.AppendBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will contain
                                                                                  information about the blob.
                                                                                  `response` will contain information related to this operation.
  - name: >-
      appendBlockFromStream(string, string, stream.Readable, number,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendBlockFromStream_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function appendBlockFromStream(container: string, blob: string,
        readStream: stream.Readable, streamLength: number, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: readStream
          type: <xref uid="stream.Readable" />
          description: ''
        - id: streamLength
          type: number
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
  - name: >-
      appendBlockFromText(string, string, string | Buffer,
      AppendBlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendBlockFromText
    package: azure-storage
    summary: >-
      Creates a new block from a text to be appended to an append blob.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function appendBlockFromText(container: string, blob: string, content:
        string | Buffer, options: AppendBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: content
          type: string | Buffer
          description: 'The block text, as a string or in a Buffer.'
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.AppendBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will contain
                                                                                  information about the blob.
                                                                                  `response` will contain information related to this operation.
  - name: >-
      appendBlockFromText(string, string, string | Buffer,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendBlockFromText_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function appendBlockFromText(container: string, blob: string, content:
        string | Buffer, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: content
          type: string | Buffer
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
  - name: >-
      appendFromBrowserFile(string, string, Object, CreateBlobRequestOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromBrowserFile
    package: azure-storage
    summary: >-
      Appends to an append blob from an HTML File object. Assumes the blob
      already exists on the service.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      (Only available in the JavaScript Client Library for Browsers)
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function appendFromBrowserFile(container: string, blob: string,
        browserFile: Object, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: browserFile
          type: Object
          description: The File object to be uploaded created by HTML File API.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |-
            `error` will contain information
                                                                                      if an error occurs; otherwise `[result](xref:BlobResult)` will contain
                                                                                      the blob information.
                                                                                      `response` will contain information related to this operation.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: 'appendFromBrowserFile(string, string, Object, ErrorOrResult<BlobResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromBrowserFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function appendFromBrowserFile(container: string, blob: string,
        browserFile: Object, callback: ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: browserFile
          type: Object
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      appendFromLocalFile(string, string, string, CreateBlobRequestOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromLocalFile
    package: azure-storage
    summary: >-
      Appends to an append blob from a local file. Assumes the blob already
      exists on the service.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function appendFromLocalFile(container: string, blob: string,
        localFileName: string, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: localFileName
          type: string
          description: The local path to the file to be uploaded.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: The callback function.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: 'appendFromLocalFile(string, string, string, ErrorOrResult<BlobResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromLocalFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function appendFromLocalFile(container: string, blob: string,
        localFileName: string, callback: ErrorOrResult<BlobResult>):
        SpeedSummary
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: localFileName
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      appendFromStream(string, string, stream.Readable, number,
      CreateBlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromStream
    package: azure-storage
    summary: >-
      Appends to an append blob from a stream. Assumes the blob already exists
      on the service.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function appendFromStream(container: string, blob: string, stream:
        stream.Readable, streamLength: number, options:
        CreateBlobRequestOptions, callback: ErrorOrResult<BlobResult>):
        SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: stream
          type: <xref uid="stream.Readable" />
          description: ''
        - id: streamLength
          type: number
          description: The length of the stream to upload.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: The callback function.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      appendFromStream(string, string, stream.Readable, number,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromStream_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function appendFromStream(container: string, blob: string, stream:
        stream.Readable, streamLength: number, callback:
        ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: stream
          type: <xref uid="stream.Readable" />
          description: ''
        - id: streamLength
          type: number
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      appendFromText(string, string, string, CreateBlobRequestOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromText
    package: azure-storage
    summary: >-
      Appends to an append blob from a text string. Assumes the blob already
      exists on the service.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function appendFromText(container: string, blob: string, text: string,
        options: CreateBlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: text
          type: string
          description: 'The blob text, as a string or in a Buffer.'
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      information about the blob.
                                                                                      `response` will contain information related to this operation.
  - name: 'appendFromText(string, string, string, ErrorOrResult<BlobResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.appendFromText_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function appendFromText(container: string, blob: string, text: string,
        callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: text
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
  - name: >-
      breakLease(string, string, BreakLeaseRequestOptions,
      ErrorOrResult<LeaseResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.breakLease_1
    package: azure-storage
    summary: >-
      Breaks the lease but ensures that another client cannot acquire a new
      lease until the current lease period has expired. If container and blob
      are specified, breaks the blob lease.

      Otherwise, if only container is specified and blob is null, breaks the
      container lease.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function breakLease(container: string, blob: string, options:
        BreakLeaseRequestOptions, callback: ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BreakLeaseRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
  - name: 'breakLease(string, string, ErrorOrResult<LeaseResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.breakLease
    package: azure-storage
    summary: >-
      Breaks the lease but ensures that another client cannot acquire a new
      lease until the current lease period has expired. If container and blob
      are specified, breaks the blob lease.

      Otherwise, if only container is specified and blob is null, breaks the
      container lease.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function breakLease(container: string, blob: string, callback:
        ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
  - name: 'changeLease(string, string, string, string, ErrorOrResult<LeaseResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.changeLease
    package: azure-storage
    summary: >-
      Changes the lease ID of an active lease. If container and blob are
      specified, changes the blob lease. Otherwise, if only container is
      specified and blob is null, changes the

      container lease.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function changeLease(container: string, blob: string, leaseId: string,
        proposedLeaseId: string, callback: ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: leaseId
          type: string
          description: The current lease identifier.
        - id: proposedLeaseId
          type: string
          description: The proposed lease identifier. Must be a GUID.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult"
            />&gt;
          description: |
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain  the lease information.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      changeLease(string, string, string, string, LeaseRequestOptions,
      ErrorOrResult<LeaseResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.changeLease_1
    package: azure-storage
    summary: >-
      Changes the lease ID of an active lease. If container and blob are
      specified, changes the blob lease. Otherwise, if only container is
      specified and blob is null, changes the

      container lease.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function changeLease(container: string, blob: string, leaseId: string,
        proposedLeaseId: string, options: LeaseRequestOptions, callback:
        ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: leaseId
          type: string
          description: The current lease identifier.
        - id: proposedLeaseId
          type: string
          description: The proposed lease identifier. Must be a GUID.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult"
            />&gt;
          description: |
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain  the lease information.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      clearPageRange(string, string, number, number, BlobRequestOptions,
      ErrorOrResponse)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.clearPageRange
    package: azure-storage
    summary: Clears a range of pages.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function clearPageRange(container: string, blob: string, rangeStart:
        number, rangeEnd: number, options: BlobRequestOptions, callback:
        ErrorOrResponse)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: rangeStart
          type: number
          description: The range start.
        - id: rangeEnd
          type: number
          description: The range end.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions"
            />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise
                                                                                    `response` will contain information related to this operation.
  - name: 'clearPageRange(string, string, number, number, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.clearPageRange_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function clearPageRange(container: string, blob: string, rangeStart:
        number, rangeEnd: number, callback: ErrorOrResponse)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: rangeStart
          type: number
          description: ''
        - id: rangeEnd
          type: number
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: ''
  - name: >-
      commitBlocks(string, string, PutBlockListRequest,
      CreateBlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.commitBlocks
    package: azure-storage
    summary: >+
      Writes a blob by specifying the list of block IDs that make up the blob.

      In order to be written as part of a blob, a block must have been
      successfully written to the server in a prior

      createBlock operation.

      Note: If no valid list is specified in the blockList parameter, blob would
      be updated with empty content,

      i.e. existing blocks in the blob will be removed, this behavior is kept
      for backward compatibility consideration.


      **Example**


      var azure = require('azure-storage');

      var blobService = azure.createBlobService();

      blobService.createBlockFromText("sampleBlockName", containerName,
      blobName, "sampleBlockContent", function(error) {
        assert.equal(error, null);
        // In this example, LatestBlocks is used, we hope the Blob service first search
        // the uncommitted block list, and then the committed block list for the named block "sampleBlockName",
        // and thus make sure the block is with latest content.
        blobService.commitBlocks(containerName, blobName, { LatestBlocks: ["sampleBlockName"] }, function(error) {
          assert.equal(error, null);
        });
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function commitBlocks(container: string, blob: string, blockList:
        PutBlockListRequest, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: blockList
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.PutBlockListRequest"
            />
          description: >-
            The wrapper for block ID list contains block IDs that make up the
            blob.
                                                                                      Three kinds of list are provided, please choose one to use according to requirement.
                                                                                      For more background knowledge, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-list
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |-
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      the blocklist information.
                                                                                      `response` will contain information related to this operation.
  - name: >-
      commitBlocks(string, string, PutBlockListRequest,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.commitBlocks_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function commitBlocks(container: string, blob: string, blockList:
        PutBlockListRequest, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: blockList
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.PutBlockListRequest"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
  - name: >-
      createAppendBlobFromBrowserFile(string, string, Object,
      CreateBlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromBrowserFile
    package: azure-storage
    summary: >-
      Creates a new append blob from an HTML File object. If the blob already
      exists on the service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      If you want to append data to an already existing blob, please look at
      appendFromBrowserFile.

      (Only available in the JavaScript Client Library for Browsers)
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createAppendBlobFromBrowserFile(container: string, blob:
        string, browserFile: Object, options: CreateBlobRequestOptions,
        callback: ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: browserFile
          type: Object
          description: The File object to be uploaded created by HTML File API.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |-
            `error` will contain information
                                                                                      if an error occurs; otherwise `[result](xref:BlobResult)` will contain
                                                                                      the blob information.
                                                                                      `response` will contain information related to this operation.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createAppendBlobFromBrowserFile(string, string, Object,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromBrowserFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createAppendBlobFromBrowserFile(container: string, blob:
        string, browserFile: Object, callback: ErrorOrResult<BlobResult>):
        SpeedSummary
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: browserFile
          type: Object
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createAppendBlobFromLocalFile(string, string, string,
      CreateBlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromLocalFile
    package: azure-storage
    summary: >-
      Creates a new append blob from a local file. If the blob already exists on
      the service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      If you want to append data to an already existing blob, please look at
      appendFromLocalFile.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createAppendBlobFromLocalFile(container: string, blob: string,
        localFileName: string, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: localFileName
          type: string
          description: The local path to the file to be uploaded.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: The callback function.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createAppendBlobFromLocalFile(string, string, string,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromLocalFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createAppendBlobFromLocalFile(container: string, blob: string,
        localFileName: string, callback: ErrorOrResult<BlobResult>):
        SpeedSummary
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: localFileName
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createAppendBlobFromStream(string, string, stream.Readable, number,
      CreateBlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromStream
    package: azure-storage
    summary: >-
      Uploads an append blob from a stream. If the blob already exists on the
      service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      If you want to append data to an already existing blob, please look at
      appendFromStream.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createAppendBlobFromStream(container: string, blob: string,
        stream: stream.Readable, streamLength: number, options:
        CreateBlobRequestOptions, callback: ErrorOrResult<BlobResult>):
        SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: stream
          type: <xref uid="stream.Readable" />
          description: ''
        - id: streamLength
          type: number
          description: The length of the stream to upload.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: The callback function.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createAppendBlobFromStream(string, string, stream.Readable, number,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromStream_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createAppendBlobFromStream(container: string, blob: string,
        stream: stream.Readable, streamLength: number, callback:
        ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: stream
          type: <xref uid="stream.Readable" />
          description: ''
        - id: streamLength
          type: number
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createAppendBlobFromText(string, string, string | Buffer,
      CreateBlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromText
    package: azure-storage
    summary: >-
      Uploads an append blob from a text string. If the blob already exists on
      the service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      If you want to append data to an already existing blob, please look at
      appendFromText.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createAppendBlobFromText(container: string, blob: string, text:
        string | Buffer, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: text
          type: string | Buffer
          description: 'The blob text, as a string or in a Buffer.'
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      information about the blob.
                                                                                      `response` will contain information related to this operation.
  - name: >-
      createAppendBlobFromText(string, string, string | Buffer,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createAppendBlobFromText_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createAppendBlobFromText(container: string, blob: string, text:
        string | Buffer, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: text
          type: string | Buffer
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
  - name: >-
      createBlobSnapshot(string, string, BlobRequestOptions,
      ErrorOrResult<string>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlobSnapshot
    package: azure-storage
    summary: Creates a read-only snapshot of a blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlobSnapshot(container: string, blob: string, options:
        BlobRequestOptions, callback: ErrorOrResult<string>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult"
            />&lt;string&gt;
          description: |
            `error` will contain information
                                                                              if an error occurs; otherwise `result` will contain
                                                                              the ID of the snapshot.
                                                                              `response` will contain information related to this operation.
  - name: 'createBlobSnapshot(string, string, ErrorOrResult<string>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlobSnapshot_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlobSnapshot(container: string, blob: string, callback:
        ErrorOrResult<string>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult"
            />&lt;string&gt;
          description: ''
  - name: >-
      createBlockBlobFromBrowserFile(string, string, Object,
      CreateBlockBlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromBrowserFile
    package: azure-storage
    summary: >-
      Creates a new block blob. If the blob already exists on the service, it
      will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      (Only available in the JavaScript Client Library for Browsers)
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlockBlobFromBrowserFile(container: string, blob: string,
        browserFile: Object, options: CreateBlockBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: browserFile
          type: Object
          description: The File object to be uploaded created by HTML File API.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlockBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |-
            `error` will contain information
                                                                                      if an error occurs; otherwise `[result](xref:BlobResult)` will contain
                                                                                      the blob information.
                                                                                      `response` will contain information related to this operation.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createBlockBlobFromBrowserFile(string, string, Object,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromBrowserFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlockBlobFromBrowserFile(container: string, blob: string,
        browserFile: Object, callback: ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: browserFile
          type: Object
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createBlockBlobFromLocalFile(string, string, string,
      CreateBlockBlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromLocalFile
    package: azure-storage
    summary: >-
      Creates a new block blob or updates the content of an existing block blob.

      Updating an existing block blob overwrites any existing metadata on the
      blob.

      Partial updates are not supported with Put Blob; The content of the
      existing blob is overwritten with the content of the new blob.

      To perform a partial update of the content of a block blob, use the Put
      Block List operation.

      Calling Put Blob to create a page blob only initializes the blob. To add
      content to a page blob, call the Put Page operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlockBlobFromLocalFile(container: string, blob: string,
        localFileName: string, options: CreateBlockBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: localFileName
          type: string
          description: The local path to the file to be uploaded.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlockBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |-
            `error` will contain information
                                                                                        if an error occurs; otherwise `[result](xref:BlobResult)` will contain
                                                                                        the blob information.
                                                                                        `response` will contain information related to this operation.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createBlockBlobFromLocalFile(string, string, string,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromLocalFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlockBlobFromLocalFile(container: string, blob: string,
        localFileName: string, callback: ErrorOrResult<BlobResult>):
        SpeedSummary
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: localFileName
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createBlockBlobFromStream(string, string, stream.Readable, number,
      CreateBlockBlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromStream_1
    package: azure-storage
    summary: Uploads a block blob from a stream.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlockBlobFromStream(container: string, blob: string,
        stream: stream.Readable, streamLength: number, options:
        CreateBlockBlobRequestOptions, callback: ErrorOrResult<BlobResult>):
        SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: stream
          type: <xref uid="stream.Readable" />
          description: ''
        - id: streamLength
          type: number
          description: The length of the stream to upload.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlockBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: The callback function.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createBlockBlobFromStream(string, string, stream.Readable, number,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromStream
    package: azure-storage
    summary: Uploads a block blob from a stream.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlockBlobFromStream(container: string, blob: string,
        stream: stream.Readable, streamLength: number, callback:
        ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: stream
          type: <xref uid="stream.Readable" />
          description: ''
        - id: streamLength
          type: number
          description: The length of the stream to upload.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: The callback function.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createBlockBlobFromText(string, string, string | Buffer,
      CreateBlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromText
    package: azure-storage
    summary: Uploads a block blob from a text string.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlockBlobFromText(container: string, blob: string, text:
        string | Buffer, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: text
          type: string | Buffer
          description: 'The blob text, as a string or in a Buffer.'
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                        if an error occurs; otherwise `result` will contain
                                                                                        information about the blob.
                                                                                        `response` will contain information related to this operation.
  - name: >-
      createBlockBlobFromText(string, string, string | Buffer,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockBlobFromText_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlockBlobFromText(container: string, blob: string, text:
        string | Buffer, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: text
          type: string | Buffer
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
  - name: >-
      createBlockFromStream(string, string, string, stream.Readable, number,
      BlobRequestOptions, ErrorOrResponse)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromStream
    package: azure-storage
    summary: Creates a new block to be committed as part of a blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlockFromStream(blockId: string, container: string, blob:
        string, readStream: stream.Readable, streamLength: number, options:
        BlobRequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: blockId
          type: string
          description: The block identifier.
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: readStream
          type: <xref uid="stream.Readable" />
          description: The Node.js Readable stream.
        - id: streamLength
          type: number
          description: The stream length.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions"
            />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise
                                                                                  `response` will contain information related to this operation.
  - name: >-
      createBlockFromStream(string, string, string, stream.Readable, number,
      ErrorOrResponse)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromStream_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlockFromStream(blockId: string, container: string, blob:
        string, readStream: stream.Readable, streamLength: number, callback:
        ErrorOrResponse)
      parameters:
        - id: blockId
          type: string
          description: ''
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: readStream
          type: <xref uid="stream.Readable" />
          description: ''
        - id: streamLength
          type: number
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: ''
  - name: >-
      createBlockFromText(string, string, string, string | Buffer,
      BlobRequestOptions, ErrorOrResponse)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromText
    package: azure-storage
    summary: Creates a new block to be committed as part of a blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlockFromText(blockId: string, container: string, blob:
        string, content: string | Buffer, options: BlobRequestOptions, callback:
        ErrorOrResponse)
      parameters:
        - id: blockId
          type: string
          description: The block identifier.
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: content
          type: string | Buffer
          description: The block content.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions"
            />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise
                                                                                  `response` will contain information related to this operation.
  - name: >-
      createBlockFromText(string, string, string, string | Buffer,
      ErrorOrResponse)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromText_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlockFromText(blockId: string, container: string, blob:
        string, content: string | Buffer, callback: ErrorOrResponse)
      parameters:
        - id: blockId
          type: string
          description: ''
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: content
          type: string | Buffer
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: ''
  - name: >-
      createBlockFromURL(string, string, string, string, number, number,
      CreateBlockRequestOptions, ErrorOrResponse)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromURL
    package: azure-storage
    summary: >-
      Creates a new block to be committed as part of a blob from an URL of an
      Azure blob or file.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlockFromURL(blockId: string, container: string, blob:
        string, sourceURL: string, sourceRangeStart: number, sourceRangeEnd:
        number, options: CreateBlockRequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: blockId
          type: string
          description: The block identifier.
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: sourceURL
          type: string
          description: |-
            The URL of the source data.
                                                                                  It can point to any Azure Blob or File, that is either public or has a shared access signature attached.
        - id: sourceRangeStart
          type: number
          description: >-
            The start of the range of bytes(inclusive) that has to be taken from
            the copy source.
        - id: sourceRangeEnd
          type: number
          description: >-
            The end of the range of bytes(inclusive) that has to be taken from
            the copy source.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlockRequestOptions"
            />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise
                                                                                  `response` will contain information related to this operation.
  - name: >-
      createBlockFromURL(string, string, string, string, number, number,
      ErrorOrResponse)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createBlockFromURL_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createBlockFromURL(blockId: string, container: string, blob:
        string, sourceURL: string, sourceRangeStart: number, sourceRangeEnd:
        number, callback: ErrorOrResponse)
      parameters:
        - id: blockId
          type: string
          description: ''
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: sourceURL
          type: string
          description: ''
        - id: sourceRangeStart
          type: number
          description: ''
        - id: sourceRangeEnd
          type: number
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: ''
  - name: >-
      createContainer(string, CreateContainerOptions,
      ErrorOrResult<ContainerResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createContainer_1
    package: azure-storage
    summary: |-
      Creates a new container under the specified account.
      If a container with the same name already exists, the operation fails.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createContainer(container: string, options:
        CreateContainerOptions, callback: ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateContainerOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult"
            />&gt;
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            the container information.
                                                                            `response` will contain information related to this operation.
  - name: 'createContainer(string, ErrorOrResult<ContainerResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createContainer
    package: azure-storage
    summary: |-
      Creates a new container under the specified account.
      If a container with the same name already exists, the operation fails.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createContainer(container: string, callback:
        ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult"
            />&gt;
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            the container information.
                                                                            `response` will contain information related to this operation.
  - name: >-
      createContainerIfNotExists(string, CreateContainerOptions,
      ErrorOrResult<ContainerResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createContainerIfNotExists_1
    package: azure-storage
    summary: >+
      Creates a new container under the specified account if the container does
      not exists.


      **Example**


      var azure = require('azure-storage');

      var blobService = azure.createBlobService();

      blobService.createContainerIfNotExists('taskcontainer', {publicAccessLevel
      : 'blob'}, function(error) {
        if(!error) {
          // Container created or exists, and is public
        }
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createContainerIfNotExists(container: string, options:
        CreateContainerOptions, callback: ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateContainerOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will
                                                                                  be true if the container was created, or false if the container
                                                                                  already exists.
                                                                                  `response` will contain information related to this operation.
  - name: 'createContainerIfNotExists(string, ErrorOrResult<ContainerResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createContainerIfNotExists
    package: azure-storage
    summary: >+
      Creates a new container under the specified account if the container does
      not exists.


      **Example**


      var azure = require('azure-storage');

      var blobService = azure.createBlobService();

      blobService.createContainerIfNotExists('taskcontainer', {publicAccessLevel
      : 'blob'}, function(error) {
        if(!error) {
          // Container created or exists, and is public
        }
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createContainerIfNotExists(container: string, callback:
        ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will
                                                                                  be true if the container was created, or false if the container
                                                                                  already exists.
                                                                                  `response` will contain information related to this operation.
  - name: >-
      createOrReplaceAppendBlob(string, string, CreateBlobRequestOptions,
      ErrorOrResponse)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createOrReplaceAppendBlob
    package: azure-storage
    summary: >-
      Creates an empty append blob. If the blob already exists on the service,
      it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrReplaceAppendBlob(container: string, blob: string,
        options: CreateBlobRequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                                      if an error occurs; otherwise
                                                                                      `response` will contain information related to this operation.
  - name: 'createOrReplaceAppendBlob(string, string, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createOrReplaceAppendBlob_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createOrReplaceAppendBlob(container: string, blob: string,
        callback: ErrorOrResponse)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: ''
  - name: >-
      createPageBlob(string, string, number, CreatePageBlobOptions,
      ErrorOrResponse)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlob_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPageBlob(container: string, blob: string, length: number,
        options: CreatePageBlobOptions, callback: ErrorOrResponse)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: length
          type: number
          description: ''
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreatePageBlobOptions"
            />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: ''
  - name: 'createPageBlob(string, string, number, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlob
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPageBlob(container: string, blob: string, length: number,
        callback: ErrorOrResponse)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: length
          type: number
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: ''
  - name: >-
      createPageBlobFromBrowserFile(string, string, Object,
      CreatePageBlobOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromBrowserFile
    package: azure-storage
    summary: >-
      Uploads a page blob from an HTML file. If the blob already exists on the
      service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      (Only available in the JavaScript Client Library for Browsers)
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPageBlobFromBrowserFile(container: string, blob: string,
        browserFile: Object, options: CreatePageBlobOptions, callback:
        ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: browserFile
          type: Object
          description: The File object to be uploaded created by HTML File API.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreatePageBlobOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |-
            `error` will contain information
                                                                                            if an error occurs; otherwise `[result](xref:BlobResult)` will contain
                                                                                            the blob information.
                                                                                            `response` will contain information related to this operation.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createPageBlobFromBrowserFile(string, string, Object,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromBrowserFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPageBlobFromBrowserFile(container: string, blob: string,
        browserFile: Object, callback: ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: browserFile
          type: Object
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createPageBlobFromLocalFile(string, string, string, CreatePageBlobOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromLocalFile
    package: azure-storage
    summary: Uploads a page blob from file.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPageBlobFromLocalFile(container: string, blob: string,
        localFileName: string, options: CreatePageBlobOptions, callback:
        ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: localFileName
          type: string
          description: ''
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreatePageBlobOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: The callback function.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createPageBlobFromLocalFile(string, string, string,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromLocalFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPageBlobFromLocalFile(container: string, blob: string,
        localFileName: string, callback: ErrorOrResult<BlobResult>):
        SpeedSummary
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: localFileName
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createPageBlobFromStream(string, string, stream.Readable, number,
      CreatePageBlobOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromStream
    package: azure-storage
    summary: Uploads a page blob from a stream.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPageBlobFromStream(container: string, blob: string,
        stream: stream.Readable, streamLength: number, options:
        CreatePageBlobOptions, callback: ErrorOrResult<BlobResult>):
        SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: stream
          type: <xref uid="stream.Readable" />
          description: ''
        - id: streamLength
          type: number
          description: The length of the stream to upload.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreatePageBlobOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: The callback function.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createPageBlobFromStream(string, string, stream.Readable, number,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPageBlobFromStream_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPageBlobFromStream(container: string, blob: string,
        stream: stream.Readable, streamLength: number, callback:
        ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: stream
          type: <xref uid="stream.Readable" />
          description: ''
        - id: streamLength
          type: number
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      createPagesFromStream(string, string, stream.Readable, number, number,
      BlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPagesFromStream
    package: azure-storage
    summary: Updates a page blob from a stream.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPagesFromStream(container: string, blob: string,
        readStream: stream.Readable, rangeStart: number, rangeEnd: number,
        options: BlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: readStream
          type: <xref uid="stream.Readable" />
          description: The Node.js Readable stream.
        - id: rangeStart
          type: number
          description: The range start.
        - id: rangeEnd
          type: number
          description: The range end.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the blob information.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      createPagesFromStream(string, string, stream.Readable, number, number,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createPagesFromStream_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPagesFromStream(container: string, blob: string,
        readStream: stream.Readable, rangeStart: number, rangeEnd: number,
        callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: readStream
          type: <xref uid="stream.Readable" />
          description: ''
        - id: rangeStart
          type: number
          description: ''
        - id: rangeEnd
          type: number
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
  - name: 'createReadStream(string, string, ErrorOrResult<BlobResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createReadStream_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createReadStream(container: string, blob: string, callback:
        ErrorOrResult<BlobResult>): stream.Readable
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: <xref uid="stream.Readable" />
  - name: >-
      createReadStream(string, string, GetBlobRequestOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createReadStream
    package: azure-storage
    summary: |+
      Provides a stream to read from a blob.

      **Example**

      var azure = require('azure-storage');
      var blobService = azure.createBlobService();
      var writable = fs.createWriteStream(destinationFileNameTarget);
       blobService.createReadStream(containerName, blobName).pipe(writable);

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createReadStream(container: string, blob: string, options:
        GetBlobRequestOptions, callback: ErrorOrResult<BlobResult>):
        stream.Readable
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.GetBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain the blob information.
                                                                                    `response` will contain information related to this operation.
      return:
        description: A Node.js Readable stream.
        type: <xref uid="stream.Readable" />
  - name: >-
      createWriteStreamToBlockBlob(string, string,
      CreateBlockBlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToBlockBlob
    package: azure-storage
    summary: >+
      Provides a stream to write to a block blob.

      Please note the `Stream` returned by this API should be used with piping.


      **Example**


      var azure = require('azure-storage');

      var blobService = azure.createBlobService();

      var stream =
      fs.createReadStream(fileNameTarget).pipe(blobService.createWriteStreamToBlockBlob(containerName,
      blobName, { blockIdPrefix: 'block' }));

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createWriteStreamToBlockBlob(container: string, blob: string,
        options: CreateBlockBlobRequestOptions, callback?:
        ErrorOrResult<BlobResult>): stream.Writable
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlockBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |-
            `error` will contain information
                                                                                        if an error occurs; otherwise `result` will contain
                                                                                        information about the blob.
                                                                                        `response` will contain information related to this operation.
      return:
        description: A Node.js Writable stream.
        type: <xref uid="stream.Writable" />
  - name: 'createWriteStreamToBlockBlob(string, string, ErrorOrResult<BlobResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToBlockBlob_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createWriteStreamToBlockBlob(container: string, blob: string,
        callback?: ErrorOrResult<BlobResult>): stream.Writable
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: <xref uid="stream.Writable" />
  - name: >-
      createWriteStreamToExistingAppendBlob(string, string,
      CreateBlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToExistingAppendBlob
    package: azure-storage
    summary: >+
      Provides a stream to write to an existing append blob. Assumes that the
      blob exists.

      If it does not, please create the blob using createAppendBlob before
      calling this method or use createWriteStreamToNewAppendBlob.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      Please note the `Stream` returned by this API should be used with piping.


      **Example**


      var azure = require('azure-storage');

      var blobService = azure.createBlobService();

      var stream =
      fs.createReadStream(fileNameTarget).pipe(blobService.createWriteStreamToAppendBlob(containerName,
      blobName));

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createWriteStreamToExistingAppendBlob(container: string, blob:
        string, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>): stream.Writable
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |-
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      information about the blob.
                                                                                      `response` will contain information related to this operation.
      return:
        description: A Node.js Writable stream.
        type: <xref uid="stream.Writable" />
  - name: >-
      createWriteStreamToExistingAppendBlob(string, string,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToExistingAppendBlob_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createWriteStreamToExistingAppendBlob(container: string, blob:
        string, callback: ErrorOrResult<BlobResult>): stream.Writable
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: <xref uid="stream.Writable" />
  - name: >-
      createWriteStreamToExistingPageBlob(string, string, CreatePageBlobOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToExistingPageBlob
    package: azure-storage
    summary: >+
      Provides a stream to write to a page blob. Assumes that the blob exists.

      If it does not, please create the blob using createPageBlob before calling
      this method or use createWriteStreamNewPageBlob.

      Please note the `Stream` returned by this API should be used with piping.


      **Example**


      var azure = require('azure-storage');

      var blobService = azure.createBlobService();

      blobService.createPageBlob(containerName, blobName, 1024, function (err) {
        // Pipe file to a blob
        var stream = fs.createReadStream(fileNameTarget).pipe(blobService.createWriteStreamToExistingPageBlob(containerName, blobName));
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createWriteStreamToExistingPageBlob(container: string, blob:
        string, options: CreatePageBlobOptions, callback:
        ErrorOrResult<BlobResult>): stream.Writable
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreatePageBlobOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |-
            `error` will contain information
                                                                                        if an error occurs; otherwise `[result](xref:BlobResult)` will contain
                                                                                        the blob information.
                                                                                        `response` will contain information related to this operation.
      return:
        description: A Node.js Writable stream.
        type: <xref uid="stream.Writable" />
  - name: >-
      createWriteStreamToExistingPageBlob(string, string,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToExistingPageBlob_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createWriteStreamToExistingPageBlob(container: string, blob:
        string, callback: ErrorOrResult<BlobResult>): stream.Writable
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: <xref uid="stream.Writable" />
  - name: >-
      createWriteStreamToNewAppendBlob(string, string, CreateBlobRequestOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToNewAppendBlob
    package: azure-storage
    summary: >+
      Provides a stream to write to a new append blob. If the blob already
      exists on the service, it will be overwritten.

      To avoid overwriting and instead throw an error if the blob exists, please
      pass in an accessConditions parameter in the options object.

      This API should be used strictly in a single writer scenario because the
      API internally uses the append-offset conditional header to avoid
      duplicate blocks.

      If you are guaranteed to have a single writer scenario, please look at
      options.absorbConditionalErrorsOnRetry and see if setting this flag to
      true is acceptable for you.

      Please note the `Stream` returned by this API should be used with piping.


      **Example**


      var azure = require('azure-storage');

      var blobService = azure.createBlobService();

      var stream =
      fs.createReadStream(fileNameTarget).pipe(blobService.createWriteStreamToAppendBlob(containerName,
      blobName));

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createWriteStreamToNewAppendBlob(container: string, blob:
        string, options: CreateBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>): stream.Writable
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreateBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |-
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      information about the blob.
                                                                                      `response` will contain information related to this operation.
      return:
        description: A Node.js Writable stream.
        type: <xref uid="stream.Writable" />
  - name: >-
      createWriteStreamToNewAppendBlob(string, string,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToNewAppendBlob_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createWriteStreamToNewAppendBlob(container: string, blob:
        string, callback: ErrorOrResult<BlobResult>): stream.Writable
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: <xref uid="stream.Writable" />
  - name: >-
      createWriteStreamToNewPageBlob(string, string, number,
      CreatePageBlobOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToNewPageBlob
    package: azure-storage
    summary: >+
      Provides a stream to write to a page blob. Creates the blob before writing
      data.

      Please note the `Stream` returned by this API should be used with piping.


      **Example**


      var azure = require('azure-storage');

      var blobService = azure.createBlobService();

      blobService.createPageBlob(containerName, blobName, 1024, function (err) {
        // Pipe file to a blob
        var stream = fs.createReadStream(fileNameTarget).pipe(blobService.createWriteStreamToNewPageBlob(containerName, blobName));
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createWriteStreamToNewPageBlob(container: string, blob: string,
        length: number, options: CreatePageBlobOptions, callback:
        ErrorOrResult<BlobResult>): stream.Writable
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: length
          type: number
          description: The blob length.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CreatePageBlobOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |-
            `error` will contain information
                                                                                        if an error occurs; otherwise `[result](xref:BlobResult)` will contain
                                                                                        the blob information.
                                                                                        `response` will contain information related to this operation.
      return:
        description: A Node.js Writable stream.
        type: <xref uid="stream.Writable" />
  - name: >-
      createWriteStreamToNewPageBlob(string, string, number,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.createWriteStreamToNewPageBlob_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createWriteStreamToNewPageBlob(container: string, blob: string,
        length: number, callback: ErrorOrResult<BlobResult>): stream.Writable
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: length
          type: number
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: <xref uid="stream.Writable" />
  - name: 'deleteBlob(string, string, DeleteBlobRequestOptions, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteBlob_1
    package: azure-storage
    summary: >-
      Marks the specified blob or snapshot for deletion. The blob is later
      deleted during garbage collection.

      If a blob has snapshots, you must delete them when deleting the blob.
      Using the deleteSnapshots option, you can choose either to delete both the
      blob and its snapshots,

      or to delete only the snapshots but not the blob itself. If the blob has
      snapshots, you must include the deleteSnapshots option or the blob service
      will return an error

      and nothing will be deleted.

      If you are deleting a specific snapshot using the snapshotId option, the
      deleteSnapshots option must NOT be included.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteBlob(container: string, blob: string, options:
        DeleteBlobRequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.DeleteBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                                    if an error occurs; `response` will contain information related to this operation.
  - name: 'deleteBlob(string, string, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteBlob
    package: azure-storage
    summary: >-
      Marks the specified blob or snapshot for deletion. The blob is later
      deleted during garbage collection.

      If a blob has snapshots, you must delete them when deleting the blob.
      Using the deleteSnapshots option, you can choose either to delete both the
      blob and its snapshots,

      or to delete only the snapshots but not the blob itself. If the blob has
      snapshots, you must include the deleteSnapshots option or the blob service
      will return an error

      and nothing will be deleted.

      If you are deleting a specific snapshot using the snapshotId option, the
      deleteSnapshots option must NOT be included.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteBlob(container: string, blob: string, callback:
        ErrorOrResponse)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                                    if an error occurs; `response` will contain information related to this operation.
  - name: >-
      deleteBlobIfExists(string, string, DeleteBlobRequestOptions,
      ErrorOrResult<boolean>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteBlobIfExists_1
    package: azure-storage
    summary: >-
      Marks the specified blob or snapshot for deletion if it exists. The blob
      is later deleted during garbage collection.

      If a blob has snapshots, you must delete them when deleting the blob.
      Using the deleteSnapshots option, you can choose either to delete both the
      blob and its snapshots,

      or to delete only the snapshots but not the blob itself. If the blob has
      snapshots, you must include the deleteSnapshots option or the blob service
      will return an error

      and nothing will be deleted.

      If you are deleting a specific snapshot using the snapshotId option, the
      deleteSnapshots option must NOT be included.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteBlobIfExists(container: string, blob: string, options:
        DeleteBlobRequestOptions, callback: ErrorOrResult<boolean>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.DeleteBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult"
            />&lt;boolean&gt;
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will
                                                                            be true if the blob was deleted, or false if the blob
                                                                            does not exist.
                                                                            `response` will contain information related to this operation.
  - name: 'deleteBlobIfExists(string, string, ErrorOrResult<boolean>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteBlobIfExists
    package: azure-storage
    summary: >-
      Marks the specified blob or snapshot for deletion if it exists. The blob
      is later deleted during garbage collection.

      If a blob has snapshots, you must delete them when deleting the blob.
      Using the deleteSnapshots option, you can choose either to delete both the
      blob and its snapshots,

      or to delete only the snapshots but not the blob itself. If the blob has
      snapshots, you must include the deleteSnapshots option or the blob service
      will return an error

      and nothing will be deleted.

      If you are deleting a specific snapshot using the snapshotId option, the
      deleteSnapshots option must NOT be included.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteBlobIfExists(container: string, blob: string, callback:
        ErrorOrResult<boolean>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult"
            />&lt;boolean&gt;
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will
                                                                            be true if the blob was deleted, or false if the blob
                                                                            does not exist.
                                                                            `response` will contain information related to this operation.
  - name: 'deleteContainer(string, ContainerOptions, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteContainer_1
    package: azure-storage
    summary: >-
      Marks the specified container for deletion.

      The container and any blobs contained within it are later deleted during
      garbage collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteContainer(container: string, options: ContainerOptions,
        callback: ErrorOrResponse)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerOptions"
            />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise
                                                                            `response` will contain information related to this operation.
  - name: 'deleteContainer(string, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteContainer
    package: azure-storage
    summary: >-
      Marks the specified container for deletion.

      The container and any blobs contained within it are later deleted during
      garbage collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteContainer(container: string, callback: ErrorOrResponse)'
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise
                                                                            `response` will contain information related to this operation.
  - name: 'deleteContainerIfExists(string, ContainerOptions, ErrorOrResult<boolean>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteContainerIfExists_1
    package: azure-storage
    summary: >-
      Marks the specified container for deletion if it exists.

      The container and any blobs contained within it are later deleted during
      garbage collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteContainerIfExists(container: string, options:
        ContainerOptions, callback: ErrorOrResult<boolean>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult"
            />&lt;boolean&gt;
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will
                                                                            be true if the container exists and was deleted, or false if the container
                                                                            did not exist.
                                                                            `response` will contain information related to this operation.
  - name: 'deleteContainerIfExists(string, ErrorOrResult<boolean>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.deleteContainerIfExists
    package: azure-storage
    summary: >-
      Marks the specified container for deletion if it exists.

      The container and any blobs contained within it are later deleted during
      garbage collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteContainerIfExists(container: string, callback:
        ErrorOrResult<boolean>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult"
            />&lt;boolean&gt;
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will
                                                                            be true if the container exists and was deleted, or false if the container
                                                                            did not exist.
                                                                            `response` will contain information related to this operation.
  - name: >-
      doesBlobExist(string, string, BlobRequestOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.doesBlobExist_1
    package: azure-storage
    summary: Checks whether or not a blob exists on the service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function doesBlobExist(container: string, blob: string, options:
        BlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                if an error occurs; otherwise `errorOrResult` will
                                                                                be true if the blob exists, or false if the blob does not exist.
                                                                                `response` will contain information related to this operation.
  - name: 'doesBlobExist(string, string, ErrorOrResult<BlobResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.doesBlobExist
    package: azure-storage
    summary: Checks whether or not a blob exists on the service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function doesBlobExist(container: string, blob: string, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                if an error occurs; otherwise `errorOrResult` will
                                                                                be true if the blob exists, or false if the blob does not exist.
                                                                                `response` will contain information related to this operation.
  - name: 'doesContainerExist(string, ErrorOrResult<ContainerResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.doesContainerExist_1
    package: azure-storage
    summary: Checks whether or not a container exists on the service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function doesContainerExist(container: string, callback:
        ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                if an error occurs; otherwise `result` will
                                                                                be true if the container exists, or false if the container does not exist.
                                                                                `response` will contain information related to this operation.
  - name: 'doesContainerExist(string, RequestOptions, ErrorOrResult<ContainerResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.doesContainerExist
    package: azure-storage
    summary: Checks whether or not a container exists on the service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function doesContainerExist(container: string, options: RequestOptions,
        callback: ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                if an error occurs; otherwise `result` will
                                                                                be true if the container exists, or false if the container does not exist.
                                                                                `response` will contain information related to this operation.
  - name: generateBlockIdPrefix()
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.generateBlockIdPrefix
    package: azure-storage
    summary: Generate a random block id prefix
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function generateBlockIdPrefix(): string'
      return:
        description: ''
        type: string
  - name: >-
      generateSharedAccessSignature(string, string, SharedAccessPolicy,
      ContentSettingsHeaders)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.generateSharedAccessSignature
    package: azure-storage
    summary: Retrieves a shared access signature token.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function generateSharedAccessSignature(container: string, blob: string,
        sharedAccessPolicy: SharedAccessPolicy, headers?:
        ContentSettingsHeaders): string
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: ''
        - id: sharedAccessPolicy
          type: <xref uid="azure-storage.azurestorage.common.SharedAccessPolicy" />
          description: The shared access policy.
        - id: headers
          type: >-
            <xref uid="azure-storage.azurestorage.common.ContentSettingsHeaders"
            />
          description: ''
      return:
        description: >-
          The shared access signature. Note this does not contain the leading
          "?".
        type: string
  - name: >-
      generateSharedAccessSignatureWithVersion(string, string,
      SharedAccessPolicy, string, ContentSettingsHeaders)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.generateSharedAccessSignatureWithVersion
    package: azure-storage
    summary: Retrieves a shared access signature token.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function generateSharedAccessSignatureWithVersion(container: string,
        blob: string, sharedAccessPolicy: SharedAccessPolicy, sasVersion:
        string, headers?: ContentSettingsHeaders): string
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: ''
        - id: sharedAccessPolicy
          type: <xref uid="azure-storage.azurestorage.common.SharedAccessPolicy" />
          description: The shared access policy.
        - id: sasVersion
          type: string
          description: ''
        - id: headers
          type: >-
            <xref uid="azure-storage.azurestorage.common.ContentSettingsHeaders"
            />
          description: ''
      return:
        description: >-
          The shared access signature query string. Note this string does not
          contain the leading "?".
        type: string
  - name: 'getAccountProperties(string, string, ErrorOrResult<AccountProperties>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getAccountProperties_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAccountProperties(container?: string, blob?: string,
        callback?: ErrorOrResult<AccountProperties>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.common.models.AccountProperties"
            />&gt;
          description: ''
  - name: >-
      getAccountProperties(string, string, RequestOptions,
      ErrorOrResult<AccountProperties>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getAccountProperties
    package: azure-storage
    summary: Gets the properties of a storage account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAccountProperties(container?: string, blob?: string,
        options?: RequestOptions, callback?: ErrorOrResult<AccountProperties>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.common.models.AccountProperties"
            />&gt;
          description: >
            `error` will contain information if an error occurs; otherwise,
            `[result](xref:AccountProperties)` will contain the properties
                                                                          and `response` will contain information related to this operation.
  - name: >-
      getBlobMetadata(string, string, BlobRequestOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobMetadata
    package: azure-storage
    summary: |-
      Returns all user-defined metadata for the specified blob or snapshot.
      It does not modify or return the content of the blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlobMetadata(container: string, blob: string, options:
        BlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information about the blob.
                                                                                    `response` will contain information related to this operation.
  - name: 'getBlobMetadata(string, string, ErrorOrResult<BlobResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobMetadata_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlobMetadata(container: string, blob: string, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
  - name: >-
      getBlobProperties(string, string, BlobRequestOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobProperties_1
    package: azure-storage
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties for the blob.

      It does not return or modify the content of the blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlobProperties(container: string, blob: string,
        optionsOrCallback: BlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: optionsOrCallback
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information about the blob.
                                                                                    `response` will contain information related to this operation.
  - name: 'getBlobProperties(string, string, ErrorOrResult<BlobResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobProperties
    package: azure-storage
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties for the blob.

      It does not return or modify the content of the blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlobProperties(container: string, blob: string, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information about the blob.
                                                                                    `response` will contain information related to this operation.
  - name: 'getBlobToLocalFile(string, string, string, ErrorOrResult<BlobResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToLocalFile_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlobToLocalFile(container: string, blob: string,
        localFileName: string, callback: ErrorOrResult<BlobResult>):
        SpeedSummary
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: localFileName
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      getBlobToLocalFile(string, string, string, GetBlobRequestOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToLocalFile
    package: azure-storage
    summary: >+
      Downloads a blob into a file.


      **Example**


      var azure = require('azure-storage');

      var blobService = azure.createBlobService();

      blobService.getBlobToLocalFile('taskcontainer', 'task1',
      'task1-download.txt', function(error, serverBlob) {
        if(!error) {
          // Blob available in serverBlob.blob variable
        }

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlobToLocalFile(container: string, blob: string,
        localFileName: string, options: GetBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: localFileName
          type: string
          description: The local path to the file to be downloaded.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.GetBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain the blob information.
                                                                                    `response` will contain information related to this operation.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      getBlobToStream(string, string, stream.Writable,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToStream
    package: azure-storage
    summary: >+
      Downloads a blob into a stream.


      **Example**


      var azure = require('azure-storage');

      var blobService = azure.createBlobService();

      blobService.getBlobToStream('taskcontainer', 'task1',
      fs.createWriteStream('task1-download.txt'), function(error, serverBlob) {
        if(!error) {
          // Blob available in serverBlob.blob variable
        }
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlobToStream(container: string, blob: string, writeStream:
        stream.Writable, callback: ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: writeStream
          type: <xref uid="stream.Writable" />
          description: The Node.js Writable stream.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |-
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain the blob information.
                                                                                    `response` will contain information related to this operation.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: >-
      getBlobToStream(string, string, stream.Writable, GetBlobRequestOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToStream_1
    package: azure-storage
    summary: >+
      Downloads a blob into a stream.


      **Example**


      var azure = require('azure-storage');

      var blobService = azure.createBlobService();

      blobService.getBlobToStream('taskcontainer', 'task1',
      fs.createWriteStream('task1-download.txt'), function(error, serverBlob) {
        if(!error) {
          // Blob available in serverBlob.blob variable
        }
      });

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlobToStream(container: string, blob: string, writeStream:
        stream.Writable, options: GetBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>): SpeedSummary
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: writeStream
          type: <xref uid="stream.Writable" />
          description: The Node.js Writable stream.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.GetBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information if an error occurs;
                                                                                    otherwise `result` will contain the blob information.
                                                                                    `response` will contain information related to this operation.
      return:
        description: ''
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.streams.speedsummary.SpeedSummary"
          />
  - name: 'getBlobToText(string, string, BlobToText)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToText_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlobToText(container: string, blob: string, callback:
        BlobToText)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: callback
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobToText"
            />
          description: ''
  - name: 'getBlobToText(string, string, GetBlobRequestOptions, BlobToText)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlobToText
    package: azure-storage
    summary: Downloads a blob into a text string.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlobToText(container: string, blob: string, options:
        GetBlobRequestOptions, callback: BlobToText)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.GetBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobToText"
            />
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `text` will contain the blob contents,
                                                                                    and `blockBlob` will contain
                                                                                    the blob information.
                                                                                    `response` will contain information related to this operation.
  - name: 'getBlockId(string, number | string)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getBlockId
    package: azure-storage
    summary: Get a block id according to prefix and block number
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getBlockId(prefix: string, number: number | string): string'
      parameters:
        - id: prefix
          type: string
          description: ''
        - id: number
          type: number | string
          description: ''
      return:
        description: ''
        type: string
  - name: >-
      getContainerAcl(string, ContainerOptions,
      ErrorOrResult<ContainerAclResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerAcl_1
    package: azure-storage
    summary: Gets the container's ACL.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getContainerAcl(container: string, options: ContainerOptions,
        callback: ErrorOrResult<ContainerAclResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerAclResult"
            />&gt;
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            information for the container.
                                                                            `response` will contain information related to this operation.
  - name: 'getContainerAcl(string, ErrorOrResult<ContainerAclResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerAcl
    package: azure-storage
    summary: Gets the container's ACL.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getContainerAcl(container: string, callback:
        ErrorOrResult<ContainerAclResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerAclResult"
            />&gt;
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            information for the container.
                                                                            `response` will contain information related to this operation.
  - name: >-
      getContainerMetadata(string, ContainerOptions,
      ErrorOrResult<ContainerResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerMetadata_1
    package: azure-storage
    summary: Returns all user-defined metadata for the container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getContainerMetadata(container: string, options:
        ContainerOptions, callback: ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will contain
                                                                                  information for the container.
                                                                                  `response` will contain information related to this operation.
  - name: 'getContainerMetadata(string, ErrorOrResult<ContainerResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerMetadata
    package: azure-storage
    summary: Returns all user-defined metadata for the container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getContainerMetadata(container: string, callback:
        ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will contain
                                                                                  information for the container.
                                                                                  `response` will contain information related to this operation.
  - name: >-
      getContainerProperties(string, ContainerOptions,
      ErrorOrResult<ContainerResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerProperties_1
    package: azure-storage
    summary: Retrieves a container and its properties from a specified account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getContainerProperties(container: string, options:
        ContainerOptions, callback: ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult"
            />&gt;
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            information for the container.
                                                                            `response` will contain information related to this operation.
  - name: 'getContainerProperties(string, ErrorOrResult<ContainerResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getContainerProperties
    package: azure-storage
    summary: Retrieves a container and its properties from a specified account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getContainerProperties(container: string, callback:
        ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult"
            />&gt;
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain
                                                                            information for the container.
                                                                            `response` will contain information related to this operation.
  - name: 'getPageRangesDiff(string, string, string, ErrorOrResult<RangeDiff[]>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getPageRangesDiff_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPageRangesDiff(container: string, blob: string,
        previousSnapshotTime: string, callback: ErrorOrResult<RangeDiff[]>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: previousSnapshotTime
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.common.RangeDiff" />[]&gt;
          description: ''
  - name: >-
      getPageRangesDiff(string, string, string, GetBlobRequestOptions,
      ErrorOrResult<RangeDiff[]>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getPageRangesDiff
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPageRangesDiff(container: string, blob: string,
        previousSnapshotTime: string, options: GetBlobRequestOptions, callback:
        ErrorOrResult<RangeDiff[]>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: previousSnapshotTime
          type: string
          description: ''
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.GetBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.common.RangeDiff" />[]&gt;
          description: ''
  - name: getServiceProperties(ErrorOrResult<BlobServiceProperties>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getServiceProperties_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getServiceProperties(callback?:
        ErrorOrResult<BlobServiceProperties>)
      parameters:
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.common.models.ServicePropertiesResult.BlobServiceProperties"
            />&gt;
          description: ''
  - name: 'getServiceProperties(RequestOptions, ErrorOrResult<BlobServiceProperties>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getServiceProperties
    package: azure-storage
    summary: >-
      Gets the properties of a storage account’s Blob service, including Azure
      Storage Analytics.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getServiceProperties(options: RequestOptions, callback?:
        ErrorOrResult<BlobServiceProperties>)
      parameters:
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.common.models.ServicePropertiesResult.BlobServiceProperties"
            />&gt;
          description: >
            `error` will contain information if an error occurs; otherwise,
            `result` will contain the properties
                                                                          and `response` will contain information related to this operation.
  - name: getServiceStats(ErrorOrResult<ServiceStats>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getServiceStats_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getServiceStats(callback: ErrorOrResult<ServiceStats>)'
      parameters:
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.common.models.ServiceStats" />&gt;
          description: ''
  - name: 'getServiceStats(RequestOptions, ErrorOrResult<ServiceStats>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.getServiceStats
    package: azure-storage
    summary: Gets the service stats for a storage account’s Blob service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getServiceStats(options: RequestOptions, callback:
        ErrorOrResult<ServiceStats>)
      parameters:
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.common.models.ServiceStats" />&gt;
          description: >
            `error` will contain information if an error occurs; otherwise,
            `result` will contain the stats and
                                                                          `response` will contain information related to this operation.
  - name: 'getUrl(string, string, string, boolean, string)'
    uid: azure-storage.azurestorage.services.blob.blobservice.BlobService.getUrl
    package: azure-storage
    summary: >+
      Retrieves a blob or container URL.


      **Example**


      var azure = require('azure-storage');

      var blobService = azure.createBlobService();

      //create a SAS that expires in an hour

      var sasToken = blobService.generateSharedAccessSignature(containerName,
      blobName, { AccessPolicy: { Expiry: azure.date.minutesFromNow(60); } });

      var sasUrl = blobService.getUrl(containerName, blobName, sasToken, true);

    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getUrl(container: string, blob?: string, sasToken?: string,
        primary?: boolean, snapshotId?: string): string
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: ''
        - id: sasToken
          type: string
          description: ''
        - id: primary
          type: boolean
          description: ''
        - id: snapshotId
          type: string
          description: ''
      return:
        description: The formatted URL string.
        type: string
  - name: >-
      listBlobDirectoriesSegmented(string, ContinuationToken,
      ErrorOrResult<ListBlobDirectoriesResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobDirectoriesSegmented
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of blob directory items in the
      container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobDirectoriesSegmented(container: string, currentToken:
        ContinuationToken, callback: ErrorOrResult<ListBlobDirectoriesResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobDirectoriesResult"
            />&gt;
          description: |
            `error` will contain information
                                                                          if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                          `entries`  gives a list of `[directories](xref:BlobDirectoryResult)` and the `continuationToken` is used for the next listing operation.
                                                                          `response` will contain information related to this operation.
  - name: >-
      listBlobDirectoriesSegmented(string, ContinuationToken,
      ListBlobPrefixesSegmentedRequestOptions,
      ErrorOrResult<ListBlobDirectoriesResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobDirectoriesSegmented_1
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of blob directory items in the
      container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobDirectoriesSegmented(container: string, currentToken:
        ContinuationToken, options: ListBlobPrefixesSegmentedRequestOptions,
        callback: ErrorOrResult<ListBlobDirectoriesResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobPrefixesSegmentedRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobDirectoriesResult"
            />&gt;
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                            `entries`  gives a list of `[directories](xref:BlobDirectoryResult)` and the `continuationToken` is used for the next listing operation.
                                                                            `response` will contain information related to this operation.
  - name: >-
      listBlobDirectoriesSegmentedWithPrefix(string, string, ContinuationToken,
      ErrorOrResult<ListBlobDirectoriesResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobDirectoriesSegmentedWithPrefix
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of blob directory items whose
      names begin with the specified prefix in the container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobDirectoriesSegmentedWithPrefix(container: string,
        prefix: string, currentToken: ContinuationToken, callback:
        ErrorOrResult<ListBlobDirectoriesResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: prefix
          type: string
          description: The prefix of the blob name.
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobDirectoriesResult"
            />&gt;
          description: |
            `error` will contain information
                                                                          if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                          `entries`  gives a list of `[directories](xref:BlobDirectoryResult)` and the `continuationToken` is used for the next listing operation.
                                                                          `response` will contain information related to this operation.
  - name: >-
      listBlobDirectoriesSegmentedWithPrefix(string, string, ContinuationToken,
      ListBlobPrefixesSegmentedRequestOptions,
      ErrorOrResult<ListBlobDirectoriesResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobDirectoriesSegmentedWithPrefix_1
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of blob directory items whose
      names begin with the specified prefix in the container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobDirectoriesSegmentedWithPrefix(container: string,
        prefix: string, currentToken: ContinuationToken, options:
        ListBlobPrefixesSegmentedRequestOptions, callback:
        ErrorOrResult<ListBlobDirectoriesResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: prefix
          type: string
          description: The prefix of the blob directory.
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobPrefixesSegmentedRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobDirectoriesResult"
            />&gt;
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                            `entries`  gives a list of `[directories](xref:BlobDirectoryResult)` and the `continuationToken` is used for the next listing operation.
                                                                            `response` will contain information related to this operation.
  - name: >-
      listBlobsSegmented(string, ContinuationToken,
      ErrorOrResult<ListBlobsResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobsSegmented
    package: azure-storage
    summary: Lists a segment containing a collection of blob items in the container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobsSegmented(container: string, currentToken:
        ContinuationToken, callback: ErrorOrResult<ListBlobsResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsResult"
            />&gt;
          description: |
            `error` will contain information
                                                                          if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                          `entries`  gives a list of blobs and the `continuationToken` is used for the next listing operation.
                                                                          `response` will contain information related to this operation.
  - name: >-
      listBlobsSegmented(string, ContinuationToken,
      ListBlobsSegmentedRequestOptions, ErrorOrResult<ListBlobsResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobsSegmented_1
    package: azure-storage
    summary: Lists a segment containing a collection of blob items in the container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobsSegmented(container: string, currentToken:
        ContinuationToken, options: ListBlobsSegmentedRequestOptions, callback:
        ErrorOrResult<ListBlobsResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsSegmentedRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsResult"
            />&gt;
          description: |
            `error` will contain information
                                                                          if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                          `entries`  gives a list of blobs and the `continuationToken` is used for the next listing operation.
                                                                          `response` will contain information related to this operation.
  - name: >-
      listBlobsSegmentedWithPrefix(string, string, ContinuationToken,
      ErrorOrResult<ListBlobsResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobsSegmentedWithPrefix
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of blob items whose names begin
      with the specified prefix in the container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobsSegmentedWithPrefix(container: string, prefix: string,
        currentToken: ContinuationToken, callback:
        ErrorOrResult<ListBlobsResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: prefix
          type: string
          description: The prefix of the blob name.
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsResult"
            />&gt;
          description: |
            `error` will contain information
                                                                          if an error occurs; otherwise `result` will contain
                                                                          the entries of blobs and the continuation token for the next listing operation.
                                                                          `response` will contain information related to this operation.
  - name: >-
      listBlobsSegmentedWithPrefix(string, string, ContinuationToken,
      ListBlobsSegmentedRequestOptions, ErrorOrResult<ListBlobsResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlobsSegmentedWithPrefix_1
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of blob items whose names begin
      with the specified prefix in the container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobsSegmentedWithPrefix(container: string, prefix: string,
        currentToken: ContinuationToken, options:
        ListBlobsSegmentedRequestOptions, callback:
        ErrorOrResult<ListBlobsResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: prefix
          type: string
          description: The prefix of the blob name.
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsSegmentedRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListBlobsResult"
            />&gt;
          description: |
            `error` will contain information
                                                                          if an error occurs; otherwise `result` will contain
                                                                          the entries of blobs and the continuation token for the next listing operation.
                                                                          `response` will contain information related to this operation.
  - name: >-
      listBlocks(string, string, string, BlobRequestOptions,
      ErrorOrResult<BlockListResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlocks
    package: azure-storage
    summary: >-
      Retrieves the list of blocks that have been uploaded as part of a block
      blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlocks(container: string, blob: string, blocklisttype:
        string, options: BlobRequestOptions, callback:
        ErrorOrResult<BlockListResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: blocklisttype
          type: string
          description: The type of block list to retrieve.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlockListResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the blocklist information.
                                                                                    `response` will contain information related to this operation.
  - name: 'listBlocks(string, string, string, ErrorOrResult<BlockListResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listBlocks_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlocks(container: string, blob: string, blocklisttype:
        string, callback: ErrorOrResult<BlockListResult>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: blocklisttype
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlockListResult"
            />&gt;
          description: ''
  - name: >-
      listContainersSegmented(ContinuationToken,
      ErrorOrResult<ListContainerResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listContainersSegmented_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listContainersSegmented(currentToken: ContinuationToken,
        callback: ErrorOrResult<ListContainerResult>)
      parameters:
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerResult"
            />&gt;
          description: ''
  - name: >-
      listContainersSegmented(ContinuationToken, ListContainerOptions,
      ErrorOrResult<ListContainerResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listContainersSegmented
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of container items under the
      specified account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listContainersSegmented(currentToken: ContinuationToken,
        options: ListContainerOptions, callback:
        ErrorOrResult<ListContainerResult>)
      parameters:
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                                    `entries`  gives a list of containers and the `continuationToken` is used for the next listing operation.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      listContainersSegmentedWithPrefix(string, ContinuationToken,
      ErrorOrResult<ListContainerResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listContainersSegmentedWithPrefix_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listContainersSegmentedWithPrefix(prefix: string, currentToken:
        ContinuationToken, callback: ErrorOrResult<ListContainerResult>)
      parameters:
        - id: prefix
          type: string
          description: ''
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerResult"
            />&gt;
          description: ''
  - name: >-
      listContainersSegmentedWithPrefix(string, ContinuationToken,
      ListContainerOptions, ErrorOrResult<ListContainerResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listContainersSegmentedWithPrefix
    package: azure-storage
    summary: >-
      Lists a segment containing a collection of container items whose names
      begin with the specified prefix under the specified account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listContainersSegmentedWithPrefix(prefix: string, currentToken:
        ContinuationToken, options: ListContainerOptions, callback:
        ErrorOrResult<ListContainerResult>)
      parameters:
        - id: prefix
          type: string
          description: The prefix of the container name.
        - id: currentToken
          type: <xref uid="azure-storage.azurestorage.common.ContinuationToken" />
          description: >-
            A continuation token returned by a previous listing operation.
            Please use 'null' or 'undefined' if this is the first operation.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ListContainerResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain `entries` and `continuationToken`.
                                                                                    `entries`  gives a list of containers and the `continuationToken` is used for the next listing operation.
                                                                                    `response` will contain information related to this operation.
  - name: 'listPageRanges(string, string, ErrorOrResult<Range[]>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listPageRanges_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listPageRanges(container: string, blob: string, callback:
        ErrorOrResult<Range[]>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.common.Range" />[]&gt;
          description: ''
  - name: >-
      listPageRanges(string, string, GetBlobRequestOptions,
      ErrorOrResult<Range[]>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.listPageRanges
    package: azure-storage
    summary: >-
      Lists page ranges. Lists all of the page ranges by default, or only the
      page ranges over a specific range of bytes if rangeStart and rangeEnd are
      specified.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listPageRanges(container: string, blob: string, options:
        GetBlobRequestOptions, callback: ErrorOrResult<Range[]>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.GetBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.common.Range" />[]&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the page range information.
                                                                                    `response` will contain information related to this operation.
  - name: 'releaseLease(string, string, string, ErrorOrResult<LeaseResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.releaseLease
    package: azure-storage
    summary: >-
      Releases the lease. If container and blob are specified, releases the blob
      lease. Otherwise, if only container is specified and blob is null,
      releases the container lease.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function releaseLease(container: string, blob: string, leaseId: string,
        callback: ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: leaseId
          type: string
          description: The lease identifier.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      releaseLease(string, string, string, LeaseRequestOptions,
      ErrorOrResult<LeaseResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.releaseLease_1
    package: azure-storage
    summary: >-
      Releases the lease. If container and blob are specified, releases the blob
      lease. Otherwise, if only container is specified and blob is null,
      releases the container lease.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function releaseLease(container: string, blob: string, leaseId: string,
        options: LeaseRequestOptions, callback: ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: leaseId
          type: string
          description: The lease identifier.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
  - name: 'renewLease(string, string, string, ErrorOrResult<LeaseResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.renewLease
    package: azure-storage
    summary: >-
      Renews an existing lease. If container and blob are specified, renews the
      blob lease. Otherwise, if only container is specified and blob is null,
      renews the container lease.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function renewLease(container: string, blob: string, leaseId: string,
        callback: ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: leaseId
          type: string
          description: The lease identifier. Must be a GUID.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      renewLease(string, string, string, LeaseRequestOptions,
      ErrorOrResult<LeaseResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.renewLease_1
    package: azure-storage
    summary: >-
      Renews an existing lease. If container and blob are specified, renews the
      blob lease. Otherwise, if only container is specified and blob is null,
      renews the container lease.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function renewLease(container: string, blob: string, leaseId: string,
        options: LeaseRequestOptions, callback: ErrorOrResult<LeaseResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: leaseId
          type: string
          description: The lease identifier. Must be a GUID.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.LeaseResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    the lease information.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      resizePageBlob(string, string, number, BlobRequestOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.resizePageBlob
    package: azure-storage
    summary: Resizes a page blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function resizePageBlob(container: string, blob: string, size: number,
        options: BlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: size
          type: number
          description: 'The size of the page blob, in bytes.'
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      information about the blob.
                                                                                      `response` will contain information related to this operation.
  - name: 'resizePageBlob(string, string, number, ErrorOrResult<BlobResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.resizePageBlob_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function resizePageBlob(container: string, blob: string, size: number,
        callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: size
          type: number
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
  - name: >-
      setBlobMetadata(string, string, Map<string>, BlobRequestOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobMetadata_1
    package: azure-storage
    summary: >-
      Sets user-defined metadata for the specified blob or snapshot as one or
      more name-value pairs

      It does not modify or return the content of the blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setBlobMetadata(container: string, blob: string, metadata:
        Map<string>, options: BlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: metadata
          type: <xref uid="azure-storage.Map" />&lt;string&gt;
          description: The metadata key/value pairs.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information on the blob.
                                                                                    `response` will contain information related to this operation.
  - name: 'setBlobMetadata(string, string, Map<string>, ErrorOrResult<BlobResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobMetadata
    package: azure-storage
    summary: >-
      Sets user-defined metadata for the specified blob or snapshot as one or
      more name-value pairs

      It does not modify or return the content of the blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setBlobMetadata(container: string, blob: string, metadata:
        Map<string>, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: metadata
          type: <xref uid="azure-storage.Map" />&lt;string&gt;
          description: The metadata key/value pairs.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information on the blob.
                                                                                    `response` will contain information related to this operation.
  - name: 'setBlobProperties(string, string, ErrorOrResult<BlobResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobProperties
    package: azure-storage
    summary: |-
      Clears user-defined properties for the specified blob or snapshot.
      It does not modify or return the content of the blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setBlobProperties(container: string, blob: string, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information about the blob.
                                                                                    `response` will contain information related to this operation.
  - name: >-
      setBlobProperties(string, string, SetBlobPropertiesRequestOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobProperties_1
    package: azure-storage
    summary: |-
      Sets user-defined properties for the specified blob or snapshot.
      It does not modify or return the content of the blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setBlobProperties(container: string, blob: string,
        optionsOrCallback: SetBlobPropertiesRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: optionsOrCallback
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.SetBlobPropertiesRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                    if an error occurs; otherwise `result` will contain
                                                                                    information about the blob.
                                                                                    `response` will contain information related to this operation.
  - name: 'setBlobTier(string, string, string, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobTier_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setBlobTier(container: string, blob: string, blobTier: string,
        callback: ErrorOrResponse)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: blobTier
          type: string
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: ''
  - name: 'setBlobTier(string, string, string, RequestOptions, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setBlobTier
    package: azure-storage
    summary: >-
      Sets the tier of a blockblob under a blob storage LRS account, or the tier
      of a pageblob under a premium storage account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setBlobTier(container: string, blob: string, blobTier: string,
        options: RequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: blobTier
          type: string
          description: >-
            Please see BlobUtilities.BlobTier.StandardBlobTier or
            BlobUtilities.BlobTier.PremiumPageBlobTier for possible values.
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                                 if an error occurs; otherwise, `response`
                                                                                 will contain information related to this operation.
  - name: >-
      setContainerAcl(string, [key: string]: AccessPolicy, ContainerAclOptions,
      ErrorOrResult<ContainerAclResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setContainerAcl
    package: azure-storage
    summary: Updates the container's ACL.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setContainerAcl(container: string, signedIdentifiers: [key:
        string]: AccessPolicy, options: ContainerAclOptions, callback:
        ErrorOrResult<ContainerAclResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: signedIdentifiers
          type: >-
            [key: string]\: <xref
            uid="azure-storage.azurestorage.common.AccessPolicy" />
          description: >-
            The container ACL settings. See `[AccessPolicy](xref:AccessPolicy)`
            for detailed information.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerAclOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerAclResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                        if an error occurs; otherwise `result` will contain
                                                                                        information for the container.
                                                                                        `response` will contain information related to this operation.
  - name: >-
      setContainerAcl(string, [key: string]: AccessPolicy,
      ErrorOrResult<ContainerAclResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setContainerAcl_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setContainerAcl(container: string, signedIdentifiers: [key:
        string]: AccessPolicy, callback: ErrorOrResult<ContainerAclResult>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: signedIdentifiers
          type: >-
            [key: string]\: <xref
            uid="azure-storage.azurestorage.common.AccessPolicy" />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerAclResult"
            />&gt;
          description: ''
  - name: >-
      setContainerMetadata(string, Map<string>, ContainerOptions,
      ErrorOrResult<ContainerResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setContainerMetadata_1
    package: azure-storage
    summary: >
      Sets the container's metadata.

      Calling the Set Container Metadata operation overwrites all existing
      metadata that is associated with the container.

      It's not possible to modify an individual name/value pair.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setContainerMetadata(container: string, metadata: Map<string>,
        options: ContainerOptions, callback: ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: metadata
          type: <xref uid="azure-storage.Map" />&lt;string&gt;
          description: The metadata key/value pairs.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult"
            />&gt;
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise
                                                                            `response` will contain information related to this operation.
  - name: 'setContainerMetadata(string, Map<string>, ErrorOrResult<ContainerResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setContainerMetadata
    package: azure-storage
    summary: >
      Sets the container's metadata.

      Calling the Set Container Metadata operation overwrites all existing
      metadata that is associated with the container.

      It's not possible to modify an individual name/value pair.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setContainerMetadata(container: string, metadata: Map<string>,
        callback: ErrorOrResult<ContainerResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: metadata
          type: <xref uid="azure-storage.Map" />&lt;string&gt;
          description: The metadata key/value pairs.
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ContainerResult"
            />&gt;
          description: |
            `error` will contain information
                                                                            if an error occurs; otherwise
                                                                            `response` will contain information related to this operation.
  - name: >-
      setPageBlobSequenceNumber(string, string, string, number,
      BlobRequestOptions, ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setPageBlobSequenceNumber
    package: azure-storage
    summary: Sets the page blob's sequence number.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setPageBlobSequenceNumber(container: string, blob: string,
        sequenceNumberAction: string, sequenceNumber: number, options:
        BlobRequestOptions, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: sequenceNumberAction
          type: string
          description: |-
            A value indicating the operation to perform on the sequence number.
                                                                                      The allowed values are defined in azure.BlobUtilities.SequenceNumberAction.
        - id: sequenceNumber
          type: number
          description: >-
            The sequence number.  The value of the sequence number must be
            between 0 and 2^63 - 1.
                                                                                      Set this parameter to null if this operation is an increment action.
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                      if an error occurs; otherwise `result` will contain
                                                                                      information about the blob.
                                                                                      `response` will contain information related to this operation.
  - name: >-
      setPageBlobSequenceNumber(string, string, string, number,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setPageBlobSequenceNumber_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setPageBlobSequenceNumber(container: string, blob: string,
        sequenceNumberAction: string, sequenceNumber: number, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: sequenceNumberAction
          type: string
          description: ''
        - id: sequenceNumber
          type: number
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
  - name: 'setServiceProperties(BlobServiceProperties, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setServiceProperties_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setServiceProperties(serviceProperties: BlobServiceProperties,
        callback: ErrorOrResponse)
      parameters:
        - id: serviceProperties
          type: >-
            <xref
            uid="azure-storage.azurestorage.common.models.ServicePropertiesResult.BlobServiceProperties"
            />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: ''
  - name: >-
      setServiceProperties(BlobServiceProperties, RequestOptions,
      ErrorOrResponse)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.setServiceProperties
    package: azure-storage
    summary: >-
      Sets the properties of a storage account’s Blob service, including Azure
      Storage Analytics.

      You can also use this operation to set the default request version for all
      incoming requests that do not have a version specified.

      When you set blob service properties (such as enabling soft delete), it
      may take up to 30 seconds to take effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setServiceProperties(serviceProperties: BlobServiceProperties,
        options: RequestOptions, callback: ErrorOrResponse)
      parameters:
        - id: serviceProperties
          type: >-
            <xref
            uid="azure-storage.azurestorage.common.models.ServicePropertiesResult.BlobServiceProperties"
            />
          description: The service properties.
        - id: options
          type: <xref uid="azure-storage.azurestorage.common.RequestOptions" />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                                 if an error occurs; otherwise, `response`
                                                                                 will contain information related to this operation.
  - name: >-
      startCopyBlob(string, string, string, CopyBlobRequestOptions,
      ErrorOrResult<BlobResult>)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.startCopyBlob
    package: azure-storage
    summary: >
      Starts to copy a blob or an Azure Storage file to a destination blob.

      For an asynchronous copy(by default), this operation returns a object
      including a copy ID which

      you can use to check or abort the copy operation. The Blob service copies
      blobs on a best-effort basis.

      The source blob for an asynchronous copy operation may be a block blob, an
      append blob,

      a page blob or an Azure Storage file.


      Refer to
      https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob for
      more details.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function startCopyBlob(sourceUri: string, targetcontainer: string,
        targetblob: string, options: CopyBlobRequestOptions, callback:
        ErrorOrResult<BlobResult>)
      parameters:
        - id: sourceUri
          type: string
          description: The source blob URI.
        - id: targetcontainer
          type: string
          description: ''
        - id: targetblob
          type: string
          description: ''
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.CopyBlobRequestOptions"
            />
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: |
            `error` will contain information
                                                                                  if an error occurs; otherwise `result` will contain
                                                                                  the blob information.
                                                                                  `response` will contain information related to this operation.
  - name: 'startCopyBlob(string, string, string, ErrorOrResult<BlobResult>)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.startCopyBlob_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function startCopyBlob(sourceUri: string, targetcontainer: string,
        targetblob: string, callback: ErrorOrResult<BlobResult>)
      parameters:
        - id: sourceUri
          type: string
          description: ''
        - id: targetcontainer
          type: string
          description: ''
        - id: targetblob
          type: string
          description: ''
        - id: callback
          type: >-
            <xref uid="azure-storage.azurestorage.ErrorOrResult" />&lt;<xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.BlobResult"
            />&gt;
          description: ''
  - name: 'undeleteBlob(string, string, ConditionalRequestOption, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.undeleteBlob_1
    package: azure-storage
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function undeleteBlob(container: string, blob: string, options:
        ConditionalRequestOption, callback: ErrorOrResponse)
      parameters:
        - id: container
          type: string
          description: ''
        - id: blob
          type: string
          description: ''
        - id: options
          type: >-
            <xref
            uid="azure-storage.azurestorage.services.blob.blobservice.BlobService.ConditionalRequestOption"
            />
          description: ''
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: ''
  - name: 'undeleteBlob(string, string, ErrorOrResponse)'
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.undeleteBlob
    package: azure-storage
    summary: >-
      The undelete Blob operation restores the contents and metadata of soft
      deleted blob or snapshot.

      Attempting to undelete a blob or snapshot that is not soft deleted will
      succeed without any changes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function undeleteBlob(container: string, blob: string, callback:
        ErrorOrResponse)
      parameters:
        - id: container
          type: string
          description: The container name.
        - id: blob
          type: string
          description: The blob name.
        - id: callback
          type: <xref uid="azure-storage.azurestorage.ErrorOrResponse" />
          description: |
            `error` will contain information
                                                                                    if an error occurs; `response` will contain information related to this operation.
  - name: withFilter(IFilter)
    uid: >-
      azure-storage.azurestorage.services.blob.blobservice.BlobService.withFilter
    package: azure-storage
    summary: >
      Associate a filtering operation with this BlobService. Filtering
      operations

      can include logging, automatically retrying, etc. Filter operations are
      objects

      that implement a method with the signature:
          "function handle (requestOptions, next)".

      After doing its preprocessing on the request options, the method needs to
      call

      "next" passing a callback with the following signature:

      signature:

          "function (returnObject, finalCallback, next)"

      In this callback, and after processing the returnObject (the response from
      the

      request to the server), the callback needs to either invoke next if it
      exists to

      continue processing other filters or simply invoke finalCallback otherwise
      to end

      up the service invocation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function withFilter(newFilter: IFilter): BlobService'
      parameters:
        - id: newFilter
          type: <xref uid="azure-storage.azurestorage.common.filters.IFilter" />
          description: ''
      return:
        description: A new service client with the filter applied.
        type: >-
          <xref
          uid="azure-storage.azurestorage.services.blob.blobservice.BlobService"
          />
extends: >-
  <xref
  uid="azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient"
  />
