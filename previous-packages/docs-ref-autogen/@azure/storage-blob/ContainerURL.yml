### YamlMime:TSType
name: ContainerURL
uid: '@azure/storage-blob.ContainerURL'
package: '@azure/storage-blob'
summary: >-
  A ContainerURL represents a URL to the Azure Storage container allowing you to
  manipulate its blobs.
fullName: ContainerURL
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'ContainerURL(string, Pipeline)'
    uid: '@azure/storage-blob.ContainerURL.constructor'
    package: '@azure/storage-blob'
    summary: Creates an instance of ContainerURL.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new ContainerURL(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage blob container, such as
                                "https://myaccount.blob.core.windows.net/mycontainer". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.blob.core.windows.net/mycontainer?sasString".
        - id: pipeline
          type: <xref uid="@azure/storage-blob.Pipeline" />
          description: |-
            Call StorageURL.newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
inheritedProperties:
  - name: credential
    uid: '@azure/storage-blob.ContainerURL.credential'
    package: '@azure/storage-blob'
    summary: Credential used for authentication and authorization.
    fullName: credential
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'credential: Credential'
      return:
        description: ''
        type: <xref uid="@azure/storage-blob.Credential" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageURL.credential](xref:@azure/storage-blob.StorageURL.credential)
  - name: pipeline
    uid: '@azure/storage-blob.ContainerURL.pipeline'
    package: '@azure/storage-blob'
    summary: Request policy pipeline.
    fullName: pipeline
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'pipeline: Pipeline'
      return:
        description: ''
        type: <xref uid="@azure/storage-blob.Pipeline" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageURL.pipeline](xref:@azure/storage-blob.StorageURL.pipeline)
  - name: url
    uid: '@azure/storage-blob.ContainerURL.url'
    package: '@azure/storage-blob'
    summary: Encoded URL string value.
    fullName: url
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        description: ''
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageURL.url](xref:@azure/storage-blob.StorageURL.url)
inheritedMethods:
  - name: 'newPipeline(Credential, INewPipelineOptions)'
    uid: '@azure/storage-blob.ContainerURL.newPipeline'
    package: '@azure/storage-blob'
    summary: >-
      A static method used to create a new Pipeline object with Credential
      provided.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function newPipeline(credential: Credential, pipelineOptions?:
        INewPipelineOptions): Pipeline
      parameters:
        - id: credential
          type: <xref uid="@azure/storage-blob.Credential" />
          description: 'Such as AnonymousCredential, SharedKeyCredential or TokenCredential.'
        - id: pipelineOptions
          type: <xref uid="@azure/storage-blob.INewPipelineOptions" />
          description: ''
      return:
        description: A new Pipeline object.
        type: <xref uid="@azure/storage-blob.Pipeline" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageURL.newPipeline](xref:@azure/storage-blob.StorageURL.newPipeline)
methods:
  - name: 'acquireLease(Aborter, string, number, IContainerAcquireLeaseOptions)'
    uid: '@azure/storage-blob.ContainerURL.acquireLease'
    package: '@azure/storage-blob'
    summary: >-
      Establishes and manages a lock on a container for delete operations.

      The lock duration can be 15 to 60 seconds, or can be infinite.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function acquireLease(aborter: Aborter, proposedLeaseId: string,
        duration: number, options?: IContainerAcquireLeaseOptions):
        Promise<Models.ContainerAcquireLeaseResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: proposedLeaseId
          type: string
          description: Can be specified in any valid GUID string format
        - id: duration
          type: number
          description: 'Must be between 15 to 60 seconds, or infinite (-1)'
        - id: options
          type: <xref uid="@azure/storage-blob.IContainerAcquireLeaseOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.ContainerAcquireLeaseResponse" />&gt;
  - name: 'breakLease(Aborter, number, IContainerBreakLeaseOptions)'
    uid: '@azure/storage-blob.ContainerURL.breakLease'
    package: '@azure/storage-blob'
    summary: >-
      To end the lease but ensure that another client cannot acquire a new lease

      until the current lease period has expired.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function breakLease(aborter: Aborter, period: number, options?:
        IContainerBreakLeaseOptions):
        Promise<Models.ContainerBreakLeaseResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: period
          type: number
          description: break period
        - id: options
          type: <xref uid="@azure/storage-blob.IContainerBreakLeaseOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.ContainerBreakLeaseResponse" />&gt;
  - name: 'changeLease(Aborter, string, string, IContainerChangeLeaseOptions)'
    uid: '@azure/storage-blob.ContainerURL.changeLease'
    package: '@azure/storage-blob'
    summary: >-
      To change the ID of an existing lease.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function changeLease(aborter: Aborter, leaseId: string, proposedLeaseId:
        string, options?: IContainerChangeLeaseOptions):
        Promise<Models.ContainerChangeLeaseResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: leaseId
          type: string
          description: ''
        - id: proposedLeaseId
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IContainerChangeLeaseOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.ContainerChangeLeaseResponse" />&gt;
  - name: 'create(Aborter, IContainerCreateOptions)'
    uid: '@azure/storage-blob.ContainerURL.create'
    package: '@azure/storage-blob'
    summary: >-
      Creates a new container under the specified account. If the container with

      the same name already exists, the operation fails.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(aborter: Aborter, options?: IContainerCreateOptions):
        Promise<Models.ContainerCreateResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: options
          type: <xref uid="@azure/storage-blob.IContainerCreateOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.ContainerCreateResponse" />&gt;
  - name: 'delete(Aborter, IContainerDeleteMethodOptions)'
    uid: '@azure/storage-blob.ContainerURL.delete'
    package: '@azure/storage-blob'
    summary: >-
      Marks the specified container for deletion. The container and any blobs

      contained within it are later deleted during garbage collection.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function delete(aborter: Aborter, options?:
        IContainerDeleteMethodOptions): Promise<Models.ContainerDeleteResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: options
          type: <xref uid="@azure/storage-blob.IContainerDeleteMethodOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.ContainerDeleteResponse" />&gt;
  - name: 'fromServiceURL(ServiceURL, string)'
    uid: '@azure/storage-blob.ContainerURL.fromServiceURL'
    package: '@azure/storage-blob'
    summary: Creates a ContainerURL object from ServiceURL
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromServiceURL(serviceURL: ServiceURL, containerName:
        string): ContainerURL
      parameters:
        - id: serviceURL
          type: <xref uid="@azure/storage-blob.ServiceURL" />
          description: A ServiceURL object
        - id: containerName
          type: string
          description: |
            A container name
      return:
        description: ''
        type: <xref uid="@azure/storage-blob.ContainerURL" />
  - name: 'getAccessPolicy(Aborter, IContainerGetAccessPolicyOptions)'
    uid: '@azure/storage-blob.ContainerURL.getAccessPolicy'
    package: '@azure/storage-blob'
    summary: >-
      Gets the permissions for the specified container. The permissions indicate

      whether container data may be accessed publicly.

      WARNING: JavaScript Date will potential lost precision when parsing start
      and expiry string.

      For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will
      get "2018-12-31T03:44:23.882Z".



      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAccessPolicy(aborter: Aborter, options?:
        IContainerGetAccessPolicyOptions):
        Promise<ContainerGetAccessPolicyResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: options
          type: <xref uid="@azure/storage-blob.IContainerGetAccessPolicyOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ContainerGetAccessPolicyResponse" />&gt;
  - name: 'getProperties(Aborter, IContainerGetPropertiesOptions)'
    uid: '@azure/storage-blob.ContainerURL.getProperties'
    package: '@azure/storage-blob'
    summary: >-
      Returns all user-defined metadata and system properties for the specified

      container. The data returned does not include the container's list of
      blobs.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(aborter: Aborter, options?:
        IContainerGetPropertiesOptions):
        Promise<Models.ContainerGetPropertiesResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: options
          type: <xref uid="@azure/storage-blob.IContainerGetPropertiesOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.ContainerGetPropertiesResponse" />&gt;
  - name: >-
      listBlobFlatSegment(Aborter, undefined | string,
      IContainerListBlobsSegmentOptions)
    uid: '@azure/storage-blob.ContainerURL.listBlobFlatSegment'
    package: '@azure/storage-blob'
    summary: >-
      listBlobFlatSegment returns a single segment of blobs starting from the

      specified Marker. Use an empty Marker to start enumeration from the
      beginning.

      After getting a segment, process it, and then call ListBlobsFlatSegment
      again

      (passing the the previously-returned Marker) to get the next segment.


      See https://docs.microsoft.com/rest/api/storageservices/list-blobs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobFlatSegment(aborter: Aborter, marker?: undefined |
        string, options?: IContainerListBlobsSegmentOptions):
        Promise<Models.ContainerListBlobFlatSegmentResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: marker
          type: undefined | string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IContainerListBlobsSegmentOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="Models.ContainerListBlobFlatSegmentResponse"
          />&gt;
  - name: >-
      listBlobHierarchySegment(Aborter, string, undefined | string,
      IContainerListBlobsSegmentOptions)
    uid: '@azure/storage-blob.ContainerURL.listBlobHierarchySegment'
    package: '@azure/storage-blob'
    summary: >-
      listBlobHierarchySegment returns a single segment of blobs starting from

      the specified Marker. Use an empty Marker to start enumeration from the

      beginning. After getting a segment, process it, and then call
      ListBlobsHierarchicalSegment

      again (passing the the previously-returned Marker) to get the next
      segment.


      See https://docs.microsoft.com/rest/api/storageservices/list-blobs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobHierarchySegment(aborter: Aborter, delimiter: string,
        marker?: undefined | string, options?:
        IContainerListBlobsSegmentOptions):
        Promise<Models.ContainerListBlobHierarchySegmentResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: delimiter
          type: string
          description: ''
        - id: marker
          type: undefined | string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IContainerListBlobsSegmentOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="Models.ContainerListBlobHierarchySegmentResponse" />&gt;
  - name: 'releaseLease(Aborter, string, IContainerReleaseLeaseOptions)'
    uid: '@azure/storage-blob.ContainerURL.releaseLease'
    package: '@azure/storage-blob'
    summary: >-
      To free the lease if it is no longer needed so that another client may

      immediately acquire a lease against the container.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function releaseLease(aborter: Aborter, leaseId: string, options?:
        IContainerReleaseLeaseOptions):
        Promise<Models.ContainerReleaseLeaseResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: leaseId
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IContainerReleaseLeaseOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.ContainerReleaseLeaseResponse" />&gt;
  - name: 'renewLease(Aborter, string, IContainerRenewLeaseOptions)'
    uid: '@azure/storage-blob.ContainerURL.renewLease'
    package: '@azure/storage-blob'
    summary: >-
      To renew an existing lease.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function renewLease(aborter: Aborter, leaseId: string, options?:
        IContainerRenewLeaseOptions):
        Promise<Models.ContainerRenewLeaseResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: leaseId
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IContainerRenewLeaseOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.ContainerRenewLeaseResponse" />&gt;
  - name: >-
      setAccessPolicy(Aborter, Models.PublicAccessType, ISignedIdentifier[],
      IContainerSetAccessPolicyOptions)
    uid: '@azure/storage-blob.ContainerURL.setAccessPolicy'
    package: '@azure/storage-blob'
    summary: >-
      Sets the permissions for the specified container. The permissions indicate

      whether blobs in a container may be accessed publicly.

      When you set permissions for a container, the existing permissions are
      replaced.

      If no access or containerAcl provided, the existing container ACL will be

      removed.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setAccessPolicy(aborter: Aborter, access?:
        Models.PublicAccessType, containerAcl?: ISignedIdentifier[], options?:
        IContainerSetAccessPolicyOptions):
        Promise<Models.ContainerSetAccessPolicyResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: access
          type: <xref uid="Models.PublicAccessType" />
          description: ''
        - id: containerAcl
          type: '<xref uid="@azure/storage-blob.ISignedIdentifier" />[]'
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IContainerSetAccessPolicyOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.ContainerSetAccessPolicyResponse" />&gt;
  - name: 'setMetadata(Aborter, IMetadata, IContainerSetMetadataOptions)'
    uid: '@azure/storage-blob.ContainerURL.setMetadata'
    package: '@azure/storage-blob'
    summary: >-
      Sets one or more user-defined name-value pairs for the specified
      container.

      If no option provided, or no metadata defined in the parameter, the
      container

      metadata will be removed.



      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(aborter: Aborter, metadata?: IMetadata, options?:
        IContainerSetMetadataOptions):
        Promise<Models.ContainerSetMetadataResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: metadata
          type: <xref uid="@azure/storage-blob.IMetadata" />
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IContainerSetMetadataOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.ContainerSetMetadataResponse" />&gt;
  - name: withPipeline(Pipeline)
    uid: '@azure/storage-blob.ContainerURL.withPipeline'
    package: '@azure/storage-blob'
    summary: |-
      Creates a new ContainerURL object identical to the source but with the
      specified request policy pipeline.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function withPipeline(pipeline: Pipeline): ContainerURL'
      parameters:
        - id: pipeline
          type: <xref uid="@azure/storage-blob.Pipeline" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/storage-blob.ContainerURL" />
extends: <xref uid="@azure/storage-blob.StorageURL" />
