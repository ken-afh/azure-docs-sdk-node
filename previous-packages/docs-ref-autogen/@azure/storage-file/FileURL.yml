### YamlMime:TSType
name: FileURL
uid: '@azure/storage-file.FileURL'
package: '@azure/storage-file'
summary: A FileURL represents a URL to an Azure Storage file.
fullName: FileURL
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'FileURL(string, Pipeline)'
    uid: '@azure/storage-file.FileURL.constructor'
    package: '@azure/storage-file'
    summary: Creates an instance of FileURL.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new FileURL(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage file, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a file.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a file or directory name includes %, file or directory name must be encoded in the URL.
                                Such as a file named "myfile%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydirectory/myfile%25".
        - id: pipeline
          type: <xref uid="@azure/storage-file.Pipeline" />
          description: |-
            Call StorageURL.newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
inheritedProperties:
  - name: pipeline
    uid: '@azure/storage-file.FileURL.pipeline'
    package: '@azure/storage-file'
    summary: Request policy pipeline.
    fullName: pipeline
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'pipeline: Pipeline'
      return:
        description: ''
        type: <xref uid="@azure/storage-file.Pipeline" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageURL.pipeline](xref:@azure/storage-file.StorageURL.pipeline)
  - name: url
    uid: '@azure/storage-file.FileURL.url'
    package: '@azure/storage-file'
    summary: URL string value.
    fullName: url
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        description: ''
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageURL.url](xref:@azure/storage-file.StorageURL.url)
inheritedMethods:
  - name: 'newPipeline(Credential, INewPipelineOptions)'
    uid: '@azure/storage-file.FileURL.newPipeline'
    package: '@azure/storage-file'
    summary: >-
      A static method used to create a new Pipeline object with Credential
      provided.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function newPipeline(credential: Credential, pipelineOptions?:
        INewPipelineOptions): Pipeline
      parameters:
        - id: credential
          type: <xref uid="@azure/storage-file.Credential" />
          description: 'Such as AnonymousCredential, SharedKeyCredential.'
        - id: pipelineOptions
          type: <xref uid="@azure/storage-file.INewPipelineOptions" />
          description: ''
      return:
        description: A new Pipeline object.
        type: <xref uid="@azure/storage-file.Pipeline" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [StorageURL.newPipeline](xref:@azure/storage-file.StorageURL.newPipeline)
methods:
  - name: 'abortCopyFromURL(Aborter, string)'
    uid: '@azure/storage-file.FileURL.abortCopyFromURL'
    package: '@azure/storage-file'
    summary: >-
      Aborts a pending Copy File operation, and leaves a destination file with
      zero length and full

      metadata.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-file
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function abortCopyFromURL(aborter: Aborter, copyId: string):
        Promise<Models.FileAbortCopyResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: copyId
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.FileAbortCopyResponse" />&gt;
  - name: 'clearRange(Aborter, number, number)'
    uid: '@azure/storage-file.FileURL.clearRange'
    package: '@azure/storage-file'
    summary: |-
      Clears the specified range and
      releases the space used in storage for that range.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function clearRange(aborter: Aborter, offset: number, contentLength:
        number): Promise<Models.FileUploadRangeResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: offset
          type: number
          description: ''
        - id: contentLength
          type: number
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.FileUploadRangeResponse" />&gt;
  - name: 'create(Aborter, number, IFileCreateOptions)'
    uid: '@azure/storage-file.FileURL.create'
    package: '@azure/storage-file'
    summary: >-
      Creates a new file or replaces a file. Note it only initializes the file
      with no content.


      See https://docs.microsoft.com/en-us/rest/api/storageservices/create-file
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(aborter: Aborter, size: number, options?:
        IFileCreateOptions): Promise<Models.FileCreateResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: size
          type: number
          description: 'Specifies the maximum size in bytes for the file, up to 1 TB.'
        - id: options
          type: <xref uid="@azure/storage-file.IFileCreateOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.FileCreateResponse" />&gt;
  - name: delete(Aborter)
    uid: '@azure/storage-file.FileURL.delete'
    package: '@azure/storage-file'
    summary: >-
      Removes the file from the storage account.

      When a file is successfully deleted, it is immediately removed from the
      storage

      account's index and is no longer accessible to clients. The file's data is
      later

      removed from the service during garbage collection.

      Delete File will fail with status code 409 (Conflict) and error code
      SharingViolation

      if the file is open on an SMB client.


      Delete File is not supported on a share snapshot, which is a read-only
      copy of

      a share. An attempt to perform this operation on a share snapshot will
      fail with 400 (InvalidQueryParameterValue)



      See https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delete(aborter: Aborter): Promise<Models.FileDeleteResponse>'
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.FileDeleteResponse" />&gt;
  - name: 'download(Aborter, number, undefined | number, IFileDownloadOptions)'
    uid: '@azure/storage-file.FileURL.download'
    package: '@azure/storage-file'
    summary: >-
      Reads or downloads a file from the system, including its metadata and
      properties.

      * In Node.js, data returns in a Readable stream `readableStreamBody`

      * In browsers, data returns in a promise `blobBody`



      See https://docs.microsoft.com/en-us/rest/api/storageservices/get-file
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function download(aborter: Aborter, offset: number, count?: undefined |
        number, options?: IFileDownloadOptions):
        Promise<Models.FileDownloadResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: offset
          type: number
          description: 'From which position of the file to download, >= 0'
        - id: count
          type: undefined | number
          description: ''
        - id: options
          type: <xref uid="@azure/storage-file.IFileDownloadOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.FileDownloadResponse" />&gt;
  - name: 'forceCloseHandle(Aborter, string)'
    uid: '@azure/storage-file.FileURL.forceCloseHandle'
    package: '@azure/storage-file'
    summary: >-
      Force close a specific handle for a file.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function forceCloseHandle(aborter: Aborter, handleId: string):
        Promise<Models.FileForceCloseHandlesResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: handleId
          type: string
          description: |-
            Specific handle ID, cannot be asterisk "*".
                                     Use forceCloseHandlesSegment() to close all handles.
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.FileForceCloseHandlesResponse" />&gt;
  - name: 'forceCloseHandlesSegment(Aborter, undefined | string)'
    uid: '@azure/storage-file.FileURL.forceCloseHandlesSegment'
    package: '@azure/storage-file'
    summary: >-
      Force close all handles for a file.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function forceCloseHandlesSegment(aborter: Aborter, marker?: undefined |
        string): Promise<Models.FileForceCloseHandlesResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: marker
          type: undefined | string
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.FileForceCloseHandlesResponse" />&gt;
  - name: 'fromDirectoryURL(DirectoryURL, string)'
    uid: '@azure/storage-file.FileURL.fromDirectoryURL'
    package: '@azure/storage-file'
    summary: Creates a FileURL object from a DirectoryURL object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromDirectoryURL(directoryURL: DirectoryURL, fileName:
        string): FileURL
      parameters:
        - id: directoryURL
          type: <xref uid="@azure/storage-file.DirectoryURL" />
          description: A DirectoryURL object
        - id: fileName
          type: string
          description: A file name
      return:
        description: ''
        type: <xref uid="@azure/storage-file.FileURL" />
  - name: getProperties(Aborter)
    uid: '@azure/storage-file.FileURL.getProperties'
    package: '@azure/storage-file'
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties

      for the file. It does not return the content of the file.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-properties
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(aborter: Aborter):
        Promise<Models.FileGetPropertiesResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.FileGetPropertiesResponse" />&gt;
  - name: 'getRangeList(Aborter, IFileGetRangeListOptions)'
    uid: '@azure/storage-file.FileURL.getRangeList'
    package: '@azure/storage-file'
    summary: Returns the list of valid ranges for a file.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getRangeList(aborter: Aborter, options?:
        IFileGetRangeListOptions): Promise<FileGetRangeListResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: options
          type: <xref uid="@azure/storage-file.IFileGetRangeListOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-file.FileGetRangeListResponse"
          />&gt;
  - name: >-
      listHandlesSegment(Aborter, undefined | string,
      IFileListHandlesSegmentOptions)
    uid: '@azure/storage-file.FileURL.listHandlesSegment'
    package: '@azure/storage-file'
    summary: |-
      Lists handles for a file.

      See https://docs.microsoft.com/en-us/rest/api/storageservices/list-handles
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listHandlesSegment(aborter: Aborter, marker?: undefined |
        string, options?: IFileListHandlesSegmentOptions):
        Promise<Models.FileListHandlesResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: marker
          type: undefined | string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-file.IFileListHandlesSegmentOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.FileListHandlesResponse" />&gt;
  - name: 'resize(Aborter, number)'
    uid: '@azure/storage-file.FileURL.resize'
    package: '@azure/storage-file'
    summary: >-
      Resize file.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function resize(aborter: Aborter, length: number):
        Promise<Models.FileSetHTTPHeadersResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: length
          type: number
          description: |-
            Resizes a file to the specified size in bytes.
                                   If the specified byte value is less than the current size of the file,
                                   then all ranges above the specified byte value are cleared.
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.FileSetHTTPHeadersResponse" />&gt;
  - name: 'setHTTPHeaders(Aborter, IFileHTTPHeaders)'
    uid: '@azure/storage-file.FileURL.setHTTPHeaders'
    package: '@azure/storage-file'
    summary: >-
      Sets HTTP headers on the file.

      If no option provided, or no value provided for the file HTTP headers in
      the options,

      these file HTTP headers without a value will be cleared.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setHTTPHeaders(aborter: Aborter, fileHTTPHeaders?:
        IFileHTTPHeaders): Promise<Models.FileSetHTTPHeadersResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: fileHTTPHeaders
          type: <xref uid="@azure/storage-file.IFileHTTPHeaders" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.FileSetHTTPHeadersResponse" />&gt;
  - name: 'setMetadata(Aborter, IMetadata)'
    uid: '@azure/storage-file.FileURL.setMetadata'
    package: '@azure/storage-file'
    summary: >-
      Updates user-defined metadata for the specified file.

      If no metadata defined in the option parameter, the file

      metadata will be removed.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-metadata
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(aborter: Aborter, metadata?: IMetadata):
        Promise<Models.FileSetMetadataResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: metadata
          type: <xref uid="@azure/storage-file.IMetadata" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.FileSetMetadataResponse" />&gt;
  - name: 'setProperties(Aborter, IFileProperties)'
    uid: '@azure/storage-file.FileURL.setProperties'
    package: '@azure/storage-file'
    summary: >-
      Sets properties on the file.


      See
      https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setProperties(aborter: Aborter, properties?: IFileProperties):
        Promise<ISetPropertiesResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: properties
          type: <xref uid="@azure/storage-file.IFileProperties" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/storage-file.ISetPropertiesResponse"
          />&gt;
  - name: 'startCopyFromURL(Aborter, string, IFileStartCopyOptions)'
    uid: '@azure/storage-file.FileURL.startCopyFromURL'
    package: '@azure/storage-file'
    summary: Copies a blob or file to a destination file within the storage account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function startCopyFromURL(aborter: Aborter, copySource: string,
        options?: IFileStartCopyOptions): Promise<Models.FileStartCopyResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: copySource
          type: string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.

            To copy a file to another file within the same storage account, you
            may use Shared Key to

            authenticate the source file. If you are copying a file from another
            storage account, or if you

            are copying a blob from the same storage account or another storage
            account, then you must

            authenticate the source file or blob using a shared access
            signature. If the source is a public

            blob, no authentication is required to perform the copy operation. A
            file in a share snapshot

            can also be specified as a copy source.
        - id: options
          type: <xref uid="@azure/storage-file.IFileStartCopyOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.FileStartCopyResponse" />&gt;
  - name: >-
      uploadRange(Aborter, HttpRequestBody, number, number,
      IFileUploadRangeOptions)
    uid: '@azure/storage-file.FileURL.uploadRange'
    package: '@azure/storage-file'
    summary: |-
      Upload a range of bytes to a file. Both the start and count of the
      range must be specified. The range can be up to 4 MB in size.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function uploadRange(aborter: Aborter, body: HttpRequestBody, offset:
        number, contentLength: number, options?: IFileUploadRangeOptions):
        Promise<Models.FileUploadRangeResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation.
        - id: body
          type: HttpRequestBody
          description: |-
            Blob, string, ArrayBuffer, ArrayBufferView or a function
                                          which returns a new Readable stream whose offset is from data source beginning.
        - id: offset
          type: number
          description: Offset position of the destination Azure File to upload.
        - id: contentLength
          type: number
          description: >-
            Length of body in bytes. Use Buffer.byteLength() to calculate body
            length for a
                                          string including non non-Base64/Hex-encoded characters.
        - id: options
          type: <xref uid="@azure/storage-file.IFileUploadRangeOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.FileUploadRangeResponse" />&gt;
  - name: 'uploadRangeFromURL(Aborter, string, number, number, number)'
    uid: '@azure/storage-file.FileURL.uploadRangeFromURL'
    package: '@azure/storage-file'
    summary: >-
      Upload a range of bytes to a file where the contents are read from a
      another file's URL.

      The range can be up to 4 MB in size.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function uploadRangeFromURL(aborter: Aborter, sourceURL: string,
        sourceOffset: number, destOffset: number, count: number):
        Promise<Models.FileUploadRangeFromURLResponse>
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-file.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation.
        - id: sourceURL
          type: string
          description: >-
            Specify a URL to the copy source, Shared Access Signature(SAS) maybe
            needed for authentication.
        - id: sourceOffset
          type: number
          description: >-
            The source offset to copy from. Pass 0 to copy from the beginning of
            source file.
        - id: destOffset
          type: number
          description: Offset of destination file.
        - id: count
          type: number
          description: Number of bytes to be uploaded from source file.
      return:
        description: ''
        type: Promise&lt;<xref uid="Models.FileUploadRangeFromURLResponse" />&gt;
  - name: withPipeline(Pipeline)
    uid: '@azure/storage-file.FileURL.withPipeline'
    package: '@azure/storage-file'
    summary: |-
      Creates a new FileURL object identical to the source but with the
      specified request policy pipeline.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function withPipeline(pipeline: Pipeline): FileURL'
      parameters:
        - id: pipeline
          type: <xref uid="@azure/storage-file.Pipeline" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/storage-file.FileURL" />
extends: <xref uid="@azure/storage-file.StorageURL" />
