### YamlMime:TSType
name: EventGridClient
uid: '@azure/eventgrid.EventGridClient'
package: '@azure/eventgrid'
summary: ''
fullName: EventGridClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      EventGridClient(ServiceClientCredentials,
      msRestAzure.AzureServiceClientOptions)
    uid: '@azure/eventgrid.EventGridClient.constructor'
    package: '@azure/eventgrid'
    summary: Initializes a new instance of the EventGridClient class.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new EventGridClient(credentials: ServiceClientCredentials, options?:
        msRestAzure.AzureServiceClientOptions)
      parameters:
        - id: credentials
          type: ServiceClientCredentials
          description: Credentials needed for the client to connect to Azure.
        - id: options
          type: <xref uid="msRestAzure.AzureServiceClientOptions" />
          description: ''
inheritedProperties:
  - name: acceptLanguage
    uid: '@azure/eventgrid.EventGridClient.acceptLanguage'
    package: '@azure/eventgrid'
    summary: ''
    fullName: acceptLanguage
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'acceptLanguage: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> AzureServiceClient.acceptLanguage
  - name: apiVersion
    uid: '@azure/eventgrid.EventGridClient.apiVersion'
    package: '@azure/eventgrid'
    summary: ''
    fullName: apiVersion
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'apiVersion?: undefined | string'
      return:
        description: ''
        type: undefined | string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [EventGridClientContext.apiVersion](xref:@azure/eventgrid.EventGridClientContext.apiVersion)
  - name: credentials
    uid: '@azure/eventgrid.EventGridClient.credentials'
    package: '@azure/eventgrid'
    summary: ''
    fullName: credentials
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        description: ''
        type: ServiceClientCredentials
    inheritanceDescription: >-
      <b>Inherited From</b>
      [EventGridClientContext.credentials](xref:@azure/eventgrid.EventGridClientContext.credentials)
  - name: longRunningOperationRetryTimeout
    uid: '@azure/eventgrid.EventGridClient.longRunningOperationRetryTimeout'
    package: '@azure/eventgrid'
    summary: >-
      The retry timeout in seconds for Long Running Operations. Default value is
      30.
    fullName: longRunningOperationRetryTimeout
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'longRunningOperationRetryTimeout?: undefined | number'
      return:
        description: ''
        type: undefined | number
    inheritanceDescription: <b>Inherited From</b> AzureServiceClient.longRunningOperationRetryTimeout
inheritedMethods:
  - name: >-
      beginLongRunningRequest(RequestPrepareOptions | WebResource,
      RequestOptionsBase)
    uid: '@azure/eventgrid.EventGridClient.beginLongRunningRequest'
    package: '@azure/eventgrid'
    summary: >-
      Send the initial request of a LRO (long running operation) and get back an

      HttpLongRunningOperationResponse that provides methods for polling the LRO
      and checking if the

      LRO is finished.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginLongRunningRequest(request: RequestPrepareOptions |
        WebResource, options?: RequestOptionsBase): Promise<LROPoller>
      parameters:
        - id: request
          type: RequestPrepareOptions | WebResource
          description: The request object
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        description: |-
          The HttpLongRunningOperationResponse
          that provides methods for interacting with the LRO.
        type: Promise&lt;LROPoller&gt;
    inheritanceDescription: <b>Inherited From</b> AzureServiceClient.beginLongRunningRequest
  - name: restoreLROPoller(LROPollState)
    uid: '@azure/eventgrid.EventGridClient.restoreLROPoller'
    package: '@azure/eventgrid'
    summary: >-
      Restore an LROPoller from the provided LROPollState. This method can be
      used to recreate an

      LROPoller on a different process or machine.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function restoreLROPoller(lroPollState: LROPollState): LROPoller'
      parameters:
        - id: lroPollState
          type: LROPollState
          description: ''
      return:
        description: ''
        type: LROPoller
    inheritanceDescription: <b>Inherited From</b> AzureServiceClient.restoreLROPoller
  - name: >-
      sendLongRunningRequest(RequestPrepareOptions | WebResource,
      RequestOptionsBase)
    uid: '@azure/eventgrid.EventGridClient.sendLongRunningRequest'
    package: '@azure/eventgrid'
    summary: >-
      Provides a mechanism to make a request that will poll and provide the
      final result.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendLongRunningRequest(request: RequestPrepareOptions |
        WebResource, options?: RequestOptionsBase):
        Promise<HttpOperationResponse>
      parameters:
        - id: request
          type: RequestPrepareOptions | WebResource
          description: The request object
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        description: >-
          The HttpOperationResponse containing the final polling request,
          response and the responseBody.
        type: Promise&lt;HttpOperationResponse&gt;
    inheritanceDescription: <b>Inherited From</b> AzureServiceClient.sendLongRunningRequest
  - name: 'sendLRORequest(OperationArguments, OperationSpec, RequestOptionsBase)'
    uid: '@azure/eventgrid.EventGridClient.sendLRORequest'
    package: '@azure/eventgrid'
    summary: >-
      Send the initial request of a LRO (long running operation) and get back an

      LROPoller that provides methods for polling the LRO and checking if the
      LRO is finished.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendLRORequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, options?: RequestOptionsBase):
        Promise<LROPoller>
      parameters:
        - id: operationArguments
          type: OperationArguments
          description: The arguments to the operation.
        - id: operationSpec
          type: OperationSpec
          description: The specification for the operation.
        - id: options
          type: RequestOptionsBase
          description: Additional options to be sent while making the request.
      return:
        description: >-
          The LROPoller object that provides methods for interacting with the
          LRO.
        type: Promise&lt;LROPoller&gt;
    inheritanceDescription: <b>Inherited From</b> AzureServiceClient.sendLRORequest
  - name: >-
      sendOperationRequest(OperationArguments, OperationSpec,
      ServiceCallback<any>)
    uid: '@azure/eventgrid.EventGridClient.sendOperationRequest'
    package: '@azure/eventgrid'
    summary: Send an HTTP request that is populated using the provided OperationSpec.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendOperationRequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, callback?: ServiceCallback<any>):
        Promise<RestResponse>
      parameters:
        - id: operationArguments
          type: OperationArguments
          description: >-
            The arguments that the HTTP request's templated values will be
            populated from.
        - id: operationSpec
          type: OperationSpec
          description: The OperationSpec to use to populate the httpRequest.
        - id: callback
          type: ServiceCallback&lt;any&gt;
          description: |
            The callback to call when the response is received.
      return:
        description: ''
        type: Promise&lt;RestResponse&gt;
    inheritanceDescription: <b>Inherited From</b> ServiceClient.sendOperationRequest
  - name: sendRequest(RequestPrepareOptions | WebResourceLike)
    uid: '@azure/eventgrid.EventGridClient.sendRequest'
    package: '@azure/eventgrid'
    summary: Send the provided httpRequest.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendRequest(options: RequestPrepareOptions | WebResourceLike):
        Promise<HttpOperationResponse>
      parameters:
        - id: options
          type: RequestPrepareOptions | WebResourceLike
          description: ''
      return:
        description: ''
        type: Promise&lt;HttpOperationResponse&gt;
    inheritanceDescription: <b>Inherited From</b> ServiceClient.sendRequest
methods:
  - name: 'publishEvents(string, EventGridEvent[], msRest.RequestOptionsBase)'
    uid: '@azure/eventgrid.EventGridClient.publishEvents'
    package: '@azure/eventgrid'
    summary: Publishes a batch of events to an Azure Event Grid topic.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function publishEvents(topicHostname: string, events: EventGridEvent[],
        options?: msRest.RequestOptionsBase): Promise<RestResponse>
      parameters:
        - id: topicHostname
          type: string
          description: >-
            The host name of the topic, e.g.
            topic1.westus2-1.eventgrid.azure.net
        - id: events
          type: '<xref uid="@azure/eventgrid.EventGridEvent" />[]'
          description: An array of events to be published to Event Grid.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;RestResponse&gt;
  - name: >-
      publishEvents(string, EventGridEvent[], RequestOptionsBase,
      ServiceCallback<void>)
    uid: '@azure/eventgrid.EventGridClient.publishEvents_2'
    package: '@azure/eventgrid'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function publishEvents(topicHostname: string, events: EventGridEvent[],
        options: RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: topicHostname
          type: string
          description: >-
            The host name of the topic, e.g.
            topic1.westus2-1.eventgrid.azure.net
        - id: events
          type: '<xref uid="@azure/eventgrid.EventGridEvent" />[]'
          description: An array of events to be published to Event Grid.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'publishEvents(string, EventGridEvent[], ServiceCallback<void>)'
    uid: '@azure/eventgrid.EventGridClient.publishEvents_1'
    package: '@azure/eventgrid'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function publishEvents(topicHostname: string, events: EventGridEvent[],
        callback: ServiceCallback<void>)
      parameters:
        - id: topicHostname
          type: string
          description: >-
            The host name of the topic, e.g.
            topic1.westus2-1.eventgrid.azure.net
        - id: events
          type: '<xref uid="@azure/eventgrid.EventGridEvent" />[]'
          description: An array of events to be published to Event Grid.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
extends: <xref uid="@azure/eventgrid.EventGridClientContext" />
