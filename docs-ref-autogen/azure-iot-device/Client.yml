### YamlMime:TSType
name: Client
uid: azure-iot-device.Client
package: azure-iot-device
summary: >
  IoT Hub device client used to connect a device with an Azure IoT hub.

  Users of the SDK should call one of the factory methods,

  [fromConnectionString](xref:azure-iot-device.Client.fromConnectionString)

  or
  [fromSharedAccessSignature](xref:azure-iot-device.Client.fromSharedAccessSignature)

  to create an IoT Hub device client.
fullName: Client
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'Client(DeviceTransport, string, BlobUploadClient, FileUploadInterface)'
    uid: azure-iot-device.Client.constructor
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new Client(transport: DeviceTransport, connStr?: string,
        blobUploadClient?: BlobUploadClient, fileUploadApi?:
        FileUploadInterface)
      parameters:
        - id: transport
          type: <xref uid="azure-iot-device.DeviceTransport" />
          description: |-
            An object that implements the interface
                                               expected of a transport object, e.g.,
                                               [Http](xref:azure-iot-device-http.Http).
        - id: connStr
          type: string
          description: >-
            A connection string (optional: when not provided,
            updateSharedAccessSignature must be called to set the
            SharedAccessSignature token directly).
        - id: blobUploadClient
          type: BlobUploadClient
          description: An object that is capable of uploading a stream to a blob.
        - id: fileUploadApi
          type: FileUploadInterface
          description: >
            An object that is used for communicating with IoT Hub for Blob
            Storage related actions.
inheritedMethods:
  - name: abandon(Message)
    uid: azure-iot-device.Client.abandon_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function abandon(message: Message): Promise<MessageAbandoned>'
      parameters:
        - id: message
          type: Message
          description: ''
      return:
        description: ''
        type: Promise&lt;MessageAbandoned&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [InternalClient.abandon](xref:InternalClient.abandon)
  - name: 'abandon(Message, Callback<MessageAbandoned>)'
    uid: azure-iot-device.Client.abandon
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function abandon(message: Message, abandonCallback:
        Callback<MessageAbandoned>)
      parameters:
        - id: message
          type: Message
          description: ''
        - id: abandonCallback
          type: Callback&lt;MessageAbandoned&gt;
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [InternalClient.abandon](xref:InternalClient.abandon)
  - name: 'addListener(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.Client.addListener
    package: azure-iot-device
    summary: 'Alias for `emitter.on(eventName, listener)`.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addListener(eventName: string | symbol, listener: (args: any[])
        => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.addListener
  - name: complete(Message)
    uid: azure-iot-device.Client.complete_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function complete(message: Message): Promise<MessageCompleted>'
      parameters:
        - id: message
          type: Message
          description: ''
      return:
        description: ''
        type: Promise&lt;MessageCompleted&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [InternalClient.complete](xref:InternalClient.complete)
  - name: 'complete(Message, Callback<MessageCompleted>)'
    uid: azure-iot-device.Client.complete
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function complete(message: Message, completeCallback:
        Callback<MessageCompleted>)
      parameters:
        - id: message
          type: Message
          description: ''
        - id: completeCallback
          type: Callback&lt;MessageCompleted&gt;
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [InternalClient.complete](xref:InternalClient.complete)
  - name: 'emit(string | symbol, any[])'
    uid: azure-iot-device.Client.emit
    package: azure-iot-device
    summary: >-
      Synchronously calls each of the listeners registered for the event
      named`eventName`, in the order they were registered, passing the supplied
      arguments

      to each.

      Returns `true` if the event had listeners, `false` otherwise.


      ```js

      const EventEmitter = require('events');

      const myEmitter = new EventEmitter();


      // First listener

      myEmitter.on('event', function firstListener() {
        console.log('Helloooo! first listener');
      });

      // Second listener

      myEmitter.on('event', function secondListener(arg1, arg2) {
        console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
      });

      // Third listener

      myEmitter.on('event', function thirdListener(...args) {
        const parameters = args.join(', ');
        console.log(`event with parameters ${parameters} in third listener`);
      });


      console.log(myEmitter.listeners('event'));


      myEmitter.emit('event', 1, 2, 3, 4, 5);


      // Prints:

      // [

      //   [Function: firstListener],

      //   [Function: secondListener],

      //   [Function: thirdListener]

      // ]

      // Helloooo! first listener

      // event with parameters 1, 2 in second listener

      // event with parameters 1, 2, 3, 4, 5 in third listener

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(eventName: string | symbol, args: any[]): boolean'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: args
          type: 'any[]'
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> EventEmitter.emit
  - name: eventNames()
    uid: azure-iot-device.Client.eventNames
    package: azure-iot-device
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.
      ```js
      const EventEmitter = require('events');
      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function eventNames(): Array<string | symbol>'
      return:
        description: ''
        type: Array&lt;string | symbol&gt;
    inheritanceDescription: <b>Inherited From</b> EventEmitter.eventNames
  - name: getMaxListeners()
    uid: azure-iot-device.Client.getMaxListeners
    package: azure-iot-device
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      <xref:azure-iot-device.Twin.defaultMaxListeners>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getMaxListeners(): number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.getMaxListeners
  - name: getTwin()
    uid: azure-iot-device.Client.getTwin_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTwin(): Promise<Twin>'
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-iot-device.Twin" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [InternalClient.getTwin](xref:InternalClient.getTwin)
  - name: getTwin(Callback<Twin>)
    uid: azure-iot-device.Client.getTwin
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTwin(done: Callback<Twin>)'
      parameters:
        - id: done
          type: Callback&lt;<xref uid="azure-iot-device.Twin" />&gt;
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [InternalClient.getTwin](xref:InternalClient.getTwin)
  - name: listenerCount(string | symbol)
    uid: azure-iot-device.Client.listenerCount
    package: azure-iot-device
    summary: Returns the number of listeners listening to the event named `eventName`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listenerCount(eventName: string | symbol): number'
      parameters:
        - id: eventName
          type: string | symbol
          description: |
            The name of the event being listened for
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listenerCount
  - name: listeners(string | symbol)
    uid: azure-iot-device.Client.listeners
    package: azure-iot-device
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.
      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listeners(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: 'Function[]'
    inheritanceDescription: <b>Inherited From</b> EventEmitter.listeners
  - name: 'off(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.Client.off
    package: azure-iot-device
    summary: Alias for `emitter.removeListener()`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(eventName: string | symbol, listener: (args: any[]) =>
        void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.off
  - name: 'on(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.Client.on
    package: azure-iot-device
    summary: >-
      Adds the `listener` function to the end of the listeners array for the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.

      ```js

      server.on('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependListener()` method can be used as an alternative to add
      the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.on('foo', () => console.log('a'));

      myEE.prependListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function on(eventName: string | symbol, listener: (args: any[]) =>
        void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.on
  - name: 'once(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.Client.once
    package: azure-iot-device
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName`.
      The

      next time `eventName` is triggered, this listener is removed and then
      invoked.

      ```js

      server.once('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependOnceListener()` method can be used as an alternative to
      add the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.once('foo', () => console.log('a'));

      myEE.prependOnceListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function once(eventName: string | symbol, listener: (args: any[]) =>
        void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.once
  - name: open()
    uid: azure-iot-device.Client.open_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function open(): Promise<Connected>'
      return:
        description: ''
        type: Promise&lt;Connected&gt;
    inheritanceDescription: '<b>Inherited From</b> [InternalClient.open](xref:InternalClient.open)'
  - name: open(Callback<Connected>)
    uid: azure-iot-device.Client.open
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function open(openCallback: Callback<Connected>)'
      parameters:
        - id: openCallback
          type: Callback&lt;Connected&gt;
          description: ''
    inheritanceDescription: '<b>Inherited From</b> [InternalClient.open](xref:InternalClient.open)'
  - name: 'prependListener(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.Client.prependListener
    package: azure-iot-device
    summary: >-
      Adds the `listener` function to the _beginning_ of the listeners array for
      the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.

      ```js

      server.prependListener('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependListener(eventName: string | symbol, listener: (args:
        any[]) => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.prependListener
  - name: 'prependOnceListener(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.Client.prependOnceListener
    package: azure-iot-device
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName` to
      the _beginning_ of the listeners array. The next time `eventName` is
      triggered, this

      listener is removed, and then invoked.

      ```js

      server.prependOnceListener('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener(eventName: string | symbol, listener:
        (args: any[]) => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.prependOnceListener
  - name: rawListeners(string | symbol)
    uid: azure-iot-device.Client.rawListeners
    package: azure-iot-device
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).
      ```js
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function rawListeners(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: 'Function[]'
    inheritanceDescription: <b>Inherited From</b> EventEmitter.rawListeners
  - name: reject(Message)
    uid: azure-iot-device.Client.reject_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function reject(message: Message): Promise<MessageRejected>'
      parameters:
        - id: message
          type: Message
          description: ''
      return:
        description: ''
        type: Promise&lt;MessageRejected&gt;
    inheritanceDescription: '<b>Inherited From</b> [InternalClient.reject](xref:InternalClient.reject)'
  - name: 'reject(Message, Callback<MessageRejected>)'
    uid: azure-iot-device.Client.reject
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function reject(message: Message, rejectCallback:
        Callback<MessageRejected>)
      parameters:
        - id: message
          type: Message
          description: ''
        - id: rejectCallback
          type: Callback&lt;MessageRejected&gt;
          description: ''
    inheritanceDescription: '<b>Inherited From</b> [InternalClient.reject](xref:InternalClient.reject)'
  - name: removeAllListeners(string | symbol)
    uid: azure-iot-device.Client.removeAllListeners
    package: azure-iot-device
    summary: |-
      Removes all listeners, or those of the specified `eventName`.
      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(event?: string | symbol): this'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.removeAllListeners
  - name: 'removeListener(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.Client.removeListener
    package: azure-iot-device
    summary: >-
      Removes the specified `listener` from the listener array for the event
      named`eventName`.

      ```js

      const callback = (stream) => {
        console.log('someone connected!');
      };

      server.on('connection', callback);

      // ...

      server.removeListener('connection', callback);

      ```


      `removeListener()` will remove, at most, one instance of a listener from
      the

      listener array. If any single listener has been added multiple times to
      the

      listener array for the specified `eventName`, then `removeListener()` must
      be

      called multiple times to remove each instance.


      Once an event is emitted, all listeners attached to it at the

      time of emitting are called in order. This implies that
      any`removeListener()` or `removeAllListeners()` calls _after_ emitting and
      _before_ the last listener finishes execution

      will not remove them from`emit()` in progress. Subsequent events behave as
      expected.


      ```js

      const myEmitter = new MyEmitter();


      const callbackA = () => {
        console.log('A');
        myEmitter.removeListener('event', callbackB);
      };


      const callbackB = () => {
        console.log('B');
      };


      myEmitter.on('event', callbackA);


      myEmitter.on('event', callbackB);


      // callbackA removes listener callbackB but it will still be called.

      // Internal listener array at time of emit [callbackA, callbackB]

      myEmitter.emit('event');

      // Prints:

      //   A

      //   B


      // callbackB is now removed.

      // Internal listener array [callbackA]

      myEmitter.emit('event');

      // Prints:

      //   A

      ```


      Because listeners are managed using an internal array, calling this will

      change the position indices of any listener registered _after_ the
      listener

      being removed. This will not impact the order in which listeners are
      called,

      but it means that any copies of the listener array as returned by

      the `emitter.listeners()` method will need to be recreated.


      When a single function has been added as a handler multiple times for a
      single

      event (as in the example below), `removeListener()` will remove the most

      recently added instance. In the example the `once('ping')`listener is
      removed:


      ```js

      const ee = new EventEmitter();


      function pong() {
        console.log('pong');
      }


      ee.on('ping', pong);

      ee.once('ping', pong);

      ee.removeListener('ping', pong);


      ee.emit('ping');

      ee.emit('ping');

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function removeListener(eventName: string | symbol, listener: (args:
        any[]) => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.removeListener
  - name: sendEvent(Message)
    uid: azure-iot-device.Client.sendEvent_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function sendEvent(message: Message): Promise<MessageEnqueued>'
      parameters:
        - id: message
          type: Message
          description: ''
      return:
        description: ''
        type: Promise&lt;MessageEnqueued&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [InternalClient.sendEvent](xref:InternalClient.sendEvent)
  - name: 'sendEvent(Message, Callback<MessageEnqueued>)'
    uid: azure-iot-device.Client.sendEvent
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendEvent(message: Message, sendEventCallback:
        Callback<MessageEnqueued>)
      parameters:
        - id: message
          type: Message
          description: ''
        - id: sendEventCallback
          type: Callback&lt;MessageEnqueued&gt;
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [InternalClient.sendEvent](xref:InternalClient.sendEvent)
  - name: 'sendEventBatch(Message[])'
    uid: azure-iot-device.Client.sendEventBatch_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function sendEventBatch(messages: Message[]): Promise<MessageEnqueued>'
      parameters:
        - id: messages
          type: 'Message[]'
          description: ''
      return:
        description: ''
        type: Promise&lt;MessageEnqueued&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [InternalClient.sendEventBatch](xref:InternalClient.sendEventBatch)
  - name: 'sendEventBatch(Message[], Callback<MessageEnqueued>)'
    uid: azure-iot-device.Client.sendEventBatch
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendEventBatch(messages: Message[], sendEventBatchCallback:
        Callback<MessageEnqueued>)
      parameters:
        - id: messages
          type: 'Message[]'
          description: ''
        - id: sendEventBatchCallback
          type: Callback&lt;MessageEnqueued&gt;
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [InternalClient.sendEventBatch](xref:InternalClient.sendEventBatch)
  - name: setMaxListeners(number)
    uid: azure-iot-device.Client.setMaxListeners
    package: azure-iot-device
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to`Infinity` (or `0`) to indicate an unlimited number of listeners.

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number): this'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> EventEmitter.setMaxListeners
  - name: setRetryPolicy(RetryPolicy)
    uid: azure-iot-device.Client.setRetryPolicy
    package: azure-iot-device
    summary: >-
      Sets the retry policy used by the client on all operations. The default is
      [ExponentialBackoffWithJitter](xref:azure-iot-common.ExponentialBackoffWithJitter).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setRetryPolicy(policy: RetryPolicy)'
      parameters:
        - id: policy
          type: RetryPolicy
          description: |
            The retry policy that should be used for all future operations.
    inheritanceDescription: >-
      <b>Inherited From</b>
      [InternalClient.setRetryPolicy](xref:InternalClient.setRetryPolicy)
  - name: setTransportOptions(any)
    uid: azure-iot-device.Client.setTransportOptions_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setTransportOptions(options: any): Promise<TransportConfigured>'
      parameters:
        - id: options
          type: any
          description: ''
      return:
        description: ''
        type: Promise&lt;TransportConfigured&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [InternalClient.setTransportOptions](xref:InternalClient.setTransportOptions)
  - name: 'setTransportOptions(any, Callback<TransportConfigured>)'
    uid: azure-iot-device.Client.setTransportOptions
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setTransportOptions(options: any, done:
        Callback<TransportConfigured>)
      parameters:
        - id: options
          type: any
          description: ''
        - id: done
          type: Callback&lt;TransportConfigured&gt;
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [InternalClient.setTransportOptions](xref:InternalClient.setTransportOptions)
  - name: >-
      updateSharedAccessSignature(string,
      Callback<SharedAccessSignatureUpdated>)
    uid: azure-iot-device.Client.updateSharedAccessSignature
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateSharedAccessSignature(sharedAccessSignature: string,
        updateSasCallback?: Callback<SharedAccessSignatureUpdated>)
      parameters:
        - id: sharedAccessSignature
          type: string
          description: ''
        - id: updateSasCallback
          type: Callback&lt;SharedAccessSignatureUpdated&gt;
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [InternalClient.updateSharedAccessSignature](xref:InternalClient.updateSharedAccessSignature)
methods:
  - name: close()
    uid: azure-iot-device.Client.close_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function close(): Promise<Disconnected>'
      return:
        description: ''
        type: Promise&lt;Disconnected&gt;
  - name: close(Callback<Disconnected>)
    uid: azure-iot-device.Client.close
    package: azure-iot-device
    summary: |
      Closes the transport connection and destroys the client resources.
      *Note: After calling this method the Client object cannot be reused.*
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function close(closeCallback: Callback<Disconnected>)'
      parameters:
        - id: closeCallback
          type: Callback&lt;Disconnected&gt;
          description: ''
  - name: 'fromAuthenticationProvider(AuthenticationProvider, any)'
    uid: azure-iot-device.Client.fromAuthenticationProvider
    package: azure-iot-device
    summary: >-
      Creates an IoT Hub device client from the given authentication method and
      using the given transport type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromAuthenticationProvider(authenticationProvider:
        AuthenticationProvider, transportCtor: any): Client
      parameters:
        - id: authenticationProvider
          type: AuthenticationProvider
          description: Object used to obtain the authentication parameters for the IoT hub.
        - id: transportCtor
          type: any
          description: |
            Transport protocol used to connect to IoT hub.
      return:
        description: ''
        type: <xref uid="azure-iot-device.Client" />
  - name: 'fromConnectionString(string, any)'
    uid: azure-iot-device.Client.fromConnectionString
    package: azure-iot-device
    summary: >-
      Creates an IoT Hub device client from the given connection string using
      the given transport type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromConnectionString(connStr: string, transportCtor:
        any): Client
      parameters:
        - id: connStr
          type: string
          description: >-
            A connection string which encapsulates "device connect" permissions
            on an IoT hub.
        - id: transportCtor
          type: any
          description: |
            A transport constructor.
      return:
        description: ''
        type: <xref uid="azure-iot-device.Client" />
  - name: 'fromSharedAccessSignature(string, any)'
    uid: azure-iot-device.Client.fromSharedAccessSignature
    package: azure-iot-device
    summary: |-
      Creates an IoT Hub device client from the given
                         shared access signature using the given transport type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromSharedAccessSignature(sharedAccessSignature: string,
        transportCtor: any): Client
      parameters:
        - id: sharedAccessSignature
          type: string
          description: |-
            A shared access signature which encapsulates "device
                                             connect" permissions on an IoT hub.
        - id: transportCtor
          type: any
          description: ''
      return:
        description: ''
        type: <xref uid="azure-iot-device.Client" />
  - name: getBlobSharedAccessSignature(string)
    uid: azure-iot-device.Client.getBlobSharedAccessSignature_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlobSharedAccessSignature(blobName: string):
        Promise<UploadParams>
      parameters:
        - id: blobName
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;UploadParams&gt;
  - name: 'getBlobSharedAccessSignature(string, Callback<UploadParams>)'
    uid: azure-iot-device.Client.getBlobSharedAccessSignature
    package: azure-iot-device
    summary: >-
      The `getBlobSharedAccessSignature` gets the linked storage account SAS
      Token from IoT Hub
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlobSharedAccessSignature(blobName: string, callback:
        Callback<UploadParams>)
      parameters:
        - id: blobName
          type: string
          description: >-
            The name to use for the blob that will be created with the content
            of the stream.
        - id: callback
          type: Callback&lt;UploadParams&gt;
          description: ''
  - name: 'notifyBlobUploadStatus(string, boolean, number, string)'
    uid: azure-iot-device.Client.notifyBlobUploadStatus_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function notifyBlobUploadStatus(correlationId: string, isSuccess:
        boolean, statusCode: number, statusDescription: string): Promise<void>
      parameters:
        - id: correlationId
          type: string
          description: ''
        - id: isSuccess
          type: boolean
          description: ''
        - id: statusCode
          type: number
          description: ''
        - id: statusDescription
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'notifyBlobUploadStatus(string, boolean, number, string, ErrorCallback)'
    uid: azure-iot-device.Client.notifyBlobUploadStatus
    package: azure-iot-device
    summary: >-
      The `notifyBlobUploadStatus` method sends IoT Hub the result of a blob
      upload.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function notifyBlobUploadStatus(correlationId: string, isSuccess:
        boolean, statusCode: number, statusDescription: string, callback:
        ErrorCallback)
      parameters:
        - id: correlationId
          type: string
          description: >-
            An id for correlating a upload status to a specific blob. Generated
            during the call to `getBlobSharedAccessSignature`.
        - id: isSuccess
          type: boolean
          description: >-
            The success or failure status from the storage blob operation
            result.
        - id: statusCode
          type: number
          description: The HTTP status code associated with the storage blob result.
        - id: statusDescription
          type: string
          description: The description of the HTTP status code.
        - id: callback
          type: ErrorCallback
          description: ''
  - name: >-
      onDeviceMethod(string, (request: DeviceMethodRequest, response:
      DeviceMethodResponse) => void)
    uid: azure-iot-device.Client.onDeviceMethod
    package: azure-iot-device
    summary: Registers a callback for a method named `methodName`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onDeviceMethod(methodName: string, callback: (request:
        DeviceMethodRequest, response: DeviceMethodResponse) => void)
      parameters:
        - id: methodName
          type: string
          description: Name of the method that will be handled by the callback
        - id: callback
          type: >-
            (request: DeviceMethodRequest, response: DeviceMethodResponse) =&gt;
            void
          description: >
            Function that shall be called whenever a method request for the
            method called `methodName` is received.
  - name: setOptions(DeviceClientOptions)
    uid: azure-iot-device.Client.setOptions_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setOptions(options: DeviceClientOptions):
        Promise<TransportConfigured>
      parameters:
        - id: options
          type: <xref uid="azure-iot-device.DeviceClientOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;TransportConfigured&gt;
  - name: 'setOptions(DeviceClientOptions, Callback<TransportConfigured>)'
    uid: azure-iot-device.Client.setOptions
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setOptions(options: DeviceClientOptions, done:
        Callback<TransportConfigured>)
      parameters:
        - id: options
          type: <xref uid="azure-iot-device.DeviceClientOptions" />
          description: ''
        - id: done
          type: Callback&lt;TransportConfigured&gt;
          description: ''
  - name: 'uploadToBlob(string, Stream, number)'
    uid: azure-iot-device.Client.uploadToBlob_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function uploadToBlob(blobName: string, stream: Stream, streamLength:
        number): Promise<void>
      parameters:
        - id: blobName
          type: string
          description: ''
        - id: stream
          type: Stream
          description: ''
        - id: streamLength
          type: number
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'uploadToBlob(string, Stream, number, ErrorCallback)'
    uid: azure-iot-device.Client.uploadToBlob
    package: azure-iot-device
    summary: The `uploadToBlob` method uploads a stream to a blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function uploadToBlob(blobName: string, stream: Stream, streamLength:
        number, callback: ErrorCallback)
      parameters:
        - id: blobName
          type: string
          description: >-
            The name to use for the blob that will be created with the content
            of the stream.
        - id: stream
          type: Stream
          description: The data to that should be uploaded to the blob.
        - id: streamLength
          type: number
          description: The size of the data to that should be uploaded to the blob.
        - id: callback
          type: ErrorCallback
          description: ''
extends: InternalClient
