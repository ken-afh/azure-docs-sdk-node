### YamlMime:TSType
name: IotEdgeAuthenticationProvider
uid: azure-iot-device.IotEdgeAuthenticationProvider
package: azure-iot-device
summary: >
  Provides an `AuthenticationProvider` implementation that delegates token
  generation to iotedged. This implementation is meant to be used when using the
  module client with Azure IoT Edge.

  This type inherits from `SharedAccessKeyAuthenticationProvider` and is
  functionally identical to that type except for the token generation part which
  it overrides by implementing the `_sign` method.
fullName: IotEdgeAuthenticationProvider
remarks: ''
isPreview: false
isDeprecated: false
type: class
inheritedProperties:
  - name: type
    uid: azure-iot-device.IotEdgeAuthenticationProvider.type
    package: azure-iot-device
    summary: ''
    fullName: type
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'type: AuthenticationType'
      return:
        description: ''
        type: AuthenticationType
inheritedMethods:
  - name: 'addListener(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.IotEdgeAuthenticationProvider.addListener
    package: azure-iot-device
    summary: 'Alias for `emitter.on(eventName, listener)`.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addListener(eventName: string | symbol, listener: (args: any[])
        => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: this
  - name: 'emit(string | symbol, any[])'
    uid: azure-iot-device.IotEdgeAuthenticationProvider.emit
    package: azure-iot-device
    summary: >-
      Synchronously calls each of the listeners registered for the event
      named`eventName`, in the order they were registered, passing the supplied
      arguments

      to each.

      Returns `true` if the event had listeners, `false` otherwise.


      ```js

      const EventEmitter = require('events');

      const myEmitter = new EventEmitter();


      // First listener

      myEmitter.on('event', function firstListener() {
        console.log('Helloooo! first listener');
      });

      // Second listener

      myEmitter.on('event', function secondListener(arg1, arg2) {
        console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
      });

      // Third listener

      myEmitter.on('event', function thirdListener(...args) {
        const parameters = args.join(', ');
        console.log(`event with parameters ${parameters} in third listener`);
      });


      console.log(myEmitter.listeners('event'));


      myEmitter.emit('event', 1, 2, 3, 4, 5);


      // Prints:

      // [

      //   [Function: firstListener],

      //   [Function: secondListener],

      //   [Function: thirdListener]

      // ]

      // Helloooo! first listener

      // event with parameters 1, 2 in second listener

      // event with parameters 1, 2, 3, 4, 5 in third listener

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(eventName: string | symbol, args: any[]): boolean'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: args
          type: 'any[]'
          description: ''
      return:
        description: ''
        type: boolean
  - name: eventNames()
    uid: azure-iot-device.IotEdgeAuthenticationProvider.eventNames
    package: azure-iot-device
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.
      ```js
      const EventEmitter = require('events');
      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function eventNames(): Array<string | symbol>'
      return:
        description: ''
        type: Array&lt;string | symbol&gt;
  - name: 'fromConnectionString(string, number, number)'
    uid: azure-iot-device.IotEdgeAuthenticationProvider.fromConnectionString
    package: azure-iot-device
    summary: >-
      Creates a new `SharedAccessKeyAuthenticationProvider` from a connection
      string
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromConnectionString(connectionString: string,
        tokenValidTimeInSeconds?: number, tokenRenewalMarginInSeconds?: number):
        SharedAccessKeyAuthenticationProvider
      parameters:
        - id: connectionString
          type: string
          description: >-
            A device connection string containing the required parameters for
            authentication with the IoT hub.
        - id: tokenValidTimeInSeconds
          type: number
          description: The number of seconds for which a token is supposed to be valid.
        - id: tokenRenewalMarginInSeconds
          type: number
          description: >
            The number of seconds before the end of the validity period during
            which the `SharedAccessKeyAuthenticationProvider` should renew the
            token.
      return:
        description: ''
        type: <xref uid="azure-iot-device.SharedAccessKeyAuthenticationProvider" />
  - name: getDeviceCredentials()
    uid: azure-iot-device.IotEdgeAuthenticationProvider.getDeviceCredentials_1
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getDeviceCredentials(): Promise<TransportConfig>'
      return:
        description: ''
        type: Promise&lt;TransportConfig&gt;
  - name: getDeviceCredentials(Callback<TransportConfig>)
    uid: azure-iot-device.IotEdgeAuthenticationProvider.getDeviceCredentials
    package: azure-iot-device
    summary: >-
      This method is used by the transports to gets the most current device
      credentials in the form of a `TransportConfig` object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getDeviceCredentials(callback: Callback<TransportConfig>)'
      parameters:
        - id: callback
          type: Callback&lt;TransportConfig&gt;
          description: ''
  - name: getMaxListeners()
    uid: azure-iot-device.IotEdgeAuthenticationProvider.getMaxListeners
    package: azure-iot-device
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      <xref:azure-iot-device.Twin.defaultMaxListeners>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getMaxListeners(): number'
      return:
        description: ''
        type: number
  - name: listenerCount(string | symbol)
    uid: azure-iot-device.IotEdgeAuthenticationProvider.listenerCount
    package: azure-iot-device
    summary: Returns the number of listeners listening to the event named `eventName`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listenerCount(eventName: string | symbol): number'
      parameters:
        - id: eventName
          type: string | symbol
          description: |
            The name of the event being listened for
      return:
        description: ''
        type: number
  - name: listeners(string | symbol)
    uid: azure-iot-device.IotEdgeAuthenticationProvider.listeners
    package: azure-iot-device
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.
      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listeners(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: 'Function[]'
  - name: 'off(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.IotEdgeAuthenticationProvider.off
    package: azure-iot-device
    summary: Alias for `emitter.removeListener()`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(eventName: string | symbol, listener: (args: any[]) =>
        void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: this
  - name: 'on(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.IotEdgeAuthenticationProvider.on
    package: azure-iot-device
    summary: >-
      Adds the `listener` function to the end of the listeners array for the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.

      ```js

      server.on('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependListener()` method can be used as an alternative to add
      the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.on('foo', () => console.log('a'));

      myEE.prependListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function on(eventName: string | symbol, listener: (args: any[]) =>
        void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
  - name: 'once(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.IotEdgeAuthenticationProvider.once
    package: azure-iot-device
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName`.
      The

      next time `eventName` is triggered, this listener is removed and then
      invoked.

      ```js

      server.once('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependOnceListener()` method can be used as an alternative to
      add the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.once('foo', () => console.log('a'));

      myEE.prependOnceListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function once(eventName: string | symbol, listener: (args: any[]) =>
        void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
  - name: 'prependListener(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.IotEdgeAuthenticationProvider.prependListener
    package: azure-iot-device
    summary: >-
      Adds the `listener` function to the _beginning_ of the listeners array for
      the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.

      ```js

      server.prependListener('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependListener(eventName: string | symbol, listener: (args:
        any[]) => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
  - name: 'prependOnceListener(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.IotEdgeAuthenticationProvider.prependOnceListener
    package: azure-iot-device
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName` to
      the _beginning_ of the listeners array. The next time `eventName` is
      triggered, this

      listener is removed, and then invoked.

      ```js

      server.prependOnceListener('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener(eventName: string | symbol, listener:
        (args: any[]) => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        description: ''
        type: this
  - name: rawListeners(string | symbol)
    uid: azure-iot-device.IotEdgeAuthenticationProvider.rawListeners
    package: azure-iot-device
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).
      ```js
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function rawListeners(eventName: string | symbol): Function[]'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        description: ''
        type: 'Function[]'
  - name: removeAllListeners(string | symbol)
    uid: azure-iot-device.IotEdgeAuthenticationProvider.removeAllListeners
    package: azure-iot-device
    summary: |-
      Removes all listeners, or those of the specified `eventName`.
      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(event?: string | symbol): this'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        description: ''
        type: this
  - name: 'removeListener(string | symbol, (args: any[]) => void)'
    uid: azure-iot-device.IotEdgeAuthenticationProvider.removeListener
    package: azure-iot-device
    summary: >-
      Removes the specified `listener` from the listener array for the event
      named`eventName`.

      ```js

      const callback = (stream) => {
        console.log('someone connected!');
      };

      server.on('connection', callback);

      // ...

      server.removeListener('connection', callback);

      ```


      `removeListener()` will remove, at most, one instance of a listener from
      the

      listener array. If any single listener has been added multiple times to
      the

      listener array for the specified `eventName`, then `removeListener()` must
      be

      called multiple times to remove each instance.


      Once an event is emitted, all listeners attached to it at the

      time of emitting are called in order. This implies that
      any`removeListener()` or `removeAllListeners()` calls _after_ emitting and
      _before_ the last listener finishes execution

      will not remove them from`emit()` in progress. Subsequent events behave as
      expected.


      ```js

      const myEmitter = new MyEmitter();


      const callbackA = () => {
        console.log('A');
        myEmitter.removeListener('event', callbackB);
      };


      const callbackB = () => {
        console.log('B');
      };


      myEmitter.on('event', callbackA);


      myEmitter.on('event', callbackB);


      // callbackA removes listener callbackB but it will still be called.

      // Internal listener array at time of emit [callbackA, callbackB]

      myEmitter.emit('event');

      // Prints:

      //   A

      //   B


      // callbackB is now removed.

      // Internal listener array [callbackA]

      myEmitter.emit('event');

      // Prints:

      //   A

      ```


      Because listeners are managed using an internal array, calling this will

      change the position indices of any listener registered _after_ the
      listener

      being removed. This will not impact the order in which listeners are
      called,

      but it means that any copies of the listener array as returned by

      the `emitter.listeners()` method will need to be recreated.


      When a single function has been added as a handler multiple times for a
      single

      event (as in the example below), `removeListener()` will remove the most

      recently added instance. In the example the `once('ping')`listener is
      removed:


      ```js

      const ee = new EventEmitter();


      function pong() {
        console.log('pong');
      }


      ee.on('ping', pong);

      ee.once('ping', pong);

      ee.removeListener('ping', pong);


      ee.emit('ping');

      ee.emit('ping');

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function removeListener(eventName: string | symbol, listener: (args:
        any[]) => void): this
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        description: ''
        type: this
  - name: setMaxListeners(number)
    uid: azure-iot-device.IotEdgeAuthenticationProvider.setMaxListeners
    package: azure-iot-device
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to`Infinity` (or `0`) to indicate an unlimited number of listeners.

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number): this'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        description: ''
        type: this
  - name: 'setTokenRenewalValues(number, number)'
    uid: azure-iot-device.IotEdgeAuthenticationProvider.setTokenRenewalValues
    package: azure-iot-device
    summary: >
      This method allows the caller to set new values for the authentication
      renewal.

      This function completes synchronously, BUT, will cause actions to occur
      asynchronously.

      If the provider is already doing token renewals, for instance - if a
      network connection has

      been make, invoking this function will cause a new renewal to take place
      on the almost immediately.

      Depending on the protocol, this could cause a disconnect and reconnect to
      occur.  However, if renewals

      are NOT currently occurring, we simply save off the new values for use
      later.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setTokenRenewalValues(tokenValidTimeInSeconds: number,
        tokenRenewalMarginInSeconds: number)
      parameters:
        - id: tokenValidTimeInSeconds
          type: number
          description: The number of seconds for which a token is supposed to be valid.
        - id: tokenRenewalMarginInSeconds
          type: number
          description: >
            The number of seconds before the end of the validity period during
            which the `SharedAccessKeyAuthenticationProvider` should renew the
            token.
  - name: stop()
    uid: azure-iot-device.IotEdgeAuthenticationProvider.stop
    package: azure-iot-device
    summary: Stops the timer used to renew to SAS token.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function stop()
methods:
  - name: 'getTrustBundle((err?: Error, ca?: string) => void)'
    uid: azure-iot-device.IotEdgeAuthenticationProvider.getTrustBundle
    package: azure-iot-device
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTrustBundle(callback: (err?: Error, ca?: string) => void)'
      parameters:
        - id: callback
          type: '(err?: Error, ca?: string) =&gt; void'
          description: ''
extends: <xref uid="azure-iot-device.SharedAccessKeyAuthenticationProvider" />
