### YamlMime:TSType
name: ComputerVisionClient
uid: '@azure/cognitiveservices-computervision.ComputerVisionClient'
package: '@azure/cognitiveservices-computervision'
summary: ''
fullName: ComputerVisionClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      ComputerVisionClient(ServiceClientCredentials, string,
      msRest.ServiceClientOptions)
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.constructor'
    package: '@azure/cognitiveservices-computervision'
    summary: Initializes a new instance of the ComputerVisionClient class.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new ComputerVisionClient(credentials: ServiceClientCredentials,
        endpoint: string, options?: msRest.ServiceClientOptions)
      parameters:
        - id: credentials
          type: ServiceClientCredentials
          description: >-
            Subscription credentials which uniquely identify client
            subscription.
        - id: endpoint
          type: string
          description: Supported Cognitive Services endpoints.
        - id: options
          type: <xref uid="msRest.ServiceClientOptions" />
          description: ''
inheritedProperties:
  - name: credentials
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.credentials'
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    fullName: credentials
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        description: ''
        type: ServiceClientCredentials
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ComputerVisionClientContext.credentials](xref:@azure/cognitiveservices-computervision.ComputerVisionClientContext.credentials)
  - name: endpoint
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.endpoint'
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    fullName: endpoint
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'endpoint: string'
      return:
        description: ''
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ComputerVisionClientContext.endpoint](xref:@azure/cognitiveservices-computervision.ComputerVisionClientContext.endpoint)
inheritedMethods:
  - name: >-
      sendOperationRequest(OperationArguments, OperationSpec,
      ServiceCallback<any>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.sendOperationRequest
    package: '@azure/cognitiveservices-computervision'
    summary: Send an HTTP request that is populated using the provided OperationSpec.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendOperationRequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, callback?: ServiceCallback<any>):
        Promise<RestResponse>
      parameters:
        - id: operationArguments
          type: OperationArguments
          description: >-
            The arguments that the HTTP request's templated values will be
            populated from.
        - id: operationSpec
          type: OperationSpec
          description: The OperationSpec to use to populate the httpRequest.
        - id: callback
          type: ServiceCallback&lt;any&gt;
          description: |
            The callback to call when the response is received.
      return:
        description: ''
        type: Promise&lt;RestResponse&gt;
    inheritanceDescription: <b>Inherited From</b> ServiceClient.sendOperationRequest
  - name: sendRequest(RequestPrepareOptions | WebResourceLike)
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.sendRequest'
    package: '@azure/cognitiveservices-computervision'
    summary: Send the provided httpRequest.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendRequest(options: RequestPrepareOptions | WebResourceLike):
        Promise<HttpOperationResponse>
      parameters:
        - id: options
          type: RequestPrepareOptions | WebResourceLike
          description: ''
      return:
        description: ''
        type: Promise&lt;HttpOperationResponse&gt;
    inheritanceDescription: <b>Inherited From</b> ServiceClient.sendRequest
methods:
  - name: >-
      analyzeImage(string, ComputerVisionClientAnalyzeImageOptionalParams,
      ServiceCallback<ImageAnalysis>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImage_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function analyzeImage(url: string, options:
        ComputerVisionClientAnalyzeImageOptionalParams, callback:
        ServiceCallback<ImageAnalysis>)
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.ImageAnalysis" />&gt;
          description: |
            The callback
  - name: >-
      analyzeImage(string,
      Models.ComputerVisionClientAnalyzeImageOptionalParams)
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImage'
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      This operation extracts a rich set of visual features based on the image
      content.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL. Within

      your request, there is an optional parameter to allow you to choose which
      features to return. By

      default, image categories are returned in the response.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function analyzeImage(url: string, options?:
        Models.ComputerVisionClientAnalyzeImageOptionalParams):
        Promise<Models.AnalyzeImageResponse>
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: <xref uid="Models.ComputerVisionClientAnalyzeImageOptionalParams" />
          description: ''
      return:
        description: Promise<Models.AnalyzeImageResponse>
        type: Promise&lt;<xref uid="Models.AnalyzeImageResponse" />&gt;
  - name: 'analyzeImage(string, ServiceCallback<ImageAnalysis>)'
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImage_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function analyzeImage(url: string, callback:
        ServiceCallback<ImageAnalysis>)
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.ImageAnalysis" />&gt;
          description: |
            The callback
  - name: >-
      analyzeImageByDomain(string, string,
      ComputerVisionClientAnalyzeImageByDomainOptionalParams,
      ServiceCallback<DomainModelResults>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomain_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function analyzeImageByDomain(model: string, url: string, options:
        ComputerVisionClientAnalyzeImageByDomainOptionalParams, callback:
        ServiceCallback<DomainModelResults>)
      parameters:
        - id: model
          type: string
          description: The domain-specific content to recognize.
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageByDomainOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.DomainModelResults"
            />&gt;
          description: |
            The callback
  - name: >-
      analyzeImageByDomain(string, string,
      Models.ComputerVisionClientAnalyzeImageByDomainOptionalParams)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomain
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      This operation recognizes content within an image by applying a
      domain-specific model. The list

      of domain-specific models that are supported by the Computer Vision API
      can be retrieved using

      the /models GET request. Currently, the API provides following
      domain-specific models:

      celebrities, landmarks.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON.

      If the request failed, the response will contain an error code and a
      message to help understand

      what went wrong.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function analyzeImageByDomain(model: string, url: string, options?:
        Models.ComputerVisionClientAnalyzeImageByDomainOptionalParams):
        Promise<Models.AnalyzeImageByDomainResponse>
      parameters:
        - id: model
          type: string
          description: The domain-specific content to recognize.
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: >-
            <xref
            uid="Models.ComputerVisionClientAnalyzeImageByDomainOptionalParams"
            />
          description: ''
      return:
        description: Promise<Models.AnalyzeImageByDomainResponse>
        type: Promise&lt;<xref uid="Models.AnalyzeImageByDomainResponse" />&gt;
  - name: 'analyzeImageByDomain(string, string, ServiceCallback<DomainModelResults>)'
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomain_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function analyzeImageByDomain(model: string, url: string, callback:
        ServiceCallback<DomainModelResults>)
      parameters:
        - id: model
          type: string
          description: The domain-specific content to recognize.
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.DomainModelResults"
            />&gt;
          description: |
            The callback
  - name: >-
      analyzeImageByDomainInStream(string, msRest.HttpRequestBody,
      ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams,
      ServiceCallback<DomainModelResults>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomainInStream_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function analyzeImageByDomainInStream(model: string, image:
        msRest.HttpRequestBody, options:
        ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams,
        callback: ServiceCallback<DomainModelResults>)
      parameters:
        - id: model
          type: string
          description: The domain-specific content to recognize.
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.DomainModelResults"
            />&gt;
          description: |
            The callback
  - name: >-
      analyzeImageByDomainInStream(string, msRest.HttpRequestBody,
      Models.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomainInStream
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      This operation recognizes content within an image by applying a
      domain-specific model. The list

      of domain-specific models that are supported by the Computer Vision API
      can be retrieved using

      the /models GET request. Currently, the API provides following
      domain-specific models:

      celebrities, landmarks.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON.

      If the request failed, the response will contain an error code and a
      message to help understand

      what went wrong.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function analyzeImageByDomainInStream(model: string, image:
        msRest.HttpRequestBody, options?:
        Models.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams):
        Promise<Models.AnalyzeImageByDomainInStreamResponse>
      parameters:
        - id: model
          type: string
          description: The domain-specific content to recognize.
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="Models.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams"
            />
          description: ''
      return:
        description: Promise<Models.AnalyzeImageByDomainInStreamResponse>
        type: >-
          Promise&lt;<xref uid="Models.AnalyzeImageByDomainInStreamResponse"
          />&gt;
  - name: >-
      analyzeImageByDomainInStream(string, msRest.HttpRequestBody,
      ServiceCallback<DomainModelResults>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomainInStream_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function analyzeImageByDomainInStream(model: string, image:
        msRest.HttpRequestBody, callback: ServiceCallback<DomainModelResults>)
      parameters:
        - id: model
          type: string
          description: The domain-specific content to recognize.
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.DomainModelResults"
            />&gt;
          description: |
            The callback
  - name: >-
      analyzeImageInStream(msRest.HttpRequestBody,
      ComputerVisionClientAnalyzeImageInStreamOptionalParams,
      ServiceCallback<ImageAnalysis>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageInStream_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function analyzeImageInStream(image: msRest.HttpRequestBody, options:
        ComputerVisionClientAnalyzeImageInStreamOptionalParams, callback:
        ServiceCallback<ImageAnalysis>)
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageInStreamOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.ImageAnalysis" />&gt;
          description: |
            The callback
  - name: >-
      analyzeImageInStream(msRest.HttpRequestBody,
      Models.ComputerVisionClientAnalyzeImageInStreamOptionalParams)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageInStream
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      This operation extracts a rich set of visual features based on the image
      content.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL. Within

      your request, there is an optional parameter to allow you to choose which
      features to return. By

      default, image categories are returned in the response.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function analyzeImageInStream(image: msRest.HttpRequestBody, options?:
        Models.ComputerVisionClientAnalyzeImageInStreamOptionalParams):
        Promise<Models.AnalyzeImageInStreamResponse>
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="Models.ComputerVisionClientAnalyzeImageInStreamOptionalParams"
            />
          description: ''
      return:
        description: Promise<Models.AnalyzeImageInStreamResponse>
        type: Promise&lt;<xref uid="Models.AnalyzeImageInStreamResponse" />&gt;
  - name: >-
      analyzeImageInStream(msRest.HttpRequestBody,
      ServiceCallback<ImageAnalysis>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageInStream_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function analyzeImageInStream(image: msRest.HttpRequestBody, callback:
        ServiceCallback<ImageAnalysis>)
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.ImageAnalysis" />&gt;
          description: |
            The callback
  - name: >-
      describeImage(string, ComputerVisionClientDescribeImageOptionalParams,
      ServiceCallback<ImageDescription>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.describeImage_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function describeImage(url: string, options:
        ComputerVisionClientDescribeImageOptionalParams, callback:
        ServiceCallback<ImageDescription>)
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientDescribeImageOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.ImageDescription"
            />&gt;
          description: |
            The callback
  - name: >-
      describeImage(string,
      Models.ComputerVisionClientDescribeImageOptionalParams)
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.describeImage'
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      This operation generates a description of an image in human readable
      language with complete

      sentences. The description is based on a collection of content tags, which
      are also returned by

      the operation. More than one description can be generated for each image.
      Descriptions are

      ordered by their confidence score. Descriptions may include results from
      celebrity and landmark

      domain models, if applicable.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function describeImage(url: string, options?:
        Models.ComputerVisionClientDescribeImageOptionalParams):
        Promise<Models.DescribeImageResponse>
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: >-
            <xref uid="Models.ComputerVisionClientDescribeImageOptionalParams"
            />
          description: ''
      return:
        description: Promise<Models.DescribeImageResponse>
        type: Promise&lt;<xref uid="Models.DescribeImageResponse" />&gt;
  - name: 'describeImage(string, ServiceCallback<ImageDescription>)'
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.describeImage_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function describeImage(url: string, callback:
        ServiceCallback<ImageDescription>)
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.ImageDescription"
            />&gt;
          description: |
            The callback
  - name: >-
      describeImageInStream(msRest.HttpRequestBody,
      ComputerVisionClientDescribeImageInStreamOptionalParams,
      ServiceCallback<ImageDescription>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.describeImageInStream_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function describeImageInStream(image: msRest.HttpRequestBody, options:
        ComputerVisionClientDescribeImageInStreamOptionalParams, callback:
        ServiceCallback<ImageDescription>)
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientDescribeImageInStreamOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.ImageDescription"
            />&gt;
          description: |
            The callback
  - name: >-
      describeImageInStream(msRest.HttpRequestBody,
      Models.ComputerVisionClientDescribeImageInStreamOptionalParams)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.describeImageInStream
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      This operation generates a description of an image in human readable
      language with complete

      sentences. The description is based on a collection of content tags, which
      are also returned by

      the operation. More than one description can be generated for each image.
      Descriptions are

      ordered by their confidence score. Descriptions may include results from
      celebrity and landmark

      domain models, if applicable.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function describeImageInStream(image: msRest.HttpRequestBody, options?:
        Models.ComputerVisionClientDescribeImageInStreamOptionalParams):
        Promise<Models.DescribeImageInStreamResponse>
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="Models.ComputerVisionClientDescribeImageInStreamOptionalParams"
            />
          description: ''
      return:
        description: Promise<Models.DescribeImageInStreamResponse>
        type: Promise&lt;<xref uid="Models.DescribeImageInStreamResponse" />&gt;
  - name: >-
      describeImageInStream(msRest.HttpRequestBody,
      ServiceCallback<ImageDescription>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.describeImageInStream_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function describeImageInStream(image: msRest.HttpRequestBody, callback:
        ServiceCallback<ImageDescription>)
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.ImageDescription"
            />&gt;
          description: |
            The callback
  - name: >-
      detectObjects(string, ComputerVisionClientDetectObjectsOptionalParams,
      ServiceCallback<DetectResult>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjects_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function detectObjects(url: string, options:
        ComputerVisionClientDetectObjectsOptionalParams, callback:
        ServiceCallback<DetectResult>)
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientDetectObjectsOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.DetectResult" />&gt;
          description: |
            The callback
  - name: >-
      detectObjects(string,
      Models.ComputerVisionClientDetectObjectsOptionalParams)
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.detectObjects'
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      Performs object detection on the specified image.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function detectObjects(url: string, options?:
        Models.ComputerVisionClientDetectObjectsOptionalParams):
        Promise<Models.DetectObjectsResponse>
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: >-
            <xref uid="Models.ComputerVisionClientDetectObjectsOptionalParams"
            />
          description: ''
      return:
        description: Promise<Models.DetectObjectsResponse>
        type: Promise&lt;<xref uid="Models.DetectObjectsResponse" />&gt;
  - name: 'detectObjects(string, ServiceCallback<DetectResult>)'
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjects_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function detectObjects(url: string, callback:
        ServiceCallback<DetectResult>)
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.DetectResult" />&gt;
          description: |
            The callback
  - name: >-
      detectObjectsInStream(msRest.HttpRequestBody,
      ComputerVisionClientDetectObjectsInStreamOptionalParams,
      ServiceCallback<DetectResult>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjectsInStream_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function detectObjectsInStream(image: msRest.HttpRequestBody, options:
        ComputerVisionClientDetectObjectsInStreamOptionalParams, callback:
        ServiceCallback<DetectResult>)
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientDetectObjectsInStreamOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.DetectResult" />&gt;
          description: |
            The callback
  - name: >-
      detectObjectsInStream(msRest.HttpRequestBody,
      Models.ComputerVisionClientDetectObjectsInStreamOptionalParams)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjectsInStream
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      Performs object detection on the specified image.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function detectObjectsInStream(image: msRest.HttpRequestBody, options?:
        Models.ComputerVisionClientDetectObjectsInStreamOptionalParams):
        Promise<Models.DetectObjectsInStreamResponse>
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="Models.ComputerVisionClientDetectObjectsInStreamOptionalParams"
            />
          description: ''
      return:
        description: Promise<Models.DetectObjectsInStreamResponse>
        type: Promise&lt;<xref uid="Models.DetectObjectsInStreamResponse" />&gt;
  - name: >-
      detectObjectsInStream(msRest.HttpRequestBody,
      ServiceCallback<DetectResult>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjectsInStream_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function detectObjectsInStream(image: msRest.HttpRequestBody, callback:
        ServiceCallback<DetectResult>)
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.DetectResult" />&gt;
          description: |
            The callback
  - name: >-
      generateThumbnail(number, number, string,
      ComputerVisionClientGenerateThumbnailOptionalParams,
      ServiceCallback<void>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnail_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function generateThumbnail(width: number, height: number, url: string,
        options: ComputerVisionClientGenerateThumbnailOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: width
          type: number
          description: >-
            Width of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: height
          type: number
          description: >-
            Height of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientGenerateThumbnailOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      generateThumbnail(number, number, string,
      Models.ComputerVisionClientGenerateThumbnailOptionalParams)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnail
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      This operation generates a thumbnail image with the user-specified width
      and height. By default,

      the service analyzes the image, identifies the region of interest (ROI),
      and generates smart

      cropping coordinates based on the ROI. Smart cropping helps when you
      specify an aspect ratio

      that differs from that of the input image.

      A successful response contains the thumbnail image binary. If the request
      failed, the response

      contains an error code and a message to help determine what went wrong.

      Upon failure, the error code and an error message are returned. The error
      code could be one of

      InvalidImageUrl, InvalidImageFormat, InvalidImageSize,
      InvalidThumbnailSize, NotSupportedImage,

      FailedToProcess, Timeout, or InternalServerError.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function generateThumbnail(width: number, height: number, url: string,
        options?: Models.ComputerVisionClientGenerateThumbnailOptionalParams):
        Promise<Models.GenerateThumbnailResponse>
      parameters:
        - id: width
          type: number
          description: >-
            Width of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: height
          type: number
          description: >-
            Height of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: >-
            <xref
            uid="Models.ComputerVisionClientGenerateThumbnailOptionalParams" />
          description: ''
      return:
        description: Promise<Models.GenerateThumbnailResponse>
        type: Promise&lt;<xref uid="Models.GenerateThumbnailResponse" />&gt;
  - name: 'generateThumbnail(number, number, string, ServiceCallback<void>)'
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnail_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function generateThumbnail(width: number, height: number, url: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: width
          type: number
          description: >-
            Width of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: height
          type: number
          description: >-
            Height of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      generateThumbnailInStream(number, number, msRest.HttpRequestBody,
      ComputerVisionClientGenerateThumbnailInStreamOptionalParams,
      ServiceCallback<void>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnailInStream_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function generateThumbnailInStream(width: number, height: number, image:
        msRest.HttpRequestBody, options:
        ComputerVisionClientGenerateThumbnailInStreamOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: width
          type: number
          description: >-
            Width of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: height
          type: number
          description: >-
            Height of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientGenerateThumbnailInStreamOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      generateThumbnailInStream(number, number, msRest.HttpRequestBody,
      Models.ComputerVisionClientGenerateThumbnailInStreamOptionalParams)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnailInStream
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      This operation generates a thumbnail image with the user-specified width
      and height. By default,

      the service analyzes the image, identifies the region of interest (ROI),
      and generates smart

      cropping coordinates based on the ROI. Smart cropping helps when you
      specify an aspect ratio

      that differs from that of the input image.

      A successful response contains the thumbnail image binary. If the request
      failed, the response

      contains an error code and a message to help determine what went wrong.

      Upon failure, the error code and an error message are returned. The error
      code could be one of

      InvalidImageUrl, InvalidImageFormat, InvalidImageSize,
      InvalidThumbnailSize, NotSupportedImage,

      FailedToProcess, Timeout, or InternalServerError.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function generateThumbnailInStream(width: number, height: number, image:
        msRest.HttpRequestBody, options?:
        Models.ComputerVisionClientGenerateThumbnailInStreamOptionalParams):
        Promise<Models.GenerateThumbnailInStreamResponse>
      parameters:
        - id: width
          type: number
          description: >-
            Width of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: height
          type: number
          description: >-
            Height of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="Models.ComputerVisionClientGenerateThumbnailInStreamOptionalParams"
            />
          description: ''
      return:
        description: Promise<Models.GenerateThumbnailInStreamResponse>
        type: Promise&lt;<xref uid="Models.GenerateThumbnailInStreamResponse" />&gt;
  - name: >-
      generateThumbnailInStream(number, number, msRest.HttpRequestBody,
      ServiceCallback<void>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnailInStream_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function generateThumbnailInStream(width: number, height: number, image:
        msRest.HttpRequestBody, callback: ServiceCallback<void>)
      parameters:
        - id: width
          type: number
          description: >-
            Width of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: height
          type: number
          description: >-
            Height of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      getAreaOfInterest(string,
      ComputerVisionClientGetAreaOfInterestOptionalParams,
      ServiceCallback<AreaOfInterestResult>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterest_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAreaOfInterest(url: string, options:
        ComputerVisionClientGetAreaOfInterestOptionalParams, callback:
        ServiceCallback<AreaOfInterestResult>)
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientGetAreaOfInterestOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.AreaOfInterestResult"
            />&gt;
          description: |
            The callback
  - name: >-
      getAreaOfInterest(string,
      Models.ComputerVisionClientGetAreaOfInterestOptionalParams)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterest
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      This operation returns a bounding box around the most important area of
      the image.

      A successful response will be returned in JSON. If the request failed, the
      response contains an

      error code and a message to help determine what went wrong.

      Upon failure, the error code and an error message are returned. The error
      code could be one of

      InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage,
      FailedToProcess,

      Timeout, or InternalServerError.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAreaOfInterest(url: string, options?:
        Models.ComputerVisionClientGetAreaOfInterestOptionalParams):
        Promise<Models.GetAreaOfInterestResponse>
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: >-
            <xref
            uid="Models.ComputerVisionClientGetAreaOfInterestOptionalParams" />
          description: ''
      return:
        description: Promise<Models.GetAreaOfInterestResponse>
        type: Promise&lt;<xref uid="Models.GetAreaOfInterestResponse" />&gt;
  - name: 'getAreaOfInterest(string, ServiceCallback<AreaOfInterestResult>)'
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterest_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAreaOfInterest(url: string, callback:
        ServiceCallback<AreaOfInterestResult>)
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.AreaOfInterestResult"
            />&gt;
          description: |
            The callback
  - name: >-
      getAreaOfInterestInStream(msRest.HttpRequestBody,
      ComputerVisionClientGetAreaOfInterestInStreamOptionalParams,
      ServiceCallback<AreaOfInterestResult>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterestInStream_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAreaOfInterestInStream(image: msRest.HttpRequestBody,
        options: ComputerVisionClientGetAreaOfInterestInStreamOptionalParams,
        callback: ServiceCallback<AreaOfInterestResult>)
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientGetAreaOfInterestInStreamOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.AreaOfInterestResult"
            />&gt;
          description: |
            The callback
  - name: >-
      getAreaOfInterestInStream(msRest.HttpRequestBody,
      Models.ComputerVisionClientGetAreaOfInterestInStreamOptionalParams)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterestInStream
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      This operation returns a bounding box around the most important area of
      the image.

      A successful response will be returned in JSON. If the request failed, the
      response contains an

      error code and a message to help determine what went wrong.

      Upon failure, the error code and an error message are returned. The error
      code could be one of

      InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage,
      FailedToProcess,

      Timeout, or InternalServerError.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAreaOfInterestInStream(image: msRest.HttpRequestBody,
        options?:
        Models.ComputerVisionClientGetAreaOfInterestInStreamOptionalParams):
        Promise<Models.GetAreaOfInterestInStreamResponse>
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="Models.ComputerVisionClientGetAreaOfInterestInStreamOptionalParams"
            />
          description: ''
      return:
        description: Promise<Models.GetAreaOfInterestInStreamResponse>
        type: Promise&lt;<xref uid="Models.GetAreaOfInterestInStreamResponse" />&gt;
  - name: >-
      getAreaOfInterestInStream(msRest.HttpRequestBody,
      ServiceCallback<AreaOfInterestResult>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterestInStream_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAreaOfInterestInStream(image: msRest.HttpRequestBody,
        callback: ServiceCallback<AreaOfInterestResult>)
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.AreaOfInterestResult"
            />&gt;
          description: |
            The callback
  - name: 'getReadResult(string, msRest.RequestOptionsBase)'
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.getReadResult'
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      This interface is used for getting OCR results of Read operation. The URL
      to this interface

      should be retrieved from 'Operation-Location' field returned from Read
      interface.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getReadResult(operationId: string, options?:
        msRest.RequestOptionsBase): Promise<Models.GetReadResultResponse>
      parameters:
        - id: operationId
          type: string
          description: >-
            Id of read operation returned in the response of the 'Read'
            interface.
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.GetReadResultResponse>
        type: Promise&lt;<xref uid="Models.GetReadResultResponse" />&gt;
  - name: >-
      getReadResult(string, RequestOptionsBase,
      ServiceCallback<ReadOperationResult>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getReadResult_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getReadResult(operationId: string, options: RequestOptionsBase,
        callback: ServiceCallback<ReadOperationResult>)
      parameters:
        - id: operationId
          type: string
          description: >-
            Id of read operation returned in the response of the 'Read'
            interface.
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.ReadOperationResult"
            />&gt;
          description: |
            The callback
  - name: 'getReadResult(string, ServiceCallback<ReadOperationResult>)'
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getReadResult_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getReadResult(operationId: string, callback:
        ServiceCallback<ReadOperationResult>)
      parameters:
        - id: operationId
          type: string
          description: >-
            Id of read operation returned in the response of the 'Read'
            interface.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.ReadOperationResult"
            />&gt;
          description: |
            The callback
  - name: listModels(msRest.RequestOptionsBase)
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.listModels'
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      This operation returns the list of domain-specific models that are
      supported by the Computer

      Vision API. Currently, the API supports following domain-specific models:
      celebrity recognizer,

      landmark recognizer.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listModels(options?: msRest.RequestOptionsBase):
        Promise<Models.ListModelsResponse>
      parameters:
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        description: Promise<Models.ListModelsResponse>
        type: Promise&lt;<xref uid="Models.ListModelsResponse" />&gt;
  - name: 'listModels(RequestOptionsBase, ServiceCallback<ListModelsResult>)'
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.listModels_2'
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listModels(options: RequestOptionsBase, callback:
        ServiceCallback<ListModelsResult>)
      parameters:
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.ListModelsResult"
            />&gt;
          description: |
            The callback
  - name: listModels(ServiceCallback<ListModelsResult>)
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.listModels_1'
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listModels(callback: ServiceCallback<ListModelsResult>)'
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.ListModelsResult"
            />&gt;
          description: |
            The callback
  - name: >-
      read(string, ComputerVisionClientReadOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.read_2'
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function read(url: string, options:
        ComputerVisionClientReadOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientReadOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'read(string, Models.ComputerVisionClientReadOptionalParams)'
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.read'
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      Use this interface to get the result of a Read operation, employing the
      state-of-the-art Optical

      Character Recognition (OCR) algorithms optimized for text-heavy documents.
      When you use the Read

      interface, the response contains a field called 'Operation-Location'. The
      'Operation-Location'

      field contains the URL that you must use for your 'GetReadResult'
      operation to access OCR

      results.​
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function read(url: string, options?:
        Models.ComputerVisionClientReadOptionalParams):
        Promise<Models.ReadResponse>
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: <xref uid="Models.ComputerVisionClientReadOptionalParams" />
          description: ''
      return:
        description: Promise<Models.ReadResponse>
        type: Promise&lt;<xref uid="Models.ReadResponse" />&gt;
  - name: 'read(string, ServiceCallback<void>)'
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.read_1'
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function read(url: string, callback: ServiceCallback<void>)'
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      readInStream(msRest.HttpRequestBody,
      ComputerVisionClientReadInStreamOptionalParams, ServiceCallback<void>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.readInStream_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function readInStream(image: msRest.HttpRequestBody, options:
        ComputerVisionClientReadInStreamOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientReadInStreamOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      readInStream(msRest.HttpRequestBody,
      Models.ComputerVisionClientReadInStreamOptionalParams)
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.readInStream'
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      Use this interface to get the result of a Read operation, employing the
      state-of-the-art Optical

      Character Recognition (OCR) algorithms optimized for text-heavy documents.
      When you use the Read

      interface, the response contains a field called 'Operation-Location'. The
      'Operation-Location'

      field contains the URL that you must use for your 'GetReadResult'
      operation to access OCR

      results.​
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function readInStream(image: msRest.HttpRequestBody, options?:
        Models.ComputerVisionClientReadInStreamOptionalParams):
        Promise<Models.ReadInStreamResponse>
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: <xref uid="Models.ComputerVisionClientReadInStreamOptionalParams" />
          description: ''
      return:
        description: Promise<Models.ReadInStreamResponse>
        type: Promise&lt;<xref uid="Models.ReadInStreamResponse" />&gt;
  - name: 'readInStream(msRest.HttpRequestBody, ServiceCallback<void>)'
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.readInStream_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function readInStream(image: msRest.HttpRequestBody, callback:
        ServiceCallback<void>)
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      recognizePrintedText(boolean, string,
      ComputerVisionClientRecognizePrintedTextOptionalParams,
      ServiceCallback<OcrResult>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedText_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function recognizePrintedText(detectOrientation: boolean, url: string,
        options: ComputerVisionClientRecognizePrintedTextOptionalParams,
        callback: ServiceCallback<OcrResult>)
      parameters:
        - id: detectOrientation
          type: boolean
          description: >-
            Whether detect the text orientation in the image. With

            detectOrientation=true the OCR service tries to detect the image
            orientation and correct it

            before further processing (e.g. if it's upside-down).
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientRecognizePrintedTextOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.OcrResult" />&gt;
          description: |
            The callback
  - name: >-
      recognizePrintedText(boolean, string,
      Models.ComputerVisionClientRecognizePrintedTextOptionalParams)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedText
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      Optical Character Recognition (OCR) detects text in an image and extracts
      the recognized

      characters into a machine-usable character stream.

      Upon success, the OCR results will be returned.

      Upon failure, the error code together with an error message will be
      returned. The error code can

      be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize,
      NotSupportedImage,

      NotSupportedLanguage, or InternalServerError.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function recognizePrintedText(detectOrientation: boolean, url: string,
        options?:
        Models.ComputerVisionClientRecognizePrintedTextOptionalParams):
        Promise<Models.RecognizePrintedTextResponse>
      parameters:
        - id: detectOrientation
          type: boolean
          description: >-
            Whether detect the text orientation in the image. With

            detectOrientation=true the OCR service tries to detect the image
            orientation and correct it

            before further processing (e.g. if it's upside-down).
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: >-
            <xref
            uid="Models.ComputerVisionClientRecognizePrintedTextOptionalParams"
            />
          description: ''
      return:
        description: Promise<Models.RecognizePrintedTextResponse>
        type: Promise&lt;<xref uid="Models.RecognizePrintedTextResponse" />&gt;
  - name: 'recognizePrintedText(boolean, string, ServiceCallback<OcrResult>)'
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedText_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function recognizePrintedText(detectOrientation: boolean, url: string,
        callback: ServiceCallback<OcrResult>)
      parameters:
        - id: detectOrientation
          type: boolean
          description: >-
            Whether detect the text orientation in the image. With

            detectOrientation=true the OCR service tries to detect the image
            orientation and correct it

            before further processing (e.g. if it's upside-down).
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.OcrResult" />&gt;
          description: |
            The callback
  - name: >-
      recognizePrintedTextInStream(boolean, msRest.HttpRequestBody,
      ComputerVisionClientRecognizePrintedTextInStreamOptionalParams,
      ServiceCallback<OcrResult>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedTextInStream_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function recognizePrintedTextInStream(detectOrientation: boolean, image:
        msRest.HttpRequestBody, options:
        ComputerVisionClientRecognizePrintedTextInStreamOptionalParams,
        callback: ServiceCallback<OcrResult>)
      parameters:
        - id: detectOrientation
          type: boolean
          description: >-
            Whether detect the text orientation in the image. With

            detectOrientation=true the OCR service tries to detect the image
            orientation and correct it

            before further processing (e.g. if it's upside-down).
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.OcrResult" />&gt;
          description: |
            The callback
  - name: >-
      recognizePrintedTextInStream(boolean, msRest.HttpRequestBody,
      Models.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedTextInStream
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      Optical Character Recognition (OCR) detects text in an image and extracts
      the recognized

      characters into a machine-usable character stream.

      Upon success, the OCR results will be returned.

      Upon failure, the error code together with an error message will be
      returned. The error code can

      be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize,
      NotSupportedImage,

      NotSupportedLanguage, or InternalServerError.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function recognizePrintedTextInStream(detectOrientation: boolean, image:
        msRest.HttpRequestBody, options?:
        Models.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams):
        Promise<Models.RecognizePrintedTextInStreamResponse>
      parameters:
        - id: detectOrientation
          type: boolean
          description: >-
            Whether detect the text orientation in the image. With

            detectOrientation=true the OCR service tries to detect the image
            orientation and correct it

            before further processing (e.g. if it's upside-down).
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="Models.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams"
            />
          description: ''
      return:
        description: Promise<Models.RecognizePrintedTextInStreamResponse>
        type: >-
          Promise&lt;<xref uid="Models.RecognizePrintedTextInStreamResponse"
          />&gt;
  - name: >-
      recognizePrintedTextInStream(boolean, msRest.HttpRequestBody,
      ServiceCallback<OcrResult>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedTextInStream_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function recognizePrintedTextInStream(detectOrientation: boolean, image:
        msRest.HttpRequestBody, callback: ServiceCallback<OcrResult>)
      parameters:
        - id: detectOrientation
          type: boolean
          description: >-
            Whether detect the text orientation in the image. With

            detectOrientation=true the OCR service tries to detect the image
            orientation and correct it

            before further processing (e.g. if it's upside-down).
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.OcrResult" />&gt;
          description: |
            The callback
  - name: >-
      tagImage(string, ComputerVisionClientTagImageOptionalParams,
      ServiceCallback<TagResult>)
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.tagImage_2'
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function tagImage(url: string, options:
        ComputerVisionClientTagImageOptionalParams, callback:
        ServiceCallback<TagResult>)
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientTagImageOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.TagResult" />&gt;
          description: |
            The callback
  - name: 'tagImage(string, Models.ComputerVisionClientTagImageOptionalParams)'
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.tagImage'
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      This operation generates a list of words, or tags, that are relevant to
      the content of the

      supplied image. The Computer Vision API can return tags based on objects,
      living beings, scenery

      or actions found in images. Unlike categories, tags are not organized
      according to a

      hierarchical classification system, but correspond to image content. Tags
      may contain hints to

      avoid ambiguity or provide context, for example the tag "ascomycete" may
      be accompanied by the

      hint "fungus".

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function tagImage(url: string, options?:
        Models.ComputerVisionClientTagImageOptionalParams):
        Promise<Models.TagImageResponse>
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: options
          type: <xref uid="Models.ComputerVisionClientTagImageOptionalParams" />
          description: ''
      return:
        description: Promise<Models.TagImageResponse>
        type: Promise&lt;<xref uid="Models.TagImageResponse" />&gt;
  - name: 'tagImage(string, ServiceCallback<TagResult>)'
    uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.tagImage_1'
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function tagImage(url: string, callback: ServiceCallback<TagResult>)'
      parameters:
        - id: url
          type: string
          description: Publicly reachable URL of an image.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.TagResult" />&gt;
          description: |
            The callback
  - name: >-
      tagImageInStream(msRest.HttpRequestBody,
      ComputerVisionClientTagImageInStreamOptionalParams,
      ServiceCallback<TagResult>)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.tagImageInStream_2
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function tagImageInStream(image: msRest.HttpRequestBody, options:
        ComputerVisionClientTagImageInStreamOptionalParams, callback:
        ServiceCallback<TagResult>)
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-computervision.ComputerVisionClientTagImageInStreamOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.TagResult" />&gt;
          description: |
            The callback
  - name: >-
      tagImageInStream(msRest.HttpRequestBody,
      Models.ComputerVisionClientTagImageInStreamOptionalParams)
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.tagImageInStream
    package: '@azure/cognitiveservices-computervision'
    summary: >-
      This operation generates a list of words, or tags, that are relevant to
      the content of the

      supplied image. The Computer Vision API can return tags based on objects,
      living beings, scenery

      or actions found in images. Unlike categories, tags are not organized
      according to a

      hierarchical classification system, but correspond to image content. Tags
      may contain hints to

      avoid ambiguity or provide context, for example the tag "ascomycete" may
      be accompanied by the

      hint "fungus".

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function tagImageInStream(image: msRest.HttpRequestBody, options?:
        Models.ComputerVisionClientTagImageInStreamOptionalParams):
        Promise<Models.TagImageInStreamResponse>
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: options
          type: >-
            <xref
            uid="Models.ComputerVisionClientTagImageInStreamOptionalParams" />
          description: ''
      return:
        description: Promise<Models.TagImageInStreamResponse>
        type: Promise&lt;<xref uid="Models.TagImageInStreamResponse" />&gt;
  - name: 'tagImageInStream(msRest.HttpRequestBody, ServiceCallback<TagResult>)'
    uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.tagImageInStream_1
    package: '@azure/cognitiveservices-computervision'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function tagImageInStream(image: msRest.HttpRequestBody, callback:
        ServiceCallback<TagResult>)
      parameters:
        - id: image
          type: <xref uid="msRest.HttpRequestBody" />
          description: An image stream.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/cognitiveservices-computervision.TagResult" />&gt;
          description: |
            The callback
extends: >-
  <xref
  uid="@azure/cognitiveservices-computervision.ComputerVisionClientContext" />
