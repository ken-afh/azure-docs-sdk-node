### YamlMime:TSType
name: StatefulCallClient
uid: '@azure/communication-react.StatefulCallClient'
package: '@azure/communication-react'
summary: >
  Defines the methods that allow CallClient
  <xref:%40azure%2Fcommunication-calling%23CallClient> to be used statefully.

  The interface provides access to proxied state and also allows registering a
  handler for state change events. For

  state definition see <xref:@azure/communication-react.CallClientState>.

  State change events are driven by:

  - Returned data from <xref:%40azure%2Fcommunication-calling%23DeviceManager>
  APIs.

  - Returned data from <xref:%40azure%2Fcommunication-calling%23CallAgent> APIs.

  - Listeners automatically attached to various azure communication-calling
  objects:
    - CallAgent 'incomingCall'
    - CallAgent 'callsUpdated'
    - DeviceManager 'videoDevicesUpdated'
    - DeviceManager 'audioDevicesUpdated
    - DeviceManager 'selectedMicrophoneChanged'
    - DeviceManager 'selectedSpeakerChanged'
    - Call 'stateChanged'
    - Call 'idChanged'
    - Call 'isMutedChanged'
    - Call 'isScreenSharingOnChanged'
    - Call 'remoteParticipantsUpdated'
    - Call 'localVideoStreamsUpdated'
    - IncomingCall 'callEnded'
    - RemoteParticipant 'stateChanged'
    - RemoteParticipant 'isMutedChanged'
    - RemoteParticipant 'displayNameChanged'
    - RemoteParticipant 'isSpeakingChanged'
    - RemoteParticipant 'videoStreamsUpdated'
    - RemoteVideoStream 'isAvailableChanged'
    - TranscriptionCallFeature 'isTranscriptionActiveChanged'
    - RecordingCallFeature 'isRecordingActiveChanged'
fullName: StatefulCallClient
remarks: ''
isPreview: false
isDeprecated: false
type: interface
inheritedMethods:
  - name: 'createCallAgent(CommunicationTokenCredential, CallAgentOptions)'
    uid: '@azure/communication-react.StatefulCallClient.createCallAgent'
    package: '@azure/communication-react'
    summary: >-
      The CallAgent is used to handle calls.

      To create the CallAgent, pass a CommunicationTokenCredential object
      provided from SDK.

      - The CallClient can only have one active CallAgent instance at a time.

      - You can create a new CallClient instance to create a new CallAgent.

      - You can dispose of a CallClient's current active CallAgent, and call the
      CallClient's
        createCallAgent() method again to create a new CallAgent.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createCallAgent(tokenCredential: CommunicationTokenCredential,
        options?: CallAgentOptions): Promise<CallAgent>
      parameters:
        - id: tokenCredential
          type: CommunicationTokenCredential
          description: >-
            The token credential. Use AzureCommunicationTokenCredential from
            @azure/communication-common to create a credential.
        - id: options
          type: CallAgentOptions
          description: The CallAgentOptions for additional options like display name.
      return:
        description: ''
        type: Promise&lt;CallAgent&gt;
    inheritanceDescription: <b>Inherited From</b> CallClient.createCallAgent
  - name: getDeviceManager()
    uid: '@azure/communication-react.StatefulCallClient.getDeviceManager'
    package: '@azure/communication-react'
    summary: >-
      The DeviceManager is used to handle media devices such as cameras,
      microphones, and speakers.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getDeviceManager(): Promise<DeviceManager>'
      return:
        description: ''
        type: Promise&lt;DeviceManager&gt;
    inheritanceDescription: <b>Inherited From</b> CallClient.getDeviceManager
methods:
  - name: >-
      createView(string | undefined, CommunicationIdentifier | undefined,
      LocalVideoStreamState | RemoteVideoStreamState, CreateViewOptions)
    uid: '@azure/communication-react.StatefulCallClient.createView'
    package: '@azure/communication-react'
    summary: >
      Renders a <xref:@azure/communication-react.RemoteVideoStreamState> or
      <xref:@azure/communication-react.LocalVideoStreamState> and stores the
      resulting

      <xref:@azure/communication-react.VideoStreamRendererViewState> under the
      relevant <xref:@azure/communication-react.RemoteVideoStreamState> or

      <xref:@azure/communication-react.LocalVideoStreamState> or as unparented
      view in the state. Under the hood calls

      <xref:%40azure%2Fcommunication-calling%23VideoStreamRenderer.createView>.

      Scenario 1: Render RemoteVideoStreamState

      - CallId is required, participantId is required, and stream of type
      RemoteVideoStreamState is required

      - Resulting <xref:@azure/communication-react.VideoStreamRendererViewState>
      is stored in the given callId and participantId in

      <xref:@azure/communication-react.CallClientState>


      Scenario 2: Render LocalVideoStreamState for a call

      - CallId is required, participantId must be undefined, and stream of type
      LocalVideoStreamState is required.

      - The <xref:%40azure%2Fcommunication-calling%23Call.localVideoStreams>
      must already be started using
        <xref:%40azure%2Fcommunication-calling%23Call.startVideo>.
      - Resulting <xref:@azure/communication-react.VideoStreamRendererViewState>
      is stored in the given callId
      <xref:@azure/communication-react.CallState.localVideoStreams>
        in <xref:@azure/communication-react.CallClientState>.

      - Scenario 2: Render LocalVideoStreamState not part of a call (example
      rendering camera for local preview)

      - CallId must be undefined, participantId must be undefined, and stream of
      type LocalVideoStreamState is required.

      - Resulting <xref:@azure/communication-react.VideoStreamRendererViewState>
      is stored in under the given LocalVideoStreamState in
        <xref:CallClientState.deviceManager.unparentedViews>
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createView(callId: string | undefined, participantId:
        CommunicationIdentifier | undefined, stream: LocalVideoStreamState |
        RemoteVideoStreamState, options?: CreateViewOptions): Promise<void>
      parameters:
        - id: callId
          type: string | undefined
          description: >-
            CallId for the given stream. Can be undefined if the stream is not
            part of any call.
        - id: participantId
          type: CommunicationIdentifier | undefined
          description: >-
            <xref:RemoteParticipant.identifier> associated with the given
            RemoteVideoStreamState. Could
              be undefined if rendering LocalVideoStreamState.
        - id: stream
          type: >-
            <xref uid="@azure/communication-react.LocalVideoStreamState" /> |
            <xref uid="@azure/communication-react.RemoteVideoStreamState" />
          description: >-
            The LocalVideoStreamState or RemoteVideoStreamState to start
            rendering.
        - id: options
          type: CreateViewOptions
          description: >
            Options that are passed to the
            <xref:%40azure%2Fcommunication-calling%23VideoStreamRenderer>.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      disposeView(string | undefined, CommunicationIdentifier | undefined,
      LocalVideoStreamState | RemoteVideoStreamState)
    uid: '@azure/communication-react.StatefulCallClient.disposeView'
    package: '@azure/communication-react'
    summary: >
      Stops rendering a <xref:@azure/communication-react.RemoteVideoStreamState>
      or <xref:@azure/communication-react.LocalVideoStreamState> and removes the

      <xref:VideoStreamRendererView> from the relevant
      <xref:@azure/communication-react.RemoteVideoStreamState> in
      <xref:@azure/communication-react.CallClientState> or

      <xref:LocalVideoStream> in
      <xref:@azure/communication-react.CallClientState> or appropriate

      <xref:CallClientState.deviceManager.unparentedViews> Under the hood calls

      <xref:%40azure%2Fcommunication-calling%23VideoStreamRenderer.dispose>.

      Its important to disposeView to clean up resources properly.


      Scenario 1: Dispose RemoteVideoStreamState

      - CallId is required, participantId is required, and stream of type
      RemoteVideoStreamState is required


      Scenario 2: Dispose LocalVideoStreamState for a call

      - CallId is required, participantId must be undefined, and stream of type
      LocalVideoStreamState is required.


      - Scenario 2: Dispose LocalVideoStreamState not part of a call

      - CallId must be undefined, participantId must be undefined, and stream of
      type LocalVideoStreamState is required.

      - LocalVideoStreamState must be the original one passed to createView.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function disposeView(callId: string | undefined, participantId:
        CommunicationIdentifier | undefined, stream: LocalVideoStreamState |
        RemoteVideoStreamState)
      parameters:
        - id: callId
          type: string | undefined
          description: >-
            CallId for the given stream. Can be undefined if the stream is not
            part of any call.
        - id: participantId
          type: CommunicationIdentifier | undefined
          description: >-
            <xref:RemoteParticipant.identifier> associated with the given
            RemoteVideoStreamState. Could
              be undefined if disposing LocalVideoStreamState.
        - id: stream
          type: >-
            <xref uid="@azure/communication-react.LocalVideoStreamState" /> |
            <xref uid="@azure/communication-react.RemoteVideoStreamState" />
          description: |
            The LocalVideoStreamState or RemoteVideoStreamState to dispose.
  - name: getState()
    uid: '@azure/communication-react.StatefulCallClient.getState'
    package: '@azure/communication-react'
    summary: >-
      Holds all the state that we could proxy from CallClient
      <xref:%40azure%2Fcommunication-calling%23CallClient> as

      CallClientState <xref:@azure/communication-react.CallClientState>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getState(): CallClientState'
      return:
        description: ''
        type: <xref uid="@azure/communication-react.CallClientState" />
  - name: 'offStateChange((state: CallClientState) => void)'
    uid: '@azure/communication-react.StatefulCallClient.offStateChange'
    package: '@azure/communication-react'
    summary: Allows unregistering for 'stateChanged' events.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function offStateChange(handler: (state: CallClientState) => void)'
      parameters:
        - id: handler
          type: '(state: CallClientState) =&gt; void'
          description: |
            Original callback to be unsubscribed.
  - name: 'onStateChange((state: CallClientState) => void)'
    uid: '@azure/communication-react.StatefulCallClient.onStateChange'
    package: '@azure/communication-react'
    summary: Allows a handler to be registered for 'stateChanged' events.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onStateChange(handler: (state: CallClientState) => void)'
      parameters:
        - id: handler
          type: '(state: CallClientState) =&gt; void'
          description: |
            Callback to receive the state.
extends: CallClient
