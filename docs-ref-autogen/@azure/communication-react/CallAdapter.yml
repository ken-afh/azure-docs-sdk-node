### YamlMime:TSType
name: CallAdapter
uid: '@azure/communication-react.CallAdapter'
package: '@azure/communication-react'
summary: '<xref:CallComposite> Adapter interface.'
fullName: CallAdapter
remarks: ''
isPreview: false
isDeprecated: false
type: interface
inheritedMethods:
  - name: askDevicePermission(PermissionConstraints)
    uid: '@azure/communication-react.CallAdapter.askDevicePermission'
    package: '@azure/communication-react'
    summary: Ask for permissions of devices.
    remarks: Browser permission window will pop up if permissions are not granted yet
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function askDevicePermission(constrain: PermissionConstraints):
        Promise<void>
      parameters:
        - id: constrain
          type: PermissionConstraints
          description: >
            Define constraints for accessing local devices {@link
            @azure/communication-calling#PermissionConstraints }
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterDeviceManagement.askDevicePermission](xref:@azure/communication-react.CallAdapterDeviceManagement.askDevicePermission)
  - name: 'createStreamView(string, VideoStreamOptions)'
    uid: '@azure/communication-react.CallAdapter.createStreamView'
    package: '@azure/communication-react'
    summary: Create the html view for a stream.
    remarks: This method is implemented for composite
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createStreamView(remoteUserId?: string, options?:
        VideoStreamOptions): Promise<void>
      parameters:
        - id: remoteUserId
          type: string
          description: >-
            Id of the participant to render, leave it undefined to create the
            local camera view
        - id: options
          type: <xref uid="@azure/communication-react.VideoStreamOptions" />
          description: >
            Options to control how video streams are rendered {@link
            @azure/communication-calling#VideoStreamOptions }
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterCallManagement.createStreamView](xref:@azure/communication-react.CallAdapterCallManagement.createStreamView)
  - name: 'disposeStreamView(string, VideoStreamOptions)'
    uid: '@azure/communication-react.CallAdapter.disposeStreamView'
    package: '@azure/communication-react'
    summary: Dispose the html view for a stream.
    remarks: This method is implemented for composite
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function disposeStreamView(remoteUserId?: string, options?:
        VideoStreamOptions): Promise<void>
      parameters:
        - id: remoteUserId
          type: string
          description: >-
            Id of the participant to render, leave it undefined to dispose the
            local camera view
        - id: options
          type: <xref uid="@azure/communication-react.VideoStreamOptions" />
          description: >
            Options to control how video streams are rendered {@link
            @azure/communication-calling#VideoStreamOptions }
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterCallManagement.disposeStreamView](xref:@azure/communication-react.CallAdapterCallManagement.disposeStreamView)
  - name: joinCall(boolean)
    uid: '@azure/communication-react.CallAdapter.joinCall'
    package: '@azure/communication-react'
    summary: Join the call with microphone initially on/off.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function joinCall(microphoneOn?: boolean): Call | undefined'
      parameters:
        - id: microphoneOn
          type: boolean
          description: |
            Whether microphone is initially enabled
      return:
        description: ''
        type: Call | undefined
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterCallManagement.joinCall](xref:@azure/communication-react.CallAdapterCallManagement.joinCall)
  - name: leaveCall(boolean)
    uid: '@azure/communication-react.CallAdapter.leaveCall'
    package: '@azure/communication-react'
    summary: Leave the call
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function leaveCall(forEveryone?: boolean): Promise<void>'
      parameters:
        - id: forEveryone
          type: boolean
          description: |
            Whether to remove all participants when leaving
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterCallManagement.leaveCall](xref:@azure/communication-react.CallAdapterCallManagement.leaveCall)
  - name: mute()
    uid: '@azure/communication-react.CallAdapter.mute'
    package: '@azure/communication-react'
    summary: Mute the current user during the call or disable microphone locally
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function mute(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterCallManagement.mute](xref:@azure/communication-react.CallAdapterCallManagement.mute)
  - name: 'off("callEnded", CallEndedListener)'
    uid: '@azure/communication-react.CallAdapter.off_7'
    package: '@azure/communication-react'
    summary: Unsubscribe function for 'callEnded' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function off(event: "callEnded", listener: CallEndedListener)'
      parameters:
        - id: event
          type: '"callEnded"'
          description: ''
        - id: listener
          type: <xref uid="@azure/communication-react.CallEndedListener" />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.off](xref:@azure/communication-react.CallAdapterSubscribers.off)
  - name: 'off("callIdChanged", CallIdChangedListener)'
    uid: '@azure/communication-react.CallAdapter.off_3'
    package: '@azure/communication-react'
    summary: Unsubscribe function for 'callIdChanged' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function off(event: "callIdChanged", listener: CallIdChangedListener)'
      parameters:
        - id: event
          type: '"callIdChanged"'
          description: ''
        - id: listener
          type: <xref uid="@azure/communication-react.CallIdChangedListener" />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.off](xref:@azure/communication-react.CallAdapterSubscribers.off)
  - name: 'off("diagnosticChanged", DiagnosticChangedEventListner)'
    uid: '@azure/communication-react.CallAdapter.off_8'
    package: '@azure/communication-react'
    summary: Unsubscribe function for 'diagnosticChanged' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "diagnosticChanged", listener:
        DiagnosticChangedEventListner)
      parameters:
        - id: event
          type: '"diagnosticChanged"'
          description: ''
        - id: listener
          type: >-
            <xref uid="@azure/communication-react.DiagnosticChangedEventListner"
            />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.off](xref:@azure/communication-react.CallAdapterSubscribers.off)
  - name: 'off("displayNameChanged", DisplayNameChangedListener)'
    uid: '@azure/communication-react.CallAdapter.off_5'
    package: '@azure/communication-react'
    summary: Unsubscribe function for 'displayNameChanged' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "displayNameChanged", listener:
        DisplayNameChangedListener)
      parameters:
        - id: event
          type: '"displayNameChanged"'
          description: ''
        - id: listener
          type: <xref uid="@azure/communication-react.DisplayNameChangedListener" />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.off](xref:@azure/communication-react.CallAdapterSubscribers.off)
  - name: 'off("error", (e: AdapterError) => void)'
    uid: '@azure/communication-react.CallAdapter.off_9'
    package: '@azure/communication-react'
    summary: Unsubscribe function for 'error' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function off(event: "error", listener: (e: AdapterError) => void)'
      parameters:
        - id: event
          type: '"error"'
          description: ''
        - id: listener
          type: '(e: AdapterError) =&gt; void'
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.off](xref:@azure/communication-react.CallAdapterSubscribers.off)
  - name: >-
      off("isLocalScreenSharingActiveChanged",
      IsLocalScreenSharingActiveChangedListener)
    uid: '@azure/communication-react.CallAdapter.off_4'
    package: '@azure/communication-react'
    summary: Unsubscribe function for 'isLocalScreenSharingActiveChanged' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "isLocalScreenSharingActiveChanged", listener:
        IsLocalScreenSharingActiveChangedListener)
      parameters:
        - id: event
          type: '"isLocalScreenSharingActiveChanged"'
          description: ''
        - id: listener
          type: >-
            <xref
            uid="@azure/communication-react.IsLocalScreenSharingActiveChangedListener"
            />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.off](xref:@azure/communication-react.CallAdapterSubscribers.off)
  - name: 'off("isMutedChanged", IsMutedChangedListener)'
    uid: '@azure/communication-react.CallAdapter.off_2'
    package: '@azure/communication-react'
    summary: Unsubscribe function for 'isMutedChanged' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function off(event: "isMutedChanged", listener: IsMutedChangedListener)'
      parameters:
        - id: event
          type: '"isMutedChanged"'
          description: ''
        - id: listener
          type: <xref uid="@azure/communication-react.IsMutedChangedListener" />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.off](xref:@azure/communication-react.CallAdapterSubscribers.off)
  - name: 'off("isSpeakingChanged", IsSpeakingChangedListener)'
    uid: '@azure/communication-react.CallAdapter.off_6'
    package: '@azure/communication-react'
    summary: Unsubscribe function for 'isSpeakingChanged' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "isSpeakingChanged", listener:
        IsSpeakingChangedListener)
      parameters:
        - id: event
          type: '"isSpeakingChanged"'
          description: ''
        - id: listener
          type: <xref uid="@azure/communication-react.IsSpeakingChangedListener" />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.off](xref:@azure/communication-react.CallAdapterSubscribers.off)
  - name: 'off("participantsJoined", ParticipantsJoinedListener)'
    uid: '@azure/communication-react.CallAdapter.off'
    package: '@azure/communication-react'
    summary: Unsubscribe function for 'participantsJoined' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "participantsJoined", listener:
        ParticipantsJoinedListener)
      parameters:
        - id: event
          type: '"participantsJoined"'
          description: ''
        - id: listener
          type: <xref uid="@azure/communication-react.ParticipantsJoinedListener" />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.off](xref:@azure/communication-react.CallAdapterSubscribers.off)
  - name: 'off("participantsLeft", ParticipantsLeftListener)'
    uid: '@azure/communication-react.CallAdapter.off_1'
    package: '@azure/communication-react'
    summary: Unsubscribe function for 'participantsLeft' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "participantsLeft", listener:
        ParticipantsLeftListener)
      parameters:
        - id: event
          type: '"participantsLeft"'
          description: ''
        - id: listener
          type: <xref uid="@azure/communication-react.ParticipantsLeftListener" />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.off](xref:@azure/communication-react.CallAdapterSubscribers.off)
  - name: 'on("callEnded", CallEndedListener)'
    uid: '@azure/communication-react.CallAdapter.on_7'
    package: '@azure/communication-react'
    summary: Subscribe function for 'callEnded' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function on(event: "callEnded", listener: CallEndedListener)'
      parameters:
        - id: event
          type: '"callEnded"'
          description: ''
        - id: listener
          type: <xref uid="@azure/communication-react.CallEndedListener" />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.on](xref:@azure/communication-react.CallAdapterSubscribers.on)
  - name: 'on("callIdChanged", CallIdChangedListener)'
    uid: '@azure/communication-react.CallAdapter.on_3'
    package: '@azure/communication-react'
    summary: Subscribe function for 'callIdChanged' event.
    remarks: The event will be triggered when callId of current user changed.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function on(event: "callIdChanged", listener: CallIdChangedListener)'
      parameters:
        - id: event
          type: '"callIdChanged"'
          description: ''
        - id: listener
          type: <xref uid="@azure/communication-react.CallIdChangedListener" />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.on](xref:@azure/communication-react.CallAdapterSubscribers.on)
  - name: 'on("diagnosticChanged", DiagnosticChangedEventListner)'
    uid: '@azure/communication-react.CallAdapter.on_8'
    package: '@azure/communication-react'
    summary: >
      Subscribe function for 'diagnosticChanged' event.

      This event fires whenever there is a change in user facing diagnostics
      about the ongoing call.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "diagnosticChanged", listener:
        DiagnosticChangedEventListner)
      parameters:
        - id: event
          type: '"diagnosticChanged"'
          description: ''
        - id: listener
          type: >-
            <xref uid="@azure/communication-react.DiagnosticChangedEventListner"
            />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.on](xref:@azure/communication-react.CallAdapterSubscribers.on)
  - name: 'on("displayNameChanged", DisplayNameChangedListener)'
    uid: '@azure/communication-react.CallAdapter.on_5'
    package: '@azure/communication-react'
    summary: Subscribe function for 'displayNameChanged' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "displayNameChanged", listener:
        DisplayNameChangedListener)
      parameters:
        - id: event
          type: '"displayNameChanged"'
          description: ''
        - id: listener
          type: <xref uid="@azure/communication-react.DisplayNameChangedListener" />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.on](xref:@azure/communication-react.CallAdapterSubscribers.on)
  - name: 'on("error", (e: AdapterError) => void)'
    uid: '@azure/communication-react.CallAdapter.on_9'
    package: '@azure/communication-react'
    summary: Subscribe function for 'error' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function on(event: "error", listener: (e: AdapterError) => void)'
      parameters:
        - id: event
          type: '"error"'
          description: ''
        - id: listener
          type: '(e: AdapterError) =&gt; void'
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.on](xref:@azure/communication-react.CallAdapterSubscribers.on)
  - name: >-
      on("isLocalScreenSharingActiveChanged",
      IsLocalScreenSharingActiveChangedListener)
    uid: '@azure/communication-react.CallAdapter.on_4'
    package: '@azure/communication-react'
    summary: Subscribe function for 'isLocalScreenSharingActiveChanged' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "isLocalScreenSharingActiveChanged", listener:
        IsLocalScreenSharingActiveChangedListener)
      parameters:
        - id: event
          type: '"isLocalScreenSharingActiveChanged"'
          description: ''
        - id: listener
          type: >-
            <xref
            uid="@azure/communication-react.IsLocalScreenSharingActiveChangedListener"
            />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.on](xref:@azure/communication-react.CallAdapterSubscribers.on)
  - name: 'on("isMutedChanged", IsMutedChangedListener)'
    uid: '@azure/communication-react.CallAdapter.on_2'
    package: '@azure/communication-react'
    summary: Subscribe function for 'isMutedChanged' event.
    remarks: >-
      The event will be triggered whenever current user or remote user mute
      state changed
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function on(event: "isMutedChanged", listener: IsMutedChangedListener)'
      parameters:
        - id: event
          type: '"isMutedChanged"'
          description: ''
        - id: listener
          type: <xref uid="@azure/communication-react.IsMutedChangedListener" />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.on](xref:@azure/communication-react.CallAdapterSubscribers.on)
  - name: 'on("isSpeakingChanged", IsSpeakingChangedListener)'
    uid: '@azure/communication-react.CallAdapter.on_6'
    package: '@azure/communication-react'
    summary: Subscribe function for 'isSpeakingChanged' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "isSpeakingChanged", listener:
        IsSpeakingChangedListener)
      parameters:
        - id: event
          type: '"isSpeakingChanged"'
          description: ''
        - id: listener
          type: <xref uid="@azure/communication-react.IsSpeakingChangedListener" />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.on](xref:@azure/communication-react.CallAdapterSubscribers.on)
  - name: 'on("participantsJoined", ParticipantsJoinedListener)'
    uid: '@azure/communication-react.CallAdapter.on'
    package: '@azure/communication-react'
    summary: Subscribe function for 'participantsJoined' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "participantsJoined", listener:
        ParticipantsJoinedListener)
      parameters:
        - id: event
          type: '"participantsJoined"'
          description: ''
        - id: listener
          type: <xref uid="@azure/communication-react.ParticipantsJoinedListener" />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.on](xref:@azure/communication-react.CallAdapterSubscribers.on)
  - name: 'on("participantsLeft", ParticipantsLeftListener)'
    uid: '@azure/communication-react.CallAdapter.on_1'
    package: '@azure/communication-react'
    summary: Subscribe function for 'participantsLeft' event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "participantsLeft", listener:
        ParticipantsLeftListener)
      parameters:
        - id: event
          type: '"participantsLeft"'
          description: ''
        - id: listener
          type: <xref uid="@azure/communication-react.ParticipantsLeftListener" />
          description: ''
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterSubscribers.on](xref:@azure/communication-react.CallAdapterSubscribers.on)
  - name: queryCameras()
    uid: '@azure/communication-react.CallAdapter.queryCameras'
    package: '@azure/communication-react'
    summary: Query for available camera devices.
    remarks: This method should be called after askDevicePermission()
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function queryCameras(): Promise<VideoDeviceInfo[]>'
      return:
        description: >-
          An array of video device information entities {@link
          @azure/communication-calling#VideoDeviceInfo }
        type: 'Promise&lt;VideoDeviceInfo[]&gt;'
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterDeviceManagement.queryCameras](xref:@azure/communication-react.CallAdapterDeviceManagement.queryCameras)
  - name: queryMicrophones()
    uid: '@azure/communication-react.CallAdapter.queryMicrophones'
    package: '@azure/communication-react'
    summary: Query for available microphone devices.
    remarks: This method should be called after askDevicePermission()
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function queryMicrophones(): Promise<AudioDeviceInfo[]>'
      return:
        description: >-
          An array of audio device information entities {@link
          @azure/communication-calling#AudioDeviceInfo }
        type: 'Promise&lt;AudioDeviceInfo[]&gt;'
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterDeviceManagement.queryMicrophones](xref:@azure/communication-react.CallAdapterDeviceManagement.queryMicrophones)
  - name: querySpeakers()
    uid: '@azure/communication-react.CallAdapter.querySpeakers'
    package: '@azure/communication-react'
    summary: Query for available microphone devices.
    remarks: This method should be called after askDevicePermission()
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function querySpeakers(): Promise<AudioDeviceInfo[]>'
      return:
        description: >-
          An array of audio device information entities {@link
          @azure/communication-calling#AudioDeviceInfo }
        type: 'Promise&lt;AudioDeviceInfo[]&gt;'
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterDeviceManagement.querySpeakers](xref:@azure/communication-react.CallAdapterDeviceManagement.querySpeakers)
  - name: removeParticipant(string)
    uid: '@azure/communication-react.CallAdapter.removeParticipant'
    package: '@azure/communication-react'
    summary: Remove a participant from the call.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeParticipant(userId: string): Promise<void>'
      parameters:
        - id: userId
          type: string
          description: |
            Id of the participant to be removed
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterCallManagement.removeParticipant](xref:@azure/communication-react.CallAdapterCallManagement.removeParticipant)
  - name: 'setCamera(VideoDeviceInfo, VideoStreamOptions)'
    uid: '@azure/communication-react.CallAdapter.setCamera'
    package: '@azure/communication-react'
    summary: Set the camera to use in the call.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setCamera(sourceInfo: VideoDeviceInfo, options?:
        VideoStreamOptions): Promise<void>
      parameters:
        - id: sourceInfo
          type: VideoDeviceInfo
          description: >-
            Camera device to choose, pick one returned by  {@link
            CallAdapterDeviceManagement#queryCameras }
        - id: options
          type: <xref uid="@azure/communication-react.VideoStreamOptions" />
          description: >
            Options to control how the camera stream is rendered {@link
            @azure/communication-calling#VideoStreamOptions }
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterDeviceManagement.setCamera](xref:@azure/communication-react.CallAdapterDeviceManagement.setCamera)
  - name: setMicrophone(AudioDeviceInfo)
    uid: '@azure/communication-react.CallAdapter.setMicrophone'
    package: '@azure/communication-react'
    summary: Set the microphone to use in the call.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setMicrophone(sourceInfo: AudioDeviceInfo): Promise<void>'
      parameters:
        - id: sourceInfo
          type: AudioDeviceInfo
          description: >
            Microphone device to choose, pick one returned by {@link
            CallAdapterDeviceManagement#queryMicrophones }
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterDeviceManagement.setMicrophone](xref:@azure/communication-react.CallAdapterDeviceManagement.setMicrophone)
  - name: setSpeaker(AudioDeviceInfo)
    uid: '@azure/communication-react.CallAdapter.setSpeaker'
    package: '@azure/communication-react'
    summary: Set the speaker to use in the call.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setSpeaker(sourceInfo: AudioDeviceInfo): Promise<void>'
      parameters:
        - id: sourceInfo
          type: AudioDeviceInfo
          description: >
            Speaker device to choose, pick one returned by {@link
            CallAdapterDeviceManagement#querySpeakers }
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterDeviceManagement.setSpeaker](xref:@azure/communication-react.CallAdapterDeviceManagement.setSpeaker)
  - name: 'startCall(string[])'
    uid: '@azure/communication-react.CallAdapter.startCall'
    package: '@azure/communication-react'
    summary: Start the call.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function startCall(participants: string[]): Call | undefined'
      parameters:
        - id: participants
          type: 'string[]'
          description: |
            An array of participant ids to join
      return:
        description: ''
        type: Call | undefined
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterCallManagement.startCall](xref:@azure/communication-react.CallAdapterCallManagement.startCall)
  - name: startCamera(VideoStreamOptions)
    uid: '@azure/communication-react.CallAdapter.startCamera'
    package: '@azure/communication-react'
    summary: >-
      Start the camera

      This method will start rendering a local camera view when the call is not
      active
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function startCamera(options?: VideoStreamOptions): Promise<void>'
      parameters:
        - id: options
          type: <xref uid="@azure/communication-react.VideoStreamOptions" />
          description: >
            Options to control how video streams are rendered {@link
            @azure/communication-calling#VideoStreamOptions }
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterCallManagement.startCamera](xref:@azure/communication-react.CallAdapterCallManagement.startCamera)
  - name: startScreenShare()
    uid: '@azure/communication-react.CallAdapter.startScreenShare'
    package: '@azure/communication-react'
    summary: Start sharing the screen during a call.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function startScreenShare(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterCallManagement.startScreenShare](xref:@azure/communication-react.CallAdapterCallManagement.startScreenShare)
  - name: stopCamera()
    uid: '@azure/communication-react.CallAdapter.stopCamera'
    package: '@azure/communication-react'
    summary: >-
      Stop the camera

      This method will stop rendering a local camera view when the call is not
      active
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function stopCamera(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterCallManagement.stopCamera](xref:@azure/communication-react.CallAdapterCallManagement.stopCamera)
  - name: stopScreenShare()
    uid: '@azure/communication-react.CallAdapter.stopScreenShare'
    package: '@azure/communication-react'
    summary: Stop sharing the screen
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function stopScreenShare(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterCallManagement.stopScreenShare](xref:@azure/communication-react.CallAdapterCallManagement.stopScreenShare)
  - name: unmute()
    uid: '@azure/communication-react.CallAdapter.unmute'
    package: '@azure/communication-react'
    summary: Unmute the current user during the call or enable microphone locally
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function unmute(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [CallAdapterCallManagement.unmute](xref:@azure/communication-react.CallAdapterCallManagement.unmute)
extends: any
